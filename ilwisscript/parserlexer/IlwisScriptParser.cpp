/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g
 *     -                            On : 2017-05-10 08:09:28
 *     -                for the parser : ilwisscriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ilwisscriptParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pilwisscriptParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pilwisscriptParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pilwisscriptParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pilwisscriptParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ilwisscriptParserTokenNames[61+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'and'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'define'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'dom'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'endif'",
        (pANTLR3_UINT8) "'endwhile'",
        (pANTLR3_UINT8) "'feature-index'",
        (pANTLR3_UINT8) "'featurecoverage'",
        (pANTLR3_UINT8) "'format'",
        (pANTLR3_UINT8) "'from'",
        (pANTLR3_UINT8) "'groupBy'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'indexes'",
        (pANTLR3_UINT8) "'key='",
        (pANTLR3_UINT8) "'linecoverage'",
        (pANTLR3_UINT8) "'mod'",
        (pANTLR3_UINT8) "'not'",
        (pANTLR3_UINT8) "'or'",
        (pANTLR3_UINT8) "'pointcoverage'",
        (pANTLR3_UINT8) "'polygoncoverage'",
        (pANTLR3_UINT8) "'rastercoverage'",
        (pANTLR3_UINT8) "'reinterpret('",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'table'",
        (pANTLR3_UINT8) "'then'",
        (pANTLR3_UINT8) "'vr'",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'where'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'xor'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 ASTNode *
	script    (pilwisscriptParser ctx);
static 
 ASTNode *
	scriptLine    (pilwisscriptParser ctx);
static 
 ASTNode *
	statement    (pilwisscriptParser ctx);
static 
 SelectNode *
	selectExpr    (pilwisscriptParser ctx);
static 
 QString
	sources    (pilwisscriptParser ctx);
static 
 void
	defineStatement    (pilwisscriptParser ctx);
static 
 AssignmentNode *
	assignmentStatement    (pilwisscriptParser ctx);
static 
 OutParametersNode *
	outParameters    (pilwisscriptParser ctx);
static 
 ParametersNode *
	actualParameters    (pilwisscriptParser ctx);
static 
 TermNode *
	term    (pilwisscriptParser ctx);
static 
 Selector *
	selector    (pilwisscriptParser ctx);
static 
 TermNode *
	negation    (pilwisscriptParser ctx);
static 
 TermNode *
	unary    (pilwisscriptParser ctx);
static 
 MultiplicationNode *
	mult    (pilwisscriptParser ctx);
static 
 AddNode *
	add    (pilwisscriptParser ctx);
static 
 RelationNode *
	relation    (pilwisscriptParser ctx);
static 
 ExpressionNode *
	expression    (pilwisscriptParser ctx);
static 
 CommandNode *
	commandStatement    (pilwisscriptParser ctx);
static 
 FunctionStatementNode *
	functionStatement    (pilwisscriptParser ctx);
static 
 WhileNode *
	whileStatement    (pilwisscriptParser ctx);
static 
 BreakNode *
	breakStatement    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatPart    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatters    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatter    (pilwisscriptParser ctx);
static 
 void
	grouper    (pilwisscriptParser ctx);
static 
 void
	reintepreter    (pilwisscriptParser ctx);
static 
 void
	idlist    (pilwisscriptParser ctx);
static 
 Formatter *
	dataFormatter    (pilwisscriptParser ctx);
static 
 QString
	datatype    (pilwisscriptParser ctx);
static 
 DomainFormatter *
	domainFormatter    (pilwisscriptParser ctx);
static 
 ValueRangeNode *
	valrangePart    (pilwisscriptParser ctx);
static 
 Ifnode *
	ifStatement    (pilwisscriptParser ctx);
static 
 ReturnNode *
	returnStatement    (pilwisscriptParser ctx);
static void	ilwisscriptParserFree(pilwisscriptParser ctx);
static void     ilwisscriptParserReset (pilwisscriptParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ilwisscriptParserNewSSD(instream, NULL);
}

/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pilwisscriptParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pilwisscriptParser) ANTLR3_CALLOC(1, sizeof(ilwisscriptParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ilwisscriptParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ilwisscriptParser interface
     */
    ctx->script	= script;
    ctx->scriptLine	= scriptLine;
    ctx->statement	= statement;
    ctx->selectExpr	= selectExpr;
    ctx->sources	= sources;
    ctx->defineStatement	= defineStatement;
    ctx->assignmentStatement	= assignmentStatement;
    ctx->outParameters	= outParameters;
    ctx->actualParameters	= actualParameters;
    ctx->term	= term;
    ctx->selector	= selector;
    ctx->negation	= negation;
    ctx->unary	= unary;
    ctx->mult	= mult;
    ctx->add	= add;
    ctx->relation	= relation;
    ctx->expression	= expression;
    ctx->commandStatement	= commandStatement;
    ctx->functionStatement	= functionStatement;
    ctx->whileStatement	= whileStatement;
    ctx->breakStatement	= breakStatement;
    ctx->formatPart	= formatPart;
    ctx->formatters	= formatters;
    ctx->formatter	= formatter;
    ctx->grouper	= grouper;
    ctx->reintepreter	= reintepreter;
    ctx->idlist	= idlist;
    ctx->dataFormatter	= dataFormatter;
    ctx->datatype	= datatype;
    ctx->domainFormatter	= domainFormatter;
    ctx->valrangePart	= valrangePart;
    ctx->ifStatement	= ifStatement;
    ctx->returnStatement	= returnStatement;
    ctx->free			= ilwisscriptParserFree;
    ctx->reset			= ilwisscriptParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ilwisscriptParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ilwisscriptParserReset (pilwisscriptParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ilwisscriptParserFree(pilwisscriptParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ilwisscriptParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scriptLine_in_script42  */
static	ANTLR3_BITWORD FOLLOW_scriptLine_in_script42_bits[]	= { ANTLR3_UINT64_LIT(0x2000120200000222) };
static  ANTLR3_BITSET_LIST FOLLOW_scriptLine_in_script42	= { FOLLOW_scriptLine_in_script42_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_scriptLine70  */
static	ANTLR3_BITWORD FOLLOW_statement_in_scriptLine70_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_scriptLine70	= { FOLLOW_statement_in_scriptLine70_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_scriptLine79  */
static	ANTLR3_BITWORD FOLLOW_22_in_scriptLine79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_scriptLine79	= { FOLLOW_22_in_scriptLine79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_scriptLine85  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_scriptLine85_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_scriptLine85	= { FOLLOW_EOL_in_scriptLine85_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentStatement_in_statement101  */
static	ANTLR3_BITWORD FOLLOW_assignmentStatement_in_statement101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentStatement_in_statement101	= { FOLLOW_assignmentStatement_in_statement101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement111  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement111	= { FOLLOW_ifStatement_in_statement111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_statement122  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_statement122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_statement122	= { FOLLOW_whileStatement_in_statement122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionStatement_in_statement133  */
static	ANTLR3_BITWORD FOLLOW_functionStatement_in_statement133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionStatement_in_statement133	= { FOLLOW_functionStatement_in_statement133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_commandStatement_in_statement143  */
static	ANTLR3_BITWORD FOLLOW_commandStatement_in_statement143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_commandStatement_in_statement143	= { FOLLOW_commandStatement_in_statement143_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_statement153  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_statement153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_statement153	= { FOLLOW_dataFormatter_in_statement153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defineStatement_in_statement164  */
static	ANTLR3_BITWORD FOLLOW_defineStatement_in_statement164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defineStatement_in_statement164	= { FOLLOW_defineStatement_in_statement164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_selectExpr191  */
static	ANTLR3_BITWORD FOLLOW_45_in_selectExpr191_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_selectExpr191	= { FOLLOW_45_in_selectExpr191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_selectExpr193  */
static	ANTLR3_BITWORD FOLLOW_42_in_selectExpr193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000A00) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_selectExpr193	= { FOLLOW_42_in_selectExpr193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sources_in_selectExpr195  */
static	ANTLR3_BITWORD FOLLOW_sources_in_selectExpr195_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sources_in_selectExpr195	= { FOLLOW_sources_in_selectExpr195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_selectExpr197  */
static	ANTLR3_BITWORD FOLLOW_60_in_selectExpr197_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_selectExpr197	= { FOLLOW_60_in_selectExpr197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_selectExpr201  */
static	ANTLR3_BITWORD FOLLOW_expression_in_selectExpr201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_selectExpr201	= { FOLLOW_expression_in_selectExpr201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_sources218  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_sources218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_sources218	= { FOLLOW_STRING_in_sources218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_sources229  */
static	ANTLR3_BITWORD FOLLOW_ID_in_sources229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_sources229	= { FOLLOW_ID_in_sources229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_defineStatement247  */
static	ANTLR3_BITWORD FOLLOW_33_in_defineStatement247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_defineStatement247	= { FOLLOW_33_in_defineStatement247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_defineStatement249  */
static	ANTLR3_BITWORD FOLLOW_ID_in_defineStatement249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_defineStatement249	= { FOLLOW_ID_in_defineStatement249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_defineStatement251  */
static	ANTLR3_BITWORD FOLLOW_25_in_defineStatement251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_defineStatement251	= { FOLLOW_25_in_defineStatement251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_defineStatement253  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_defineStatement253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_defineStatement253	= { FOLLOW_STRING_in_defineStatement253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_outParameters_in_assignmentStatement274  */
static	ANTLR3_BITWORD FOLLOW_outParameters_in_assignmentStatement274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_outParameters_in_assignmentStatement274	= { FOLLOW_outParameters_in_assignmentStatement274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_assignmentStatement284  */
static	ANTLR3_BITWORD FOLLOW_25_in_assignmentStatement284_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_assignmentStatement284	= { FOLLOW_25_in_assignmentStatement284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_assignmentStatement295  */
static	ANTLR3_BITWORD FOLLOW_expression_in_assignmentStatement295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_assignmentStatement295	= { FOLLOW_expression_in_assignmentStatement295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_assignmentStatement322  */
static	ANTLR3_BITWORD FOLLOW_ID_in_assignmentStatement322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_assignmentStatement322	= { FOLLOW_ID_in_assignmentStatement322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_assignmentStatement324  */
static	ANTLR3_BITWORD FOLLOW_25_in_assignmentStatement324_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_assignmentStatement324	= { FOLLOW_25_in_assignmentStatement324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selectExpr_in_assignmentStatement349  */
static	ANTLR3_BITWORD FOLLOW_selectExpr_in_assignmentStatement349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selectExpr_in_assignmentStatement349	= { FOLLOW_selectExpr_in_assignmentStatement349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters377  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters377_bits[]	= { ANTLR3_UINT64_LIT(0x8000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters377	= { FOLLOW_ID_in_outParameters377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters382  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters382_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters382	= { FOLLOW_selector_in_outParameters382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters415  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters415	= { FOLLOW_formatPart_in_outParameters415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_outParameters428  */
static	ANTLR3_BITWORD FOLLOW_18_in_outParameters428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_outParameters428	= { FOLLOW_18_in_outParameters428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters432  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters432_bits[]	= { ANTLR3_UINT64_LIT(0x8000000020040002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters432	= { FOLLOW_ID_in_outParameters432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters437  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters437_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters437	= { FOLLOW_selector_in_outParameters437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters469  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters469	= { FOLLOW_formatPart_in_outParameters469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters510  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters510	= { FOLLOW_expression_in_actualParameters510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_actualParameters524  */
static	ANTLR3_BITWORD FOLLOW_18_in_actualParameters524_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_actualParameters524	= { FOLLOW_18_in_actualParameters524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters533  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters533	= { FOLLOW_expression_in_actualParameters533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term563  */
static	ANTLR3_BITWORD FOLLOW_14_in_term563_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term563	= { FOLLOW_14_in_term563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_term565  */
static	ANTLR3_BITWORD FOLLOW_expression_in_term565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_term565	= { FOLLOW_expression_in_term565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term567  */
static	ANTLR3_BITWORD FOLLOW_15_in_term567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term567	= { FOLLOW_15_in_term567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_term578  */
static	ANTLR3_BITWORD FOLLOW_INT_in_term578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_term578	= { FOLLOW_INT_in_term578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_term590  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_term590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_term590	= { FOLLOW_FLOAT_in_term590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_term602  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_term602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_term602	= { FOLLOW_STRING_in_term602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term618  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term618	= { FOLLOW_ID_in_term618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term620  */
static	ANTLR3_BITWORD FOLLOW_14_in_term620_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term620	= { FOLLOW_14_in_term620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_term632  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_term632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_term632	= { FOLLOW_actualParameters_in_term632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term643  */
static	ANTLR3_BITWORD FOLLOW_15_in_term643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term643	= { FOLLOW_15_in_term643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term652  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term652	= { FOLLOW_ID_in_term652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term654  */
static	ANTLR3_BITWORD FOLLOW_14_in_term654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term654	= { FOLLOW_14_in_term654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term676  */
static	ANTLR3_BITWORD FOLLOW_15_in_term676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term676	= { FOLLOW_15_in_term676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term694  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term694	= { FOLLOW_ID_in_term694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_term708  */
static	ANTLR3_BITWORD FOLLOW_selector_in_term708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_term708	= { FOLLOW_selector_in_term708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term725  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term725	= { FOLLOW_ID_in_term725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector751  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector751	= { FOLLOW_29_in_selector751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector755  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector755	= { FOLLOW_INT_in_selector755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector759  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector759	= { FOLLOW_INT_in_selector759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector761  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector761	= { FOLLOW_18_in_selector761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector765  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector765	= { FOLLOW_INT_in_selector765_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector769  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector769	= { FOLLOW_INT_in_selector769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector771  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector771	= { FOLLOW_30_in_selector771_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector779  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector779	= { FOLLOW_29_in_selector779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector783  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector783	= { FOLLOW_ID_in_selector783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector786  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector786_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector786	= { FOLLOW_18_in_selector786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_selector788  */
static	ANTLR3_BITWORD FOLLOW_46_in_selector788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_selector788	= { FOLLOW_46_in_selector788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector792  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector792	= { FOLLOW_ID_in_selector792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector797  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector797	= { FOLLOW_30_in_selector797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector806  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector806	= { FOLLOW_29_in_selector806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector808  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector808	= { FOLLOW_INT_in_selector808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector810  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector810	= { FOLLOW_30_in_selector810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector822  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector822	= { FOLLOW_29_in_selector822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector826  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector826	= { FOLLOW_ID_in_selector826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector831  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector831	= { FOLLOW_ID_in_selector831_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector834  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector834_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector834	= { FOLLOW_18_in_selector834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_selector835  */
static	ANTLR3_BITWORD FOLLOW_46_in_selector835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_selector835	= { FOLLOW_46_in_selector835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector839  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector839	= { FOLLOW_ID_in_selector839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector843  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector843	= { FOLLOW_30_in_selector843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector852  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector852	= { FOLLOW_29_in_selector852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector856  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector856	= { FOLLOW_INT_in_selector856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector861  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector861	= { FOLLOW_INT_in_selector861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector863  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector863	= { FOLLOW_30_in_selector863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_selector873  */
static	ANTLR3_BITWORD FOLLOW_29_in_selector873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_selector873	= { FOLLOW_29_in_selector873_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector877  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector877	= { FOLLOW_ID_in_selector877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector881  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector881	= { FOLLOW_ID_in_selector881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector883  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector883	= { FOLLOW_18_in_selector883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector887  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector887	= { FOLLOW_INT_in_selector887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector891  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector891	= { FOLLOW_INT_in_selector891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector894  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector894_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector894	= { FOLLOW_18_in_selector894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_selector896  */
static	ANTLR3_BITWORD FOLLOW_46_in_selector896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_selector896	= { FOLLOW_46_in_selector896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector900  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector900	= { FOLLOW_ID_in_selector900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_selector905  */
static	ANTLR3_BITWORD FOLLOW_30_in_selector905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_selector905	= { FOLLOW_30_in_selector905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_negation930  */
static	ANTLR3_BITWORD FOLLOW_49_in_negation930_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_negation930	= { FOLLOW_49_in_negation930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_negation946  */
static	ANTLR3_BITWORD FOLLOW_term_in_negation946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_negation946	= { FOLLOW_term_in_negation946_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_unary974  */
static	ANTLR3_BITWORD FOLLOW_17_in_unary974_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_unary974	= { FOLLOW_17_in_unary974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_unary986  */
static	ANTLR3_BITWORD FOLLOW_19_in_unary986_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_unary986	= { FOLLOW_19_in_unary986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_negation_in_unary1002  */
static	ANTLR3_BITWORD FOLLOW_negation_in_unary1002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_negation_in_unary1002	= { FOLLOW_negation_in_unary1002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1028  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1028_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1028	= { FOLLOW_unary_in_mult1028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_mult1043  */
static	ANTLR3_BITWORD FOLLOW_16_in_mult1043_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_mult1043	= { FOLLOW_16_in_mult1043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_mult1056  */
static	ANTLR3_BITWORD FOLLOW_21_in_mult1056_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_mult1056	= { FOLLOW_21_in_mult1056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_mult1068  */
static	ANTLR3_BITWORD FOLLOW_48_in_mult1068_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_mult1068	= { FOLLOW_48_in_mult1068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1085  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1085_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1085	= { FOLLOW_unary_in_mult1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1120  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1120_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1120	= { FOLLOW_mult_in_add1120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_add1135  */
static	ANTLR3_BITWORD FOLLOW_17_in_add1135_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_add1135	= { FOLLOW_17_in_add1135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_add1151  */
static	ANTLR3_BITWORD FOLLOW_19_in_add1151_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_add1151	= { FOLLOW_19_in_add1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1171  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1171_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1171	= { FOLLOW_mult_in_add1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1204  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1204_bits[]	= { ANTLR3_UINT64_LIT(0x000000001D802002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1204	= { FOLLOW_add_in_relation1204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_relation1222  */
static	ANTLR3_BITWORD FOLLOW_26_in_relation1222_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_relation1222	= { FOLLOW_26_in_relation1222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_relation1236  */
static	ANTLR3_BITWORD FOLLOW_13_in_relation1236_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_relation1236	= { FOLLOW_13_in_relation1236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_relation1250  */
static	ANTLR3_BITWORD FOLLOW_23_in_relation1250_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_relation1250	= { FOLLOW_23_in_relation1250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_relation1264  */
static	ANTLR3_BITWORD FOLLOW_24_in_relation1264_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_relation1264	= { FOLLOW_24_in_relation1264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_relation1278  */
static	ANTLR3_BITWORD FOLLOW_28_in_relation1278_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_relation1278	= { FOLLOW_28_in_relation1278_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_relation1292  */
static	ANTLR3_BITWORD FOLLOW_27_in_relation1292_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_relation1292	= { FOLLOW_27_in_relation1292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1310  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1310_bits[]	= { ANTLR3_UINT64_LIT(0x000000001D802002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1310	= { FOLLOW_add_in_relation1310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1344  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1344_bits[]	= { ANTLR3_UINT64_LIT(0x4004000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1344	= { FOLLOW_relation_in_expression1344_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_expression1364  */
static	ANTLR3_BITWORD FOLLOW_31_in_expression1364_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_expression1364	= { FOLLOW_31_in_expression1364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_expression1378  */
static	ANTLR3_BITWORD FOLLOW_50_in_expression1378_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_expression1378	= { FOLLOW_50_in_expression1378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_expression1392  */
static	ANTLR3_BITWORD FOLLOW_62_in_expression1392_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_expression1392	= { FOLLOW_62_in_expression1392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1409  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1409_bits[]	= { ANTLR3_UINT64_LIT(0x4004000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1409	= { FOLLOW_relation_in_expression1409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1446  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1446	= { FOLLOW_ID_in_commandStatement1446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_commandStatement1465  */
static	ANTLR3_BITWORD FOLLOW_20_in_commandStatement1465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_commandStatement1465	= { FOLLOW_20_in_commandStatement1465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1473  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1473	= { FOLLOW_ID_in_commandStatement1473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_commandStatement1484  */
static	ANTLR3_BITWORD FOLLOW_25_in_commandStatement1484_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_commandStatement1484	= { FOLLOW_25_in_commandStatement1484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_commandStatement1487  */
static	ANTLR3_BITWORD FOLLOW_expression_in_commandStatement1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_commandStatement1487	= { FOLLOW_expression_in_commandStatement1487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_functionStatement1526  */
static	ANTLR3_BITWORD FOLLOW_ID_in_functionStatement1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_functionStatement1526	= { FOLLOW_ID_in_functionStatement1526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_functionStatement1536  */
static	ANTLR3_BITWORD FOLLOW_14_in_functionStatement1536_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_functionStatement1536	= { FOLLOW_14_in_functionStatement1536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_functionStatement1538  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_functionStatement1538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_functionStatement1538	= { FOLLOW_actualParameters_in_functionStatement1538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_functionStatement1548  */
static	ANTLR3_BITWORD FOLLOW_15_in_functionStatement1548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_functionStatement1548	= { FOLLOW_15_in_functionStatement1548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_whileStatement1570  */
static	ANTLR3_BITWORD FOLLOW_61_in_whileStatement1570_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_whileStatement1570	= { FOLLOW_61_in_whileStatement1570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1572  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1572	= { FOLLOW_expression_in_whileStatement1572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_whileStatement1574  */
static	ANTLR3_BITWORD FOLLOW_34_in_whileStatement1574_bits[]	= { ANTLR3_UINT64_LIT(0x2000124300000220) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_whileStatement1574	= { FOLLOW_34_in_whileStatement1574_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1577  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1577_bits[]	= { ANTLR3_UINT64_LIT(0x2000124300000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1577	= { FOLLOW_EOL_in_whileStatement1577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1588  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1588_bits[]	= { ANTLR3_UINT64_LIT(0x2000124300000220) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1588	= { FOLLOW_statement_in_whileStatement1588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_whileStatement1606  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_whileStatement1606_bits[]	= { ANTLR3_UINT64_LIT(0x2000124300000220) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_whileStatement1606	= { FOLLOW_breakStatement_in_whileStatement1606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1619  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1619_bits[]	= { ANTLR3_UINT64_LIT(0x2000124300000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1619	= { FOLLOW_EOL_in_whileStatement1619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_whileStatement1632  */
static	ANTLR3_BITWORD FOLLOW_38_in_whileStatement1632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_whileStatement1632	= { FOLLOW_38_in_whileStatement1632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_breakStatement1653  */
static	ANTLR3_BITWORD FOLLOW_32_in_breakStatement1653_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_breakStatement1653	= { FOLLOW_32_in_breakStatement1653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_breakStatement1655  */
static	ANTLR3_BITWORD FOLLOW_59_in_breakStatement1655_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_breakStatement1655	= { FOLLOW_59_in_breakStatement1655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_breakStatement1657  */
static	ANTLR3_BITWORD FOLLOW_expression_in_breakStatement1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_breakStatement1657	= { FOLLOW_expression_in_breakStatement1657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_formatPart1679  */
static	ANTLR3_BITWORD FOLLOW_63_in_formatPart1679_bits[]	= { ANTLR3_UINT64_LIT(0x00400A0800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_formatPart1679	= { FOLLOW_63_in_formatPart1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatters_in_formatPart1681  */
static	ANTLR3_BITWORD FOLLOW_formatters_in_formatPart1681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_formatters_in_formatPart1681	= { FOLLOW_formatters_in_formatPart1681_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_formatPart1683  */
static	ANTLR3_BITWORD FOLLOW_64_in_formatPart1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_formatPart1683	= { FOLLOW_64_in_formatPart1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatter_in_formatters1706  */
static	ANTLR3_BITWORD FOLLOW_formatter_in_formatters1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatter_in_formatters1706	= { FOLLOW_formatter_in_formatters1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatter_in_formatters1717  */
static	ANTLR3_BITWORD FOLLOW_formatter_in_formatters1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_formatter_in_formatters1717	= { FOLLOW_formatter_in_formatters1717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatters1719  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatters1719_bits[]	= { ANTLR3_UINT64_LIT(0x00400A0800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatters1719	= { FOLLOW_22_in_formatters1719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatters_in_formatters1721  */
static	ANTLR3_BITWORD FOLLOW_formatters_in_formatters1721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatters_in_formatters1721	= { FOLLOW_formatters_in_formatters1721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatter1742  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatter1742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatter1742	= { FOLLOW_dataFormatter_in_formatter1742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatter1752  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatter1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatter1752	= { FOLLOW_domainFormatter_in_formatter1752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouper_in_formatter1761  */
static	ANTLR3_BITWORD FOLLOW_grouper_in_formatter1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouper_in_formatter1761	= { FOLLOW_grouper_in_formatter1761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_reintepreter_in_formatter1766  */
static	ANTLR3_BITWORD FOLLOW_reintepreter_in_formatter1766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_reintepreter_in_formatter1766	= { FOLLOW_reintepreter_in_formatter1766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_grouper1776  */
static	ANTLR3_BITWORD FOLLOW_43_in_grouper1776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_grouper1776	= { FOLLOW_43_in_grouper1776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_grouper1778  */
static	ANTLR3_BITWORD FOLLOW_14_in_grouper1778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_grouper1778	= { FOLLOW_14_in_grouper1778_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_idlist_in_grouper1780  */
static	ANTLR3_BITWORD FOLLOW_idlist_in_grouper1780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_idlist_in_grouper1780	= { FOLLOW_idlist_in_grouper1780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_grouper1781  */
static	ANTLR3_BITWORD FOLLOW_15_in_grouper1781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_grouper1781	= { FOLLOW_15_in_grouper1781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_reintepreter1792  */
static	ANTLR3_BITWORD FOLLOW_54_in_reintepreter1792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_reintepreter1792	= { FOLLOW_54_in_reintepreter1792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_idlist_in_reintepreter1794  */
static	ANTLR3_BITWORD FOLLOW_idlist_in_reintepreter1794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_idlist_in_reintepreter1794	= { FOLLOW_idlist_in_reintepreter1794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_reintepreter1796  */
static	ANTLR3_BITWORD FOLLOW_25_in_reintepreter1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_reintepreter1796	= { FOLLOW_25_in_reintepreter1796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reintepreter1798  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reintepreter1798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reintepreter1798	= { FOLLOW_ID_in_reintepreter1798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_reintepreter1800  */
static	ANTLR3_BITWORD FOLLOW_18_in_reintepreter1800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_reintepreter1800	= { FOLLOW_18_in_reintepreter1800_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter1802  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter1802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter1802	= { FOLLOW_STRING_in_reintepreter1802_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_reintepreter1804  */
static	ANTLR3_BITWORD FOLLOW_18_in_reintepreter1804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_reintepreter1804	= { FOLLOW_18_in_reintepreter1804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter1806  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter1806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter1806	= { FOLLOW_STRING_in_reintepreter1806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_reintepreter1808  */
static	ANTLR3_BITWORD FOLLOW_15_in_reintepreter1808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_reintepreter1808	= { FOLLOW_15_in_reintepreter1808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_reintepreter1813  */
static	ANTLR3_BITWORD FOLLOW_54_in_reintepreter1813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_reintepreter1813	= { FOLLOW_54_in_reintepreter1813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter1815  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter1815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter1815	= { FOLLOW_STRING_in_reintepreter1815_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_reintepreter1817  */
static	ANTLR3_BITWORD FOLLOW_15_in_reintepreter1817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_reintepreter1817	= { FOLLOW_15_in_reintepreter1817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_idlist1828  */
static	ANTLR3_BITWORD FOLLOW_ID_in_idlist1828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000202) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_idlist1828	= { FOLLOW_ID_in_idlist1828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_dataFormatter1851  */
static	ANTLR3_BITWORD FOLLOW_41_in_dataFormatter1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_dataFormatter1851	= { FOLLOW_41_in_dataFormatter1851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1853  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1853	= { FOLLOW_14_in_dataFormatter1853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter1855  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter1855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter1855	= { FOLLOW_ID_in_dataFormatter1855_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1857  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1857	= { FOLLOW_18_in_dataFormatter1857_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1859  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1859	= { FOLLOW_STRING_in_dataFormatter1859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1861  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1861_bits[]	= { ANTLR3_UINT64_LIT(0x0138818000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1861	= { FOLLOW_18_in_dataFormatter1861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_datatype_in_dataFormatter1865  */
static	ANTLR3_BITWORD FOLLOW_datatype_in_dataFormatter1865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_datatype_in_dataFormatter1865	= { FOLLOW_datatype_in_dataFormatter1865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1867  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1867	= { FOLLOW_15_in_dataFormatter1867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_dataFormatter1874  */
static	ANTLR3_BITWORD FOLLOW_41_in_dataFormatter1874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_dataFormatter1874	= { FOLLOW_41_in_dataFormatter1874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1876  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1876	= { FOLLOW_14_in_dataFormatter1876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter1878  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter1878	= { FOLLOW_ID_in_dataFormatter1878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter1880  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter1880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter1880	= { FOLLOW_18_in_dataFormatter1880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1882  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1882	= { FOLLOW_STRING_in_dataFormatter1882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1884  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1884	= { FOLLOW_15_in_dataFormatter1884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_dataFormatter1893  */
static	ANTLR3_BITWORD FOLLOW_41_in_dataFormatter1893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_dataFormatter1893	= { FOLLOW_41_in_dataFormatter1893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter1895  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter1895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter1895	= { FOLLOW_14_in_dataFormatter1895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter1897  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter1897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter1897	= { FOLLOW_STRING_in_dataFormatter1897_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter1899  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter1899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter1899	= { FOLLOW_15_in_dataFormatter1899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_datatype1922  */
static	ANTLR3_BITWORD FOLLOW_53_in_datatype1922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_datatype1922	= { FOLLOW_53_in_datatype1922_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_datatype1932  */
static	ANTLR3_BITWORD FOLLOW_52_in_datatype1932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_datatype1932	= { FOLLOW_52_in_datatype1932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_datatype1942  */
static	ANTLR3_BITWORD FOLLOW_47_in_datatype1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_datatype1942	= { FOLLOW_47_in_datatype1942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_datatype1952  */
static	ANTLR3_BITWORD FOLLOW_51_in_datatype1952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_datatype1952	= { FOLLOW_51_in_datatype1952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_datatype1962  */
static	ANTLR3_BITWORD FOLLOW_40_in_datatype1962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_datatype1962	= { FOLLOW_40_in_datatype1962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_datatype1997  */
static	ANTLR3_BITWORD FOLLOW_39_in_datatype1997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_datatype1997	= { FOLLOW_39_in_datatype1997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_datatype2034  */
static	ANTLR3_BITWORD FOLLOW_56_in_datatype2034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_datatype2034	= { FOLLOW_56_in_datatype2034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_domainFormatter2061  */
static	ANTLR3_BITWORD FOLLOW_35_in_domainFormatter2061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_domainFormatter2061	= { FOLLOW_35_in_domainFormatter2061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_domainFormatter2063  */
static	ANTLR3_BITWORD FOLLOW_25_in_domainFormatter2063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_domainFormatter2063	= { FOLLOW_25_in_domainFormatter2063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_domainFormatter2065  */
static	ANTLR3_BITWORD FOLLOW_ID_in_domainFormatter2065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_domainFormatter2065	= { FOLLOW_ID_in_domainFormatter2065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_domainFormatter2075  */
static	ANTLR3_BITWORD FOLLOW_35_in_domainFormatter2075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_domainFormatter2075	= { FOLLOW_35_in_domainFormatter2075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_domainFormatter2077  */
static	ANTLR3_BITWORD FOLLOW_25_in_domainFormatter2077_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_domainFormatter2077	= { FOLLOW_25_in_domainFormatter2077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_valrangePart_in_domainFormatter2079  */
static	ANTLR3_BITWORD FOLLOW_valrangePart_in_domainFormatter2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_valrangePart_in_domainFormatter2079	= { FOLLOW_valrangePart_in_domainFormatter2079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_valrangePart2099  */
static	ANTLR3_BITWORD FOLLOW_58_in_valrangePart2099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_valrangePart2099	= { FOLLOW_58_in_valrangePart2099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_valrangePart2101  */
static	ANTLR3_BITWORD FOLLOW_25_in_valrangePart2101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_valrangePart2101	= { FOLLOW_25_in_valrangePart2101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_ifStatement2123  */
static	ANTLR3_BITWORD FOLLOW_44_in_ifStatement2123_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_ifStatement2123	= { FOLLOW_44_in_ifStatement2123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement2125  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement2125_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement2125	= { FOLLOW_expression_in_ifStatement2125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2128  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2128_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2128	= { FOLLOW_EOL_in_ifStatement2128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_ifStatement2132  */
static	ANTLR3_BITWORD FOLLOW_57_in_ifStatement2132_bits[]	= { ANTLR3_UINT64_LIT(0x2000120200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_ifStatement2132	= { FOLLOW_57_in_ifStatement2132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2134  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2134_bits[]	= { ANTLR3_UINT64_LIT(0x2000120200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2134	= { FOLLOW_EOL_in_ifStatement2134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2140  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2140_bits[]	= { ANTLR3_UINT64_LIT(0x2000123200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2140	= { FOLLOW_statement_in_ifStatement2140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2144  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2144_bits[]	= { ANTLR3_UINT64_LIT(0x2000123200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2144	= { FOLLOW_EOL_in_ifStatement2144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_ifStatement2156  */
static	ANTLR3_BITWORD FOLLOW_36_in_ifStatement2156_bits[]	= { ANTLR3_UINT64_LIT(0x2000120200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_ifStatement2156	= { FOLLOW_36_in_ifStatement2156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2158  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2158_bits[]	= { ANTLR3_UINT64_LIT(0x2000120200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2158	= { FOLLOW_EOL_in_ifStatement2158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2164  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2164_bits[]	= { ANTLR3_UINT64_LIT(0x2000122200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2164	= { FOLLOW_statement_in_ifStatement2164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2169  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2169_bits[]	= { ANTLR3_UINT64_LIT(0x2000122200000220) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2169	= { FOLLOW_EOL_in_ifStatement2169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_ifStatement2181  */
static	ANTLR3_BITWORD FOLLOW_37_in_ifStatement2181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_ifStatement2181	= { FOLLOW_37_in_ifStatement2181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_returnStatement2201  */
static	ANTLR3_BITWORD FOLLOW_55_in_returnStatement2201_bits[]	= { ANTLR3_UINT64_LIT(0x00020000000A4F02) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_returnStatement2201	= { FOLLOW_55_in_returnStatement2201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2203  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2203	= { FOLLOW_expression_in_returnStatement2203_bits, 1	};



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    304:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );
 */
static const ANTLR3_INT32 dfa35_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_min[40] =
    {
	35, 14, 25, 14, 9, 9, 9, 9, 15, 9, 18, 15, 22, 25, 9, 22, 9, 11, 22, -1, 
	-1, 22, 22, 18, 15, 11, 39, 22, 18, 15, 15, 15, 15, 15, 15, 15, 11, 22, 
	15, 22
    };
static const ANTLR3_INT32 dfa35_max[40] =
    {
	54, 14, 25, 14, 11, 11, 58, 9, 15, 25, 18, 15, 64, 25, 15, 64, 9, 11, 64, 
	-1, -1, 64, 64, 18, 18, 11, 56, 64, 18, 15, 15, 15, 15, 15, 15, 15, 11, 
	64, 15, 64
    };
static const ANTLR3_INT32 dfa35_accept[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa35_special[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	9, -1, 8
    };

static const ANTLR3_INT32 dfa35_T1[] =
    {
	24
    };

static const ANTLR3_INT32 dfa35_T2[] =
    {
	34, 33, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 32, 30, 29, -1, -1, 35
    };

static const ANTLR3_INT32 dfa35_T3[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13
    };

static const ANTLR3_INT32 dfa35_T4[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 19
    };

static const ANTLR3_INT32 dfa35_T5[] =
    {
	15
    };

static const ANTLR3_INT32 dfa35_T6[] =
    {
	27, -1, -1, 26
    };

static const ANTLR3_INT32 dfa35_T7[] =
    {
	7
    };

static const ANTLR3_INT32 dfa35_T8[] =
    {
	37
    };

static const ANTLR3_INT32 dfa35_T9[] =
    {
	5
    };

static const ANTLR3_INT32 dfa35_T10[] =
    {
	10, -1, 11
    };

static const ANTLR3_INT32 dfa35_T11[] =
    {
	6
    };

static const ANTLR3_INT32 dfa35_T12[] =
    {
	23
    };

static const ANTLR3_INT32 dfa35_T13[] =
    {
	18
    };

static const ANTLR3_INT32 dfa35_T14[] =
    {
	14
    };

static const ANTLR3_INT32 dfa35_T15[] =
    {
	14, -1, -1, -1, -1, -1, 22
    };

static const ANTLR3_INT32 dfa35_T16[] =
    {
	21
    };

static const ANTLR3_INT32 dfa35_T17[] =
    {
	25
    };

static const ANTLR3_INT32 dfa35_T18[] =
    {
	28
    };

static const ANTLR3_INT32 dfa35_T19[] =
    {
	2, -1, -1, -1, -1, -1, 1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR3_INT32 dfa35_T20[] =
    {
	36
    };

static const ANTLR3_INT32 dfa35_T21[] =
    {
	38
    };

static const ANTLR3_INT32 dfa35_T22[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16
    };

static const ANTLR3_INT32 dfa35_T23[] =
    {
	17
    };

static const ANTLR3_INT32 dfa35_T24[] =
    {
	39
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T19, dfa35_T9, dfa35_T11, dfa35_T7, dfa35_T0, dfa35_T10, dfa35_T3, 
    dfa35_T14, dfa35_T5, dfa35_T22, dfa35_T23, dfa35_T13, dfa35_T4, dfa35_T16, 
    dfa35_T15, dfa35_T4, dfa35_T12, dfa35_T1, dfa35_T4, NULL, NULL, dfa35_T4, 
    dfa35_T4, dfa35_T17, dfa35_T6, dfa35_T18, dfa35_T2, dfa35_T4, dfa35_T20, 
    dfa35_T8, dfa35_T8, dfa35_T8, dfa35_T8, dfa35_T8, dfa35_T8, dfa35_T8, 
    dfa35_T21, dfa35_T4, dfa35_T24, dfa35_T4
};


/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"304:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 35
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start script
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:49:1: script returns [ ASTNode *node] : ( scriptLine )+ ;
 */
static ASTNode *
script(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * scriptLine1;
    #undef	RETURN_TYPE_scriptLine1
    #define	RETURN_TYPE_scriptLine1 ASTNode *

    /* Initialize rule variables
     */


    	node = new ScriptNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:53:2: ( ( scriptLine )+ )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:53:4: ( scriptLine )+
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:53:4: ( scriptLine )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case EOL:
            	case ID:
            	case 33:
            	case 41:
            	case 44:
            	case 61:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:53:6: scriptLine
            	        {
            	            FOLLOWPUSH(FOLLOW_scriptLine_in_script42);
            	            scriptLine1=scriptLine(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulescriptEx;
            	            }


            	            {
            	                node->addChild(scriptLine1
            	                ); 
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulescriptEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulescriptEx; /* Prevent compiler warnings */
    rulescriptEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end script */

/**
 * $ANTLR start scriptLine
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:56:1: scriptLine returns [ ASTNode *node] : ( statement ';' | EOL );
 */
static ASTNode *
scriptLine(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * statement2;
    #undef	RETURN_TYPE_statement2
    #define	RETURN_TYPE_statement2 ASTNode *

    /* Initialize rule variables
     */


    	node =  new ScriptLineNode();

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:60:2: ( statement ';' | EOL )

            ANTLR3_UINT32 alt2;

            alt2=2;

            switch ( LA(1) )
            {
            case ID:
            case 33:
            case 41:
            case 44:
            case 61:
            	{
            		alt2=1;
            	}
                break;
            case EOL:
            	{
            		alt2=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulescriptLineEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:60:4: statement ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_scriptLine70);
        	        statement2=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(statement2
        	            ); 
        	        }


        	         MATCHT(22, &FOLLOW_22_in_scriptLine79);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:61:5: EOL
        	    {
        	         MATCHT(EOL, &FOLLOW_EOL_in_scriptLine85);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulescriptLineEx; /* Prevent compiler warnings */
    rulescriptLineEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end scriptLine */

/**
 * $ANTLR start statement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:64:1: statement returns [ ASTNode *node] : ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement );
 */
static ASTNode *
statement(pilwisscriptParser ctx)
{
    ASTNode * node;


    AssignmentNode * assignmentStatement3;
    #undef	RETURN_TYPE_assignmentStatement3
    #define	RETURN_TYPE_assignmentStatement3 AssignmentNode *

    Ifnode * ifStatement4;
    #undef	RETURN_TYPE_ifStatement4
    #define	RETURN_TYPE_ifStatement4 Ifnode *

    WhileNode * whileStatement5;
    #undef	RETURN_TYPE_whileStatement5
    #define	RETURN_TYPE_whileStatement5 WhileNode *

    FunctionStatementNode * functionStatement6;
    #undef	RETURN_TYPE_functionStatement6
    #define	RETURN_TYPE_functionStatement6 FunctionStatementNode *

    CommandNode * commandStatement7;
    #undef	RETURN_TYPE_commandStatement7
    #define	RETURN_TYPE_commandStatement7 CommandNode *

    Formatter * dataFormatter8;
    #undef	RETURN_TYPE_dataFormatter8
    #define	RETURN_TYPE_dataFormatter8 Formatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:65:2: ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement )

            ANTLR3_UINT32 alt3;

            alt3=7;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 18:
            		case 25:
            		case 29:
            		case 63:
            			{
            				alt3=1;
            			}
            		    break;
            		case 14:
            			{
            				alt3=4;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case 20:
            		case 22:
            		case 32:
            		case 33:
            		case 36:
            		case 37:
            		case 38:
            		case 41:
            		case 44:
            		case 61:
            			{
            				alt3=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 3;
            		    EXCEPTION->state        = 1;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case 44:
            	{
            		alt3=2;
            	}
                break;
            case 61:
            	{
            		alt3=3;
            	}
                break;
            case 41:
            	{
            		alt3=6;
            	}
                break;
            case 33:
            	{
            		alt3=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:65:4: assignmentStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentStatement_in_statement101);
        	        assignmentStatement3=assignmentStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = assignmentStatement3
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:66:4: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement111);
        	        ifStatement4=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = ifStatement4
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:67:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_statement122);
        	        whileStatement5=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = whileStatement5
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:68:4: functionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_functionStatement_in_statement133);
        	        functionStatement6=functionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = functionStatement6
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:69:4: commandStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_commandStatement_in_statement143);
        	        commandStatement7=commandStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = commandStatement7
        	            ; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:70:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_statement153);
        	        dataFormatter8=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = dataFormatter8
        	            ; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:71:4: defineStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_defineStatement_in_statement164);
        	        defineStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end statement */

/**
 * $ANTLR start selectExpr
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:74:1: selectExpr returns [SelectNode *node] : 'indexes' 'from' sources 'where' expr= expression ;
 */
static SelectNode *
selectExpr(pilwisscriptParser ctx)
{
    SelectNode * node;


    ExpressionNode * expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr ExpressionNode *

    QString sources9;
    #undef	RETURN_TYPE_sources9
    #define	RETURN_TYPE_sources9 QString

    /* Initialize rule variables
     */


      node = new SelectNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:78:2: ( 'indexes' 'from' sources 'where' expr= expression )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:78:9: 'indexes' 'from' sources 'where' expr= expression
        {
             MATCHT(45, &FOLLOW_45_in_selectExpr191);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


             MATCHT(42, &FOLLOW_42_in_selectExpr193);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            FOLLOWPUSH(FOLLOW_sources_in_selectExpr195);
            sources9=sources(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


             MATCHT(60, &FOLLOW_60_in_selectExpr197);
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_selectExpr201);
            expr=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselectExprEx;
            }


            {
                  node->setInput(sources9
                );
                								 node->setExpression(expr
                );
                									    
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselectExprEx; /* Prevent compiler warnings */
    ruleselectExprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end selectExpr */

/**
 * $ANTLR start sources
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:83:1: sources returns [ QString source] : ( STRING | ID );
 */
static QString
sources(pilwisscriptParser ctx)
{
    QString source;


    pANTLR3_COMMON_TOKEN    STRING10;
    pANTLR3_COMMON_TOKEN    ID11;

    /* Initialize rule variables
     */

    STRING10       = NULL;
    ID11       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:84:2: ( STRING | ID )

            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) )
            {
            case STRING:
            	{
            		alt4=1;
            	}
                break;
            case ID:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulesourcesEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:84:4: STRING
        	    {
        	        STRING10 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_sources218);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourcesEx;
        	        }


        	        {
        	             source = "url|" + QString((char *)((STRING10->getText(STRING10))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:85:4: ID
        	    {
        	        ID11 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_sources229);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourcesEx;
        	        }


        	        {
        	             source = "id|" + QString((char *)((ID11->getText(ID11))->chars));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesourcesEx; /* Prevent compiler warnings */
    rulesourcesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return source;
}
/* $ANTLR end sources */

/**
 * $ANTLR start defineStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:88:1: defineStatement : 'define' ID '=' STRING ;
 */
static void
defineStatement(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:89:2: ( 'define' ID '=' STRING )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:89:4: 'define' ID '=' STRING
        {
             MATCHT(33, &FOLLOW_33_in_defineStatement247);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(ID, &FOLLOW_ID_in_defineStatement249);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(25, &FOLLOW_25_in_defineStatement251);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(STRING, &FOLLOW_STRING_in_defineStatement253);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledefineStatementEx; /* Prevent compiler warnings */
    ruledefineStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end defineStatement */

/**
 * $ANTLR start assignmentStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:93:1: assignmentStatement returns [ AssignmentNode *node] : ( outParameters '=' expression |id1= ID '=' selectExpr );
 */
static AssignmentNode *
assignmentStatement(pilwisscriptParser ctx)
{
    AssignmentNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    OutParametersNode * outParameters12;
    #undef	RETURN_TYPE_outParameters12
    #define	RETURN_TYPE_outParameters12 OutParametersNode *

    ExpressionNode * expression13;
    #undef	RETURN_TYPE_expression13
    #define	RETURN_TYPE_expression13 ExpressionNode *

    SelectNode * selectExpr14;
    #undef	RETURN_TYPE_selectExpr14
    #define	RETURN_TYPE_selectExpr14 SelectNode *

    /* Initialize rule variables
     */


    	node= new AssignmentNode();

    id1       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:97:2: ( outParameters '=' expression |id1= ID '=' selectExpr )

            ANTLR3_UINT32 alt5;

            alt5=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 25:
            			{
            				switch ( LA(3) )
            				{
            				case 45:
            					{
            						alt5=2;
            					}
            				    break;
            				case FLOAT:
            				case ID:
            				case INT:
            				case STRING:
            				case 14:
            				case 17:
            				case 19:
            				case 49:
            					{
            						alt5=1;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 2;


            				    goto ruleassignmentStatementEx;

            				}

            			}
            		    break;
            		case 18:
            		case 29:
            		case 63:
            			{
            				alt5=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 1;


            		    goto ruleassignmentStatementEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruleassignmentStatementEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:97:4: outParameters '=' expression
        	    {
        	        FOLLOWPUSH(FOLLOW_outParameters_in_assignmentStatement274);
        	        outParameters12=outParameters(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->addOutputs(outParameters12
        	            ); 
        	        }


        	         MATCHT(25, &FOLLOW_25_in_assignmentStatement284);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setDefintion(true); 
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_assignmentStatement295);
        	        expression13=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setExpression(expression13
        	            );
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:100:17: id1= ID '=' selectExpr
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_assignmentStatement322);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	         MATCHT(25, &FOLLOW_25_in_assignmentStatement324);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setOutId(new IDNode((char *)((id1->getText(id1))->chars)));
        	        }


        	        FOLLOWPUSH(FOLLOW_selectExpr_in_assignmentStatement349);
        	        selectExpr14=selectExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentStatementEx;
        	        }


        	        {
        	             node->setExpression(selectExpr14
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleassignmentStatementEx; /* Prevent compiler warnings */
    ruleassignmentStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end assignmentStatement */

/**
 * $ANTLR start outParameters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:104:1: outParameters returns [ OutParametersNode *node] : id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* ;
 */
static OutParametersNode *
outParameters(pilwisscriptParser ctx)
{
    OutParametersNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    Selector * sel1;
    #undef	RETURN_TYPE_sel1
    #define	RETURN_TYPE_sel1 Selector *

    ASTNode * for1;
    #undef	RETURN_TYPE_for1
    #define	RETURN_TYPE_for1 ASTNode *

    Selector * sel2;
    #undef	RETURN_TYPE_sel2
    #define	RETURN_TYPE_sel2 Selector *

    ASTNode * for2;
    #undef	RETURN_TYPE_for2
    #define	RETURN_TYPE_for2 ASTNode *

    /* Initialize rule variables
     */


    	node= new OutParametersNode();

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:108:2: (id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:108:4: id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters377);
            if  (HASEXCEPTION())
            {
                goto ruleoutParametersEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:108:11: (sel1= selector )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case 29:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:108:12: sel1= selector
            	    {
            	        FOLLOWPUSH(FOLLOW_selector_in_outParameters382);
            	        sel1=selector(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        {
            	             node->addSelector((char *)((id1->getText(id1))->chars),
            	            sel1
            	            );
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->addResult(new IDNode((char *)((id1->getText(id1))->chars))); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:110:3: (for1= formatPart )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case 63:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:110:4: for1= formatPart
            	    {
            	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters415);
            	        for1=formatPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        {
            	             node->addSpecifier((char *)((id1->getText(id1))->chars), 
            	            for1
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:111:2: ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:111:3: ',' id2= ID (sel2= selector )? (for2= formatPart )?
            	    {
            	         MATCHT(18, &FOLLOW_18_in_outParameters428);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters432);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:111:14: (sel2= selector )?
            	        {
            	            int alt8=2;
            	            switch ( LA(1) )
            	            {
            	                case 29:
            	                	{
            	                		alt8=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt8)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:111:15: sel2= selector
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters437);
            	        	        sel2=selector(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoutParametersEx;
            	        	        }


            	        	        {
            	        	             node->addSelector((char *)((id2->getText(id2))->chars), 
            	        	            sel2
            	        	            );
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addResult(new IDNode((char *)((id2->getText(id2))->chars))); 
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:113:3: (for2= formatPart )?
            	        {
            	            int alt9=2;
            	            switch ( LA(1) )
            	            {
            	                case 63:
            	                	{
            	                		alt9=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:113:4: for2= formatPart
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters469);
            	        	        for2=formatPart(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoutParametersEx;
            	        	        }


            	        	        {
            	        	             node->addSpecifier((char *)((id2->getText(id2))->chars), 
            	        	            for2
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoutParametersEx; /* Prevent compiler warnings */
    ruleoutParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end outParameters */

/**
 * $ANTLR start actualParameters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:117:1: actualParameters returns [ ParametersNode *node] : expr1= expression ( ',' expr2= expression )* ;
 */
static ParametersNode *
actualParameters(pilwisscriptParser ctx)
{
    ParametersNode * node;


    ExpressionNode * expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 ExpressionNode *

    ExpressionNode * expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ParametersNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:121:2: (expr1= expression ( ',' expr2= expression )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:121:4: expr1= expression ( ',' expr2= expression )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_actualParameters510);
            expr1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParametersEx;
            }


            {
                 node->addChild(expr1
                ); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:122:3: ( ',' expr2= expression )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:123:3: ',' expr2= expression
            	    {
            	         MATCHT(18, &FOLLOW_18_in_actualParameters524);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_actualParameters533);
            	        expr2=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        {
            	             node->addChild(expr2
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleactualParametersEx; /* Prevent compiler warnings */
    ruleactualParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end actualParameters */

/**
 * $ANTLR start term
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:128:1: term returns [ TermNode *node] : ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters ) ')' |id4= ID '(' ')' |id2= ID (id3= selector )+ |id2= ID );
 */
static TermNode *
term(pilwisscriptParser ctx)
{
    TermNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    INT16;
    pANTLR3_COMMON_TOKEN    FLOAT17;
    pANTLR3_COMMON_TOKEN    STRING18;
    Selector * id3;
    #undef	RETURN_TYPE_id3
    #define	RETURN_TYPE_id3 Selector *

    ExpressionNode * expression15;
    #undef	RETURN_TYPE_expression15
    #define	RETURN_TYPE_expression15 ExpressionNode *

    ParametersNode * actualParameters19;
    #undef	RETURN_TYPE_actualParameters19
    #define	RETURN_TYPE_actualParameters19 ParametersNode *

    /* Initialize rule variables
     */


    	node = new TermNode();

    id1       = NULL;
    id4       = NULL;
    id2       = NULL;
    INT16       = NULL;
    FLOAT17       = NULL;
    STRING18       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:132:2: ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters ) ')' |id4= ID '(' ')' |id2= ID (id3= selector )+ |id2= ID )

            ANTLR3_UINT32 alt13;

            alt13=8;

            switch ( LA(1) )
            {
            case 14:
            	{
            		alt13=1;
            	}
                break;
            case INT:
            	{
            		alt13=2;
            	}
                break;
            case FLOAT:
            	{
            		alt13=3;
            	}
                break;
            case STRING:
            	{
            		alt13=4;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case FLOAT:
            				case ID:
            				case INT:
            				case STRING:
            				case 14:
            				case 17:
            				case 19:
            				case 49:
            					{
            						alt13=5;
            					}
            				    break;
            				case 15:
            					{
            						alt13=6;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 13;
            				    EXCEPTION->state        = 6;


            				    goto ruletermEx;

            				}

            			}
            		    break;
            		case 29:
            			{
            				alt13=7;
            			}
            		    break;
            		case EOF:
            		case EOL:
            		case ID:
            		case 13:
            		case 15:
            		case 16:
            		case 17:
            		case 18:
            		case 19:
            		case 20:
            		case 21:
            		case 22:
            		case 23:
            		case 24:
            		case 26:
            		case 27:
            		case 28:
            		case 31:
            		case 32:
            		case 33:
            		case 34:
            		case 36:
            		case 37:
            		case 38:
            		case 41:
            		case 44:
            		case 48:
            		case 50:
            		case 57:
            		case 61:
            		case 62:
            			{
            				alt13=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 13;
            		    EXCEPTION->state        = 5;


            		    goto ruletermEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:132:4: '(' expression ')'
        	    {
        	         MATCHT(14, &FOLLOW_14_in_term563);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_term565);
        	        expression15=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term567);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setExpression(expression15
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:133:4: INT
        	    {
        	        INT16 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_term578);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((INT16->getText(INT16))->chars)); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:134:4: FLOAT
        	    {
        	        FLOAT17 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_term590);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((FLOAT17->getText(FLOAT17))->chars)); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:135:4: STRING
        	    {
        	        STRING18 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_term602);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setString((char *)((STRING18->getText(STRING18))->chars)); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:136:4: id1= ID '(' ( actualParameters ) ')'
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term618);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term620);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id1->getText(id1))->chars))); 
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:137:3: ( actualParameters )
        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:137:4: actualParameters
        	        {
        	            FOLLOWPUSH(FOLLOW_actualParameters_in_term632);
        	            actualParameters19=actualParameters(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruletermEx;
        	            }


        	            {
        	                 node->setParameters(actualParameters19
        	                ); 
        	            }


        	        }


        	         MATCHT(15, &FOLLOW_15_in_term643);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:139:4: id4= ID '(' ')'
        	    {
        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term652);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term654);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id4->getText(id4))->chars))); 
        	        }


        	        {
        	             node->setParameters(); 
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term676);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:142:4: id2= ID (id3= selector )+
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term694);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:143:3: (id3= selector )+
        	        {
        	            int cnt12=0;

        	            for (;;)
        	            {
        	                int alt12=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case 29:
        	        		{
        	        			alt12=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt12)
        	        	{
        	        	    case 1:
        	        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:143:4: id3= selector
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_selector_in_term708);
        	        	            id3=selector(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruletermEx;
        	        	            }


        	        	            {
        	        	                node->addSelector(id3
        	        	                );
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt12 >= 1 )
        	        		{
        	        		    goto loop12;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruletermEx;
        	        	}
        	        	cnt12++;
        	            }
        	            loop12: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 8:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:144:4: id2= ID
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term725);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end term */

/**
 * $ANTLR start selector
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:147:1: selector returns [ Selector *node] : ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' );
 */
static Selector *
selector(pilwisscriptParser ctx)
{
    Selector * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    id3;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    id5;
    pANTLR3_COMMON_TOKEN    INT20;

    /* Initialize rule variables
     */


    	node = new Selector("selector");

    id1       = NULL;
    id2       = NULL;
    id3       = NULL;
    id4       = NULL;
    id5       = NULL;
    INT20       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:151:2: ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' )

            ANTLR3_UINT32 alt17;

            alt17=6;

            switch ( LA(1) )
            {
            case 29:
            	{
            		switch ( LA(2) )
            		{
            		case INT:
            			{
            				switch ( LA(3) )
            				{
            				case INT:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								alt17=1;
            							}
            						    break;
            						case 30:
            							{
            								alt17=5;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 17;
            						    EXCEPTION->state        = 4;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 30:
            					{
            						alt17=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 17;
            				    EXCEPTION->state        = 2;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;
            		case ID:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case INT:
            									{
            										alt17=6;
            									}
            								    break;
            								case 46:
            									{
            										alt17=4;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 17;
            								    EXCEPTION->state        = 10;


            								    goto ruleselectorEx;

            								}

            							}
            						    break;
            						case 30:
            							{
            								alt17=4;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 17;
            						    EXCEPTION->state        = 6;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 18:
            				case 30:
            					{
            						alt17=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 17;
            				    EXCEPTION->state        = 3;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 1;


            		    goto ruleselectorEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto ruleselectorEx;

            }

            switch (alt17)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:151:4: '[' id1= INT id2= INT ',' id3= INT id4= INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector751);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector755);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector759);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector761);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector765);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector769);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector771);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("box"); node->setBounds((char *)((id1->getText(id1))->chars),
        	            									(char *)((id2->getText(id2))->chars),
        	            									(char *)((id3->getText(id3))->chars),
        	            									(char *)((id4->getText(id4))->chars)); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:155:4: '[' id1= ID ( ',' 'key=' id2= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector779);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector783);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:155:15: ( ',' 'key=' id2= ID )?
        	        {
        	            int alt14=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt14=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt14)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:155:16: ',' 'key=' id2= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector786);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(46, &FOLLOW_46_in_selector788);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector792);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector797);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("var"); 
        	            								node->setVariable((char *)((id1->getText(id1))->chars));
        	            								if ( id2 != 0) node->keyColumns((char *)(id2->getText(id2))->chars);
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:158:4: '[' INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector806);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        INT20 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector808);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector810);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("index"); node->setVariable((char *)((INT20->getText(INT20))->chars));
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:159:4: '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector822);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector826);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector831);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:159:23: ( ',' 'key=' id3= ID )?
        	        {
        	            int alt15=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt15=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt15)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:159:24: ',' 'key=' id3= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector834);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(46, &FOLLOW_46_in_selector835);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector839);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector843);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								if ( id3 != 0) node->keyColumns((char *)(id3->getText(id3))->chars);
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:163:4: '[' id1= INT id2= INT ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector852);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector856);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector861);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(30, &FOLLOW_30_in_selector863);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("recordrange"); 
        	            								node->beginRec((char *)(id1->getText(id1))->chars); 
        	            								node->endRec((char *)(id2->getText(id2))->chars); 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:166:4: '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']'
        	    {
        	         MATCHT(29, &FOLLOW_29_in_selector873);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector877);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector881);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector883);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector887);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector891);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:166:42: ( ',' 'key=' id5= ID )?
        	        {
        	            int alt16=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt16=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt16)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:166:43: ',' 'key=' id5= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector894);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(46, &FOLLOW_46_in_selector896);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id5 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector900);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(30, &FOLLOW_30_in_selector905);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrecordrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								node->beginRec((char *)(id3->getText(id3))->chars); 
        	            								node->endRec((char *)(id4->getText(id4))->chars);
        	            								if ( id5 != 0) node->keyColumns((char *)(id5->getText(id5))->chars);
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleselectorEx; /* Prevent compiler warnings */
    ruleselectorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end selector */

/**
 * $ANTLR start negation
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:174:1: negation returns [ TermNode *node] : ( 'not' )* term ;
 */
static TermNode *
negation(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * term21;
    #undef	RETURN_TYPE_term21
    #define	RETURN_TYPE_term21 TermNode *

    /* Initialize rule variables
     */


    	bool negated = false;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:178:2: ( ( 'not' )* term )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:178:4: ( 'not' )* term
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:178:4: ( 'not' )*

            for (;;)
            {
                int alt18=2;
                switch ( LA(1) )
                {
                case 49:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:178:5: 'not'
            	    {
            	         MATCHT(49, &FOLLOW_49_in_negation930);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenegationEx;
            	        }


            	        {
            	             negated = !negated; 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


            FOLLOWPUSH(FOLLOW_term_in_negation946);
            term21=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenegationEx;
            }


            {
                 term21
                ->setLogicalNegation(negated); node = term21
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenegationEx; /* Prevent compiler warnings */
    rulenegationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end negation */

/**
 * $ANTLR start unary
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:183:1: unary returns [ TermNode *node] : ( '+' | '-' )? negation ;
 */
static TermNode *
unary(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * negation22;
    #undef	RETURN_TYPE_negation22
    #define	RETURN_TYPE_negation22 TermNode *

    /* Initialize rule variables
     */


    	bool isnegated = false;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:188:2: ( ( '+' | '-' )? negation )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:188:4: ( '+' | '-' )? negation
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:188:4: ( '+' | '-' )?
            {
                int alt19=3;
                switch ( LA(1) )
                {
                    case 17:
                    	{
                    		alt19=1;
                    	}
                        break;
                    case 19:
                    	{
                    		alt19=2;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:188:5: '+'
            	    {
            	         MATCHT(17, &FOLLOW_17_in_unary974);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:189:5: '-'
            	    {
            	         MATCHT(19, &FOLLOW_19_in_unary986);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	        {
            	             isnegated = !isnegated; 
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_negation_in_unary1002);
            negation22=negation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunaryEx;
            }


            {
                 negation22
                ->setNumericalNegation(isnegated); node = negation22
                ; 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunaryEx; /* Prevent compiler warnings */
    ruleunaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end unary */

/**
 * $ANTLR start mult
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:193:1: mult returns [ MultiplicationNode *node] : un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* ;
 */
static MultiplicationNode *
mult(pilwisscriptParser ctx)
{
    MultiplicationNode * node;


    TermNode * un1;
    #undef	RETURN_TYPE_un1
    #define	RETURN_TYPE_un1 TermNode *

    TermNode * un2;
    #undef	RETURN_TYPE_un2
    #define	RETURN_TYPE_un2 TermNode *

    /* Initialize rule variables
     */


    	node = new MultiplicationNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:198:2: (un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:198:4: un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )*
        {
            FOLLOWPUSH(FOLLOW_unary_in_mult1028);
            un1=unary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultEx;
            }


            {
                 node->setLeftTerm(un1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:199:3: ( ( '*' | '/' | 'mod' ) un2= unary )*

            for (;;)
            {
                int alt21=2;
                switch ( LA(1) )
                {
                case 16:
                case 21:
                case 48:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:200:3: ( '*' | '/' | 'mod' ) un2= unary
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:200:3: ( '*' | '/' | 'mod' )
            	        {
            	            int alt20=3;
            	            switch ( LA(1) )
            	            {
            	            case 16:
            	            	{
            	            		alt20=1;
            	            	}
            	                break;
            	            case 21:
            	            	{
            	            		alt20=2;
            	            	}
            	                break;
            	            case 48:
            	            	{
            	            		alt20=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 20;
            	                EXCEPTION->state        = 0;


            	                goto rulemultEx;

            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:200:4: '*'
            	        	    {
            	        	         MATCHT(16, &FOLLOW_16_in_mult1043);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oTIMES; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:201:5: '/'
            	        	    {
            	        	         MATCHT(21, &FOLLOW_21_in_mult1056);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oDIVIDED; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:202:5: 'mod'
            	        	    {
            	        	         MATCHT(48, &FOLLOW_48_in_mult1068);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oMOD; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_in_mult1085);
            	        un2=unary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultEx;
            	        }


            	        {
            	             node->addRightTerm(op, un2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemultEx; /* Prevent compiler warnings */
    rulemultEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end mult */

/**
 * $ANTLR start add
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:208:1: add returns [ AddNode *node] : mul1= mult ( ( '+' | '-' ) mul2= mult )* ;
 */
static AddNode *
add(pilwisscriptParser ctx)
{
    AddNode * node;


    MultiplicationNode * mul1;
    #undef	RETURN_TYPE_mul1
    #define	RETURN_TYPE_mul1 MultiplicationNode *

    MultiplicationNode * mul2;
    #undef	RETURN_TYPE_mul2
    #define	RETURN_TYPE_mul2 MultiplicationNode *

    /* Initialize rule variables
     */


    	node = new AddNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:213:2: (mul1= mult ( ( '+' | '-' ) mul2= mult )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:213:4: mul1= mult ( ( '+' | '-' ) mul2= mult )*
        {
            FOLLOWPUSH(FOLLOW_mult_in_add1120);
            mul1=mult(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaddEx;
            }


            {
                 node->setLeftTerm(mul1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:214:3: ( ( '+' | '-' ) mul2= mult )*

            for (;;)
            {
                int alt23=2;
                switch ( LA(1) )
                {
                case 17:
                case 19:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:215:3: ( '+' | '-' ) mul2= mult
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:215:3: ( '+' | '-' )
            	        {
            	            int alt22=2;
            	            switch ( LA(1) )
            	            {
            	            case 17:
            	            	{
            	            		alt22=1;
            	            	}
            	                break;
            	            case 19:
            	            	{
            	            		alt22=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 22;
            	                EXCEPTION->state        = 0;


            	                goto ruleaddEx;

            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:215:4: '+'
            	        	    {
            	        	         MATCHT(17, &FOLLOW_17_in_add1135);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oADD; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:217:3: '-'
            	        	    {
            	        	         MATCHT(19, &FOLLOW_19_in_add1151);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oSUBSTRACT; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_mult_in_add1171);
            	        mul2=mult(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaddEx;
            	        }


            	        {
            	             node->addRightTerm(op, mul2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleaddEx; /* Prevent compiler warnings */
    ruleaddEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end add */

/**
 * $ANTLR start relation
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:223:1: relation returns [ RelationNode *node] : add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* ;
 */
static RelationNode *
relation(pilwisscriptParser ctx)
{
    RelationNode * node;


    AddNode * add1;
    #undef	RETURN_TYPE_add1
    #define	RETURN_TYPE_add1 AddNode *

    AddNode * add2;
    #undef	RETURN_TYPE_add2
    #define	RETURN_TYPE_add2 AddNode *

    /* Initialize rule variables
     */


    	node = new RelationNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:228:2: (add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:228:4: add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*
        {
            FOLLOWPUSH(FOLLOW_add_in_relation1204);
            add1=add(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }


            {
                 node->setLeftTerm(add1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:229:3: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*

            for (;;)
            {
                int alt25=2;
                switch ( LA(1) )
                {
                case 13:
                case 23:
                case 24:
                case 26:
                case 27:
                case 28:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:230:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:230:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' )
            	        {
            	            int alt24=6;
            	            switch ( LA(1) )
            	            {
            	            case 26:
            	            	{
            	            		alt24=1;
            	            	}
            	                break;
            	            case 13:
            	            	{
            	            		alt24=2;
            	            	}
            	                break;
            	            case 23:
            	            	{
            	            		alt24=3;
            	            	}
            	                break;
            	            case 24:
            	            	{
            	            		alt24=4;
            	            	}
            	                break;
            	            case 28:
            	            	{
            	            		alt24=5;
            	            	}
            	                break;
            	            case 27:
            	            	{
            	            		alt24=6;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 24;
            	                EXCEPTION->state        = 0;


            	                goto rulerelationEx;

            	            }

            	            switch (alt24)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:231:3: '=='
            	        	    {
            	        	         MATCHT(26, &FOLLOW_26_in_relation1222);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:232:5: '!='
            	        	    {
            	        	         MATCHT(13, &FOLLOW_13_in_relation1236);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oNEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:233:5: '<'
            	        	    {
            	        	         MATCHT(23, &FOLLOW_23_in_relation1250);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oLESS; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:234:5: '<='
            	        	    {
            	        	         MATCHT(24, &FOLLOW_24_in_relation1264);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oLESSEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:235:5: '>='
            	        	    {
            	        	         MATCHT(28, &FOLLOW_28_in_relation1278);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oGREATEREQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:236:5: '>'
            	        	    {
            	        	         MATCHT(27, &FOLLOW_27_in_relation1292);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oGREATER; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_add_in_relation1310);
            	        add2=add(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }


            	        {
            	             node->addRightTerm(op, add2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end relation */

/**
 * $ANTLR start expression
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:242:1: expression returns [ ExpressionNode *node] : rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* ;
 */
static ExpressionNode *
expression(pilwisscriptParser ctx)
{
    ExpressionNode * node;


    RelationNode * rel1;
    #undef	RETURN_TYPE_rel1
    #define	RETURN_TYPE_rel1 RelationNode *

    RelationNode * rel2;
    #undef	RETURN_TYPE_rel2
    #define	RETURN_TYPE_rel2 RelationNode *

    /* Initialize rule variables
     */


    	node = new ExpressionNode();
    	OperationNodeScript::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:247:2: (rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:247:4: rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )*
        {
            FOLLOWPUSH(FOLLOW_relation_in_expression1344);
            rel1=relation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }


            {
                 node->setLeftTerm(rel1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:248:3: ( ( 'and' | 'or' | 'xor' ) rel2= relation )*

            for (;;)
            {
                int alt27=2;
                switch ( LA(1) )
                {
                case 31:
                case 50:
                case 62:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:249:3: ( 'and' | 'or' | 'xor' ) rel2= relation
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:249:3: ( 'and' | 'or' | 'xor' )
            	        {
            	            int alt26=3;
            	            switch ( LA(1) )
            	            {
            	            case 31:
            	            	{
            	            		alt26=1;
            	            	}
            	                break;
            	            case 50:
            	            	{
            	            		alt26=2;
            	            	}
            	                break;
            	            case 62:
            	            	{
            	            		alt26=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 26;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpressionEx;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:249:5: 'and'
            	        	    {
            	        	         MATCHT(31, &FOLLOW_31_in_expression1364);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oAND; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:250:5: 'or'
            	        	    {
            	        	         MATCHT(50, &FOLLOW_50_in_expression1378);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oOR; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:251:5: 'xor'
            	        	    {
            	        	         MATCHT(62, &FOLLOW_62_in_expression1392);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNodeScript::oXOR; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_relation_in_expression1409);
            	        rel2=relation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	        {
            	             node->addRightTerm(op, rel2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end expression */

/**
 * $ANTLR start commandStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:256:1: commandStatement returns [ CommandNode *node] : id1= ID ( '--' id2= ID ( '=' expression )? )* ;
 */
static CommandNode *
commandStatement(pilwisscriptParser ctx)
{
    CommandNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    ExpressionNode * expression23;
    #undef	RETURN_TYPE_expression23
    #define	RETURN_TYPE_expression23 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new CommandNode();
    	QString flag;
    	ExpressionNode *expr;

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:262:2: (id1= ID ( '--' id2= ID ( '=' expression )? )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:263:2: id1= ID ( '--' id2= ID ( '=' expression )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1446);
            if  (HASEXCEPTION())
            {
                goto rulecommandStatementEx;
            }


            {
                 node->setCommand((char *)((id1->getText(id1))->chars)); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:264:2: ( '--' id2= ID ( '=' expression )? )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) )
                {
                case 20:
                	{
                		alt29=1;
                	}
                    break;

                }

                switch (alt29)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:265:2: '--' id2= ID ( '=' expression )?
            	    {
            	         MATCHT(20, &FOLLOW_20_in_commandStatement1465);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1473);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        {
            	             flag = QString((char *)((id2->getText(id2))->chars));
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:267:2: ( '=' expression )?
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	                case 25:
            	                	{
            	                		alt28=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:267:3: '=' expression
            	        	    {
            	        	         MATCHT(25, &FOLLOW_25_in_commandStatement1484);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_expression_in_commandStatement1487);
            	        	        expression23=expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        {
            	        	             expr = expression23
            	        	            ; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addOption(flag, expr); expr = 0;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecommandStatementEx; /* Prevent compiler warnings */
    rulecommandStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end commandStatement */

/**
 * $ANTLR start functionStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:273:1: functionStatement returns [ FunctionStatementNode *node] : ID '(' ( actualParameters )? ')' ;
 */
static FunctionStatementNode *
functionStatement(pilwisscriptParser ctx)
{
    FunctionStatementNode * node;


    pANTLR3_COMMON_TOKEN    ID24;
    ParametersNode * actualParameters25;
    #undef	RETURN_TYPE_actualParameters25
    #define	RETURN_TYPE_actualParameters25 ParametersNode *

    /* Initialize rule variables
     */

    ID24       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:274:2: ( ID '(' ( actualParameters )? ')' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:274:4: ID '(' ( actualParameters )? ')'
        {
            ID24 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_functionStatement1526);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            {
                 node = new FunctionStatementNode((char *)((ID24->getText(ID24))->chars)); 
            }


             MATCHT(14, &FOLLOW_14_in_functionStatement1536);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:275:6: ( actualParameters )?
            {
                int alt30=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 49:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:275:6: actualParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParameters_in_functionStatement1538);
            	        actualParameters25=actualParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->setParameters(actualParameters25
                ); 
            }


             MATCHT(15, &FOLLOW_15_in_functionStatement1548);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionStatementEx; /* Prevent compiler warnings */
    rulefunctionStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end functionStatement */

/**
 * $ANTLR start whileStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:279:1: whileStatement returns [ WhileNode *node] : 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' ;
 */
static WhileNode *
whileStatement(pilwisscriptParser ctx)
{
    WhileNode * node;


    ExpressionNode * expression26;
    #undef	RETURN_TYPE_expression26
    #define	RETURN_TYPE_expression26 ExpressionNode *

    ASTNode * statement27;
    #undef	RETURN_TYPE_statement27
    #define	RETURN_TYPE_statement27 ASTNode *

    BreakNode * breakStatement28;
    #undef	RETURN_TYPE_breakStatement28
    #define	RETURN_TYPE_breakStatement28 BreakNode *

    /* Initialize rule variables
     */


    	node = new WhileNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:283:2: ( 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:283:4: 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile'
        {
             MATCHT(61, &FOLLOW_61_in_whileStatement1570);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1572);
            expression26=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


             MATCHT(34, &FOLLOW_34_in_whileStatement1574);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:283:28: ( EOL )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:283:29: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1577);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


            {
                 node->setCondition(expression26
                ); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:284:3: ( ( statement | breakStatement ) ( EOL )* )*

            for (;;)
            {
                int alt34=2;
                switch ( LA(1) )
                {
                case ID:
                case 32:
                case 33:
                case 41:
                case 44:
                case 61:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:284:5: ( statement | breakStatement ) ( EOL )*
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:284:5: ( statement | breakStatement )
            	        {
            	            int alt32=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            case 33:
            	            case 41:
            	            case 44:
            	            case 61:
            	            	{
            	            		alt32=1;
            	            	}
            	                break;
            	            case 32:
            	            	{
            	            		alt32=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 32;
            	                EXCEPTION->state        = 0;


            	                goto rulewhileStatementEx;

            	            }

            	            switch (alt32)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:284:6: statement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_statement_in_whileStatement1588);
            	        	        statement27=statement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(statement27
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:286:3: breakStatement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_breakStatement_in_whileStatement1606);
            	        	        breakStatement28=breakStatement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(breakStatement28
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:287:5: ( EOL )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt33=1;
            	            	}
            	                break;

            	            }

            	            switch (alt33)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:287:6: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1619);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             MATCHT(38, &FOLLOW_38_in_whileStatement1632);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end whileStatement */

/**
 * $ANTLR start breakStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:292:1: breakStatement returns [ BreakNode *node] : 'break' 'when' expression ;
 */
static BreakNode *
breakStatement(pilwisscriptParser ctx)
{
    BreakNode * node;


    ExpressionNode * expression29;
    #undef	RETURN_TYPE_expression29
    #define	RETURN_TYPE_expression29 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new BreakNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:296:2: ( 'break' 'when' expression )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:296:4: 'break' 'when' expression
        {
             MATCHT(32, &FOLLOW_32_in_breakStatement1653);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


             MATCHT(59, &FOLLOW_59_in_breakStatement1655);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_breakStatement1657);
            expression29=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            {
                 node->addChild(expression29
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end breakStatement */

/**
 * $ANTLR start formatPart
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:299:1: formatPart returns [ ASTNode *node] : '{' formatters '}' ;
 */
static ASTNode *
formatPart(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * formatters30;
    #undef	RETURN_TYPE_formatters30
    #define	RETURN_TYPE_formatters30 ASTNode *

    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:301:2: ( '{' formatters '}' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:301:4: '{' formatters '}'
        {
             MATCHT(63, &FOLLOW_63_in_formatPart1679);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            FOLLOWPUSH(FOLLOW_formatters_in_formatPart1681);
            formatters30=formatters(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


             MATCHT(64, &FOLLOW_64_in_formatPart1683);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            {
                 node=formatters30
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleformatPartEx; /* Prevent compiler warnings */
    ruleformatPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatPart */

/**
 * $ANTLR start formatters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:304:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );
 */
static ASTNode *
formatters(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * formatter31;
    #undef	RETURN_TYPE_formatter31
    #define	RETURN_TYPE_formatter31 ASTNode *

    ASTNode * formatter32;
    #undef	RETURN_TYPE_formatter32
    #define	RETURN_TYPE_formatter32 ASTNode *

    /* Initialize rule variables
     */


    	node = new ASTNode("Formatters");

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:308:2: ( formatter | formatter ';' formatters )

            ANTLR3_UINT32 alt35;

            alt35=2;

            alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
            if  (HASEXCEPTION())
            {
                goto ruleformattersEx;
            }

            switch (alt35)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:308:4: formatter
        	    {
        	        FOLLOWPUSH(FOLLOW_formatter_in_formatters1706);
        	        formatter31=formatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(formatter31
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:309:4: formatter ';' formatters
        	    {
        	        FOLLOWPUSH(FOLLOW_formatter_in_formatters1717);
        	        formatter32=formatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatters1719);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_formatters_in_formatters1721);
        	        formatters(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(formatter32
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformattersEx; /* Prevent compiler warnings */
    ruleformattersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatters */

/**
 * $ANTLR start formatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:312:1: formatter returns [ ASTNode *node] : ( dataFormatter | domainFormatter | grouper | reintepreter );
 */
static ASTNode *
formatter(pilwisscriptParser ctx)
{
    ASTNode * node;


    Formatter * dataFormatter33;
    #undef	RETURN_TYPE_dataFormatter33
    #define	RETURN_TYPE_dataFormatter33 Formatter *

    DomainFormatter * domainFormatter34;
    #undef	RETURN_TYPE_domainFormatter34
    #define	RETURN_TYPE_domainFormatter34 DomainFormatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:2: ( dataFormatter | domainFormatter | grouper | reintepreter )

            ANTLR3_UINT32 alt36;

            alt36=4;

            switch ( LA(1) )
            {
            case 41:
            	{
            		alt36=1;
            	}
                break;
            case 35:
            	{
            		alt36=2;
            	}
                break;
            case 43:
            	{
            		alt36=3;
            	}
                break;
            case 54:
            	{
            		alt36=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 36;
                EXCEPTION->state        = 0;


                goto ruleformatterEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatter1742);
        	        dataFormatter33=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = dataFormatter33
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:315:4: domainFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatter1752);
        	        domainFormatter34=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = domainFormatter34
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:316:4: grouper
        	    {
        	        FOLLOWPUSH(FOLLOW_grouper_in_formatter1761);
        	        grouper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:317:4: reintepreter
        	    {
        	        FOLLOWPUSH(FOLLOW_reintepreter_in_formatter1766);
        	        reintepreter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformatterEx; /* Prevent compiler warnings */
    ruleformatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatter */

/**
 * $ANTLR start grouper
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:320:1: grouper : 'groupBy' '(' idlist ')' ;
 */
static void
grouper(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:320:9: ( 'groupBy' '(' idlist ')' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:320:11: 'groupBy' '(' idlist ')'
        {
             MATCHT(43, &FOLLOW_43_in_grouper1776);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


             MATCHT(14, &FOLLOW_14_in_grouper1778);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


            FOLLOWPUSH(FOLLOW_idlist_in_grouper1780);
            idlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


             MATCHT(15, &FOLLOW_15_in_grouper1781);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulegrouperEx; /* Prevent compiler warnings */
    rulegrouperEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end grouper */

/**
 * $ANTLR start reintepreter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:323:1: reintepreter : ( 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')' | 'reinterpret(' STRING ')' );
 */
static void
reintepreter(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:324:2: ( 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')' | 'reinterpret(' STRING ')' )

            ANTLR3_UINT32 alt37;

            alt37=2;

            switch ( LA(1) )
            {
            case 54:
            	{
            		switch ( LA(2) )
            		{
            		case STRING:
            			{
            				alt37=2;
            			}
            		    break;
            		case ID:
            			{
            				alt37=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 37;
            		    EXCEPTION->state        = 1;


            		    goto rulereintepreterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 37;
                EXCEPTION->state        = 0;


                goto rulereintepreterEx;

            }

            switch (alt37)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:324:4: 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')'
        	    {
        	         MATCHT(54, &FOLLOW_54_in_reintepreter1792);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_idlist_in_reintepreter1794);
        	        idlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(25, &FOLLOW_25_in_reintepreter1796);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(ID, &FOLLOW_ID_in_reintepreter1798);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_reintepreter1800);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter1802);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_reintepreter1804);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter1806);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_reintepreter1808);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:325:4: 'reinterpret(' STRING ')'
        	    {
        	         MATCHT(54, &FOLLOW_54_in_reintepreter1813);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter1815);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_reintepreter1817);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulereintepreterEx; /* Prevent compiler warnings */
    rulereintepreterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end reintepreter */

/**
 * $ANTLR start idlist
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:328:1: idlist : ( ID )+ ;
 */
static void
idlist(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:328:8: ( ( ID )+ )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:328:10: ( ID )+
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:328:10: ( ID )+
            {
                int cnt38=0;

                for (;;)
                {
                    int alt38=2;
            	switch ( LA(1) )
            	{
            	case ID:
            		{
            			alt38=1;
            		}
            	    break;

            	}

            	switch (alt38)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:328:10: ID
            	        {
            	             MATCHT(ID, &FOLLOW_ID_in_idlist1828);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleidlistEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt38 >= 1 )
            		{
            		    goto loop38;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleidlistEx;
            	}
            	cnt38++;
                }
                loop38: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleidlistEx; /* Prevent compiler warnings */
    ruleidlistEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end idlist */

/**
 * $ANTLR start dataFormatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:332:1: dataFormatter returns [ Formatter *node] : ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' );
 */
static Formatter *
dataFormatter(pilwisscriptParser ctx)
{
    Formatter * node;


    pANTLR3_COMMON_TOKEN    ID35;
    pANTLR3_COMMON_TOKEN    STRING36;
    pANTLR3_COMMON_TOKEN    ID37;
    pANTLR3_COMMON_TOKEN    STRING38;
    pANTLR3_COMMON_TOKEN    STRING39;
    QString id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 QString

    /* Initialize rule variables
     */


    	node = new Formatter();

    ID35       = NULL;
    STRING36       = NULL;
    ID37       = NULL;
    STRING38       = NULL;
    STRING39       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:336:2: ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' )

            ANTLR3_UINT32 alt39;

            alt39=3;

            switch ( LA(1) )
            {
            case 41:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 18:
            											{
            												alt39=1;
            											}
            										    break;
            										case 15:
            											{
            												alt39=2;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 39;
            										    EXCEPTION->state        = 6;


            										    goto ruledataFormatterEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 39;
            								    EXCEPTION->state        = 5;


            								    goto ruledataFormatterEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 39;
            						    EXCEPTION->state        = 3;


            						    goto ruledataFormatterEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						alt39=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 39;
            				    EXCEPTION->state        = 2;


            				    goto ruledataFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 39;
            		    EXCEPTION->state        = 1;


            		    goto ruledataFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 39;
                EXCEPTION->state        = 0;


                goto ruledataFormatterEx;

            }

            switch (alt39)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:336:4: 'format' '(' ID ',' STRING ',' id1= datatype ')'
        	    {
        	         MATCHT(41, &FOLLOW_41_in_dataFormatter1851);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1853);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID35 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter1855);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1857);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING36 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1859);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1861);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_datatype_in_dataFormatter1865);
        	        id1=datatype(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1867);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setDataType(id1
        	            );
        	            							  node->setFormatNameSpace(new IDNode((char *)((ID35->getText(ID35))->chars)));
        	            							  node->setFormat((char *)((STRING36->getText(STRING36))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:339:4: 'format' '(' ID ',' STRING ')'
        	    {
        	         MATCHT(41, &FOLLOW_41_in_dataFormatter1874);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1876);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID37 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter1878);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter1880);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING38 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1882);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1884);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormatNameSpace(new IDNode((char *)((ID37->getText(ID37))->chars)));
        	            							  node->setFormat((char *)((STRING38->getText(STRING38))->chars));
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:341:4: 'format' '(' STRING ')'
        	    {
        	         MATCHT(41, &FOLLOW_41_in_dataFormatter1893);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter1895);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING39 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter1897);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter1899);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormat((char *)((STRING39->getText(STRING39))->chars)); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledataFormatterEx; /* Prevent compiler warnings */
    ruledataFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end dataFormatter */

/**
 * $ANTLR start datatype
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:344:1: datatype returns [ QString typeName] : ( 'rastercoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'featurecoverage' | 'feature-index' | 'table' );
 */
static QString
datatype(pilwisscriptParser ctx)
{
    QString typeName;


    /* Initialize rule variables
     */



    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:347:2: ( 'rastercoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'featurecoverage' | 'feature-index' | 'table' )

            ANTLR3_UINT32 alt40;

            alt40=7;

            switch ( LA(1) )
            {
            case 53:
            	{
            		alt40=1;
            	}
                break;
            case 52:
            	{
            		alt40=2;
            	}
                break;
            case 47:
            	{
            		alt40=3;
            	}
                break;
            case 51:
            	{
            		alt40=4;
            	}
                break;
            case 40:
            	{
            		alt40=5;
            	}
                break;
            case 39:
            	{
            		alt40=6;
            	}
                break;
            case 56:
            	{
            		alt40=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 40;
                EXCEPTION->state        = 0;


                goto ruledatatypeEx;

            }

            switch (alt40)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:347:4: 'rastercoverage'
        	    {
        	         MATCHT(53, &FOLLOW_53_in_datatype1922);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "gridcoverage"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:348:4: 'polygoncoverage'
        	    {
        	         MATCHT(52, &FOLLOW_52_in_datatype1932);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "polygoncoverage"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:349:4: 'linecoverage'
        	    {
        	         MATCHT(47, &FOLLOW_47_in_datatype1942);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "linecoverage";
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:350:4: 'pointcoverage'
        	    {
        	         MATCHT(51, &FOLLOW_51_in_datatype1952);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "pointcoverage"; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:351:4: 'featurecoverage'
        	    {
        	         MATCHT(40, &FOLLOW_40_in_datatype1962);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "featurecoverage";
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:352:4: 'feature-index'
        	    {
        	         MATCHT(39, &FOLLOW_39_in_datatype1997);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "feature-index";
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:353:4: 'table'
        	    {
        	         MATCHT(56, &FOLLOW_56_in_datatype2034);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "table"; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledatatypeEx; /* Prevent compiler warnings */
    ruledatatypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return typeName;
}
/* $ANTLR end datatype */

/**
 * $ANTLR start domainFormatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:356:1: domainFormatter returns [ DomainFormatter *node] : ( 'dom' '=' ID | 'dom' '=' valrangePart );
 */
static DomainFormatter *
domainFormatter(pilwisscriptParser ctx)
{
    DomainFormatter * node;


    pANTLR3_COMMON_TOKEN    ID40;
    ValueRangeNode * valrangePart41;
    #undef	RETURN_TYPE_valrangePart41
    #define	RETURN_TYPE_valrangePart41 ValueRangeNode *

    /* Initialize rule variables
     */


    	node = new DomainFormatter();

    ID40       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:360:2: ( 'dom' '=' ID | 'dom' '=' valrangePart )

            ANTLR3_UINT32 alt41;

            alt41=2;

            switch ( LA(1) )
            {
            case 35:
            	{
            		switch ( LA(2) )
            		{
            		case 25:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						alt41=1;
            					}
            				    break;
            				case 58:
            					{
            						alt41=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 41;
            				    EXCEPTION->state        = 2;


            				    goto ruledomainFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 41;
            		    EXCEPTION->state        = 1;


            		    goto ruledomainFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 41;
                EXCEPTION->state        = 0;


                goto ruledomainFormatterEx;

            }

            switch (alt41)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:360:4: 'dom' '=' ID
        	    {
        	         MATCHT(35, &FOLLOW_35_in_domainFormatter2061);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(25, &FOLLOW_25_in_domainFormatter2063);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        ID40 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_domainFormatter2065);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setDomainId(new IDNode((char *)((ID40->getText(ID40))->chars)));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:361:4: 'dom' '=' valrangePart
        	    {
        	         MATCHT(35, &FOLLOW_35_in_domainFormatter2075);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(25, &FOLLOW_25_in_domainFormatter2077);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_valrangePart_in_domainFormatter2079);
        	        valrangePart41=valrangePart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setValueRange(valrangePart41
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledomainFormatterEx; /* Prevent compiler warnings */
    ruledomainFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end domainFormatter */

/**
 * $ANTLR start valrangePart
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:364:1: valrangePart returns [ ValueRangeNode *node] : 'vr' '=' ;
 */
static ValueRangeNode *
valrangePart(pilwisscriptParser ctx)
{
    ValueRangeNode * node;


    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:365:2: ( 'vr' '=' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:365:4: 'vr' '='
        {
             MATCHT(58, &FOLLOW_58_in_valrangePart2099);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


             MATCHT(25, &FOLLOW_25_in_valrangePart2101);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalrangePartEx; /* Prevent compiler warnings */
    rulevalrangePartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end valrangePart */

/**
 * $ANTLR start ifStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:368:1: ifStatement returns [ Ifnode *node] : 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' ;
 */
static Ifnode *
ifStatement(pilwisscriptParser ctx)
{
    Ifnode * node;


    ASTNode * result;
    #undef	RETURN_TYPE_result
    #define	RETURN_TYPE_result ASTNode *

    ASTNode * result2;
    #undef	RETURN_TYPE_result2
    #define	RETURN_TYPE_result2 ASTNode *

    ExpressionNode * expression42;
    #undef	RETURN_TYPE_expression42
    #define	RETURN_TYPE_expression42 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new Ifnode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:2: ( 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:4: 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif'
        {
             MATCHT(44, &FOLLOW_44_in_ifStatement2123);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_ifStatement2125);
            expression42=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:20: ( EOL )?
            {
                int alt42=2;
                switch ( LA(1) )
                {
                    case EOL:
                    	{
                    		alt42=1;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:21: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2128);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(57, &FOLLOW_57_in_ifStatement2132);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:34: ( EOL )*

            for (;;)
            {
                int alt43=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt43=1;
                	}
                    break;

                }

                switch (alt43)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:34: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2134);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:39: (result= statement ( EOL )* )+
            {
                int cnt45=0;

                for (;;)
                {
                    int alt45=2;
            	switch ( LA(1) )
            	{
            	case ID:
            	case 33:
            	case 41:
            	case 44:
            	case 61:
            		{
            			alt45=1;
            		}
            	    break;

            	}

            	switch (alt45)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:40: result= statement ( EOL )*
            	        {
            	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2140);
            	            result=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleifStatementEx;
            	            }


            	            {
            	                node->addThen(result
            	                );
            	            }


            	            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:88: ( EOL )*

            	            for (;;)
            	            {
            	                int alt44=2;
            	                switch ( LA(1) )
            	                {
            	                case EOL:
            	                	{
            	                		alt44=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt44)
            	                {
            	            	case 1:
            	            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:372:88: EOL
            	            	    {
            	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2144);
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleifStatementEx;
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop44;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop44: ; /* Jump out to here if this rule does not match */


            	        }
            	        break;

            	    default:

            		if ( cnt45 >= 1 )
            		{
            		    goto loop45;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleifStatementEx;
            	}
            	cnt45++;
                }
                loop45: ;	/* Jump to here if this rule does not match */
            }

            {
                 node->setCondition(expression42
                );  
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:3: ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )?
            {
                int alt49=2;
                switch ( LA(1) )
                {
                    case 36:
                    	{
                    		alt49=1;
                    	}
                        break;
                }

                switch (alt49)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:4: 'else' ( EOL )* (result2= statement ( EOL )* )+
            	    {
            	         MATCHT(36, &FOLLOW_36_in_ifStatement2156);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:11: ( EOL )*

            	        for (;;)
            	        {
            	            int alt46=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt46=1;
            	            	}
            	                break;

            	            }

            	            switch (alt46)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:11: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2158);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop46;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop46: ; /* Jump out to here if this rule does not match */


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:16: (result2= statement ( EOL )* )+
            	        {
            	            int cnt48=0;

            	            for (;;)
            	            {
            	                int alt48=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case ID:
            	        	case 33:
            	        	case 41:
            	        	case 44:
            	        	case 61:
            	        		{
            	        			alt48=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt48)
            	        	{
            	        	    case 1:
            	        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:17: result2= statement ( EOL )*
            	        	        {
            	        	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2164);
            	        	            result2=statement(ctx);

            	        	            FOLLOWPOP();
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleifStatementEx;
            	        	            }


            	        	            {
            	        	                node->addElse(result2
            	        	                 ); 
            	        	            }


            	        	            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:70: ( EOL )*

            	        	            for (;;)
            	        	            {
            	        	                int alt47=2;
            	        	                switch ( LA(1) )
            	        	                {
            	        	                case EOL:
            	        	                	{
            	        	                		alt47=1;
            	        	                	}
            	        	                    break;

            	        	                }

            	        	                switch (alt47)
            	        	                {
            	        	            	case 1:
            	        	            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:373:70: EOL
            	        	            	    {
            	        	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2169);
            	        	            	        if  (HASEXCEPTION())
            	        	            	        {
            	        	            	            goto ruleifStatementEx;
            	        	            	        }


            	        	            	    }
            	        	            	    break;

            	        	            	default:
            	        	            	    goto loop47;	/* break out of the loop */
            	        	            	    break;
            	        	                }
            	        	            }
            	        	            loop47: ; /* Jump out to here if this rule does not match */


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt48 >= 1 )
            	        		{
            	        		    goto loop48;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleifStatementEx;
            	        	}
            	        	cnt48++;
            	            }
            	            loop48: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

             MATCHT(37, &FOLLOW_37_in_ifStatement2181);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end ifStatement */

/**
 * $ANTLR start returnStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:377:1: returnStatement returns [ ReturnNode *node] : 'return' ( expression )? ;
 */
static ReturnNode *
returnStatement(pilwisscriptParser ctx)
{
    ReturnNode * node;


    ExpressionNode * expression43;
    #undef	RETURN_TYPE_expression43
    #define	RETURN_TYPE_expression43 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ReturnNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:381:2: ( 'return' ( expression )? )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:381:4: 'return' ( expression )?
        {
             MATCHT(55, &FOLLOW_55_in_returnStatement2201);
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:381:13: ( expression )?
            {
                int alt50=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 49:
                    	{
                    		alt50=1;
                    	}
                        break;
                }

                switch (alt50)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:381:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2203);
            	        expression43=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                node->addChild(expression43
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end returnStatement */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
