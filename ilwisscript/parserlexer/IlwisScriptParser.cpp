/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g
 *     -                            On : 2013-10-29 09:00:11
 *     -                for the parser : ilwisscriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ilwisscriptParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pilwisscriptParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pilwisscriptParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pilwisscriptParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pilwisscriptParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ilwisscriptParserTokenNames[67+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "':='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'Boolean'",
        (pANTLR3_UINT8) "'Integer'",
        (pANTLR3_UINT8) "'Real'",
        (pANTLR3_UINT8) "'String'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'and'",
        (pANTLR3_UINT8) "'begin'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'constant'",
        (pANTLR3_UINT8) "'declare'",
        (pANTLR3_UINT8) "'define'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'dom'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'endfunction'",
        (pANTLR3_UINT8) "'endif'",
        (pANTLR3_UINT8) "'endwhile'",
        (pANTLR3_UINT8) "'format'",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'gridcoverage'",
        (pANTLR3_UINT8) "'groupBy'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'key='",
        (pANTLR3_UINT8) "'linecoverage'",
        (pANTLR3_UINT8) "'mod'",
        (pANTLR3_UINT8) "'not'",
        (pANTLR3_UINT8) "'or'",
        (pANTLR3_UINT8) "'pointcoverage'",
        (pANTLR3_UINT8) "'polygoncoverage'",
        (pANTLR3_UINT8) "'reinterpret('",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'table'",
        (pANTLR3_UINT8) "'then'",
        (pANTLR3_UINT8) "'vr'",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'xor'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 ASTNode *
	script    (pilwisscriptParser ctx);
static 
 ASTNode *
	scriptLine    (pilwisscriptParser ctx);
static 
 VariableNode *
	variable    (pilwisscriptParser ctx);
static 
 VariableNode *
	constant    (pilwisscriptParser ctx);
static 
 quint64
	type    (pilwisscriptParser ctx);
static 
 ASTNode *
	statement    (pilwisscriptParser ctx);
static 
 void
	defineStatement    (pilwisscriptParser ctx);
static 
 AssignmentNode *
	assignmentStatement    (pilwisscriptParser ctx);
static 
 OutParametersNode *
	outParameters    (pilwisscriptParser ctx);
static 
 ParametersNode *
	actualParameters    (pilwisscriptParser ctx);
static 
 FunctionNode *
	function    (pilwisscriptParser ctx);
static 
 TermNode *
	term    (pilwisscriptParser ctx);
static 
 Selector *
	selector    (pilwisscriptParser ctx);
static 
 TermNode *
	negation    (pilwisscriptParser ctx);
static 
 TermNode *
	unary    (pilwisscriptParser ctx);
static 
 MultiplicationNode *
	mult    (pilwisscriptParser ctx);
static 
 AddNode *
	add    (pilwisscriptParser ctx);
static 
 RelationNode *
	relation    (pilwisscriptParser ctx);
static 
 ExpressionNode *
	expression    (pilwisscriptParser ctx);
static 
 CommandNode *
	commandStatement    (pilwisscriptParser ctx);
static 
 FunctionStatementNode *
	functionStatement    (pilwisscriptParser ctx);
static 
 WhileNode *
	whileStatement    (pilwisscriptParser ctx);
static 
 BreakNode *
	breakStatement    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatPart    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatters    (pilwisscriptParser ctx);
static 
 ASTNode *
	formatter    (pilwisscriptParser ctx);
static 
 void
	grouper    (pilwisscriptParser ctx);
static 
 void
	reintepreter    (pilwisscriptParser ctx);
static 
 void
	idlist    (pilwisscriptParser ctx);
static 
 Formatter *
	dataFormatter    (pilwisscriptParser ctx);
static 
 QString
	datatype    (pilwisscriptParser ctx);
static 
 DomainFormatter *
	domainFormatter    (pilwisscriptParser ctx);
static 
 ValueRangeNode *
	valrangePart    (pilwisscriptParser ctx);
static 
 Ifnode *
	ifStatement    (pilwisscriptParser ctx);
static 
 ReturnNode *
	returnStatement    (pilwisscriptParser ctx);
static void	ilwisscriptParserFree(pilwisscriptParser ctx);
static void     ilwisscriptParserReset (pilwisscriptParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ilwisscriptParserNewSSD(instream, NULL);
}

/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pilwisscriptParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pilwisscriptParser) ANTLR3_CALLOC(1, sizeof(ilwisscriptParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ilwisscriptParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ilwisscriptParser interface
     */
    ctx->script	= script;
    ctx->scriptLine	= scriptLine;
    ctx->variable	= variable;
    ctx->constant	= constant;
    ctx->type	= type;
    ctx->statement	= statement;
    ctx->defineStatement	= defineStatement;
    ctx->assignmentStatement	= assignmentStatement;
    ctx->outParameters	= outParameters;
    ctx->actualParameters	= actualParameters;
    ctx->function	= function;
    ctx->term	= term;
    ctx->selector	= selector;
    ctx->negation	= negation;
    ctx->unary	= unary;
    ctx->mult	= mult;
    ctx->add	= add;
    ctx->relation	= relation;
    ctx->expression	= expression;
    ctx->commandStatement	= commandStatement;
    ctx->functionStatement	= functionStatement;
    ctx->whileStatement	= whileStatement;
    ctx->breakStatement	= breakStatement;
    ctx->formatPart	= formatPart;
    ctx->formatters	= formatters;
    ctx->formatter	= formatter;
    ctx->grouper	= grouper;
    ctx->reintepreter	= reintepreter;
    ctx->idlist	= idlist;
    ctx->dataFormatter	= dataFormatter;
    ctx->datatype	= datatype;
    ctx->domainFormatter	= domainFormatter;
    ctx->valrangePart	= valrangePart;
    ctx->ifStatement	= ifStatement;
    ctx->returnStatement	= returnStatement;
    ctx->free			= ilwisscriptParserFree;
    ctx->reset			= ilwisscriptParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ilwisscriptParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ilwisscriptParserReset (pilwisscriptParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ilwisscriptParserFree(pilwisscriptParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ilwisscriptParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scriptLine_in_script42  */
static	ANTLR3_BITWORD FOLLOW_scriptLine_in_script42_bits[]	= { ANTLR3_UINT64_LIT(0x0026070000000222), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_scriptLine_in_script42	= { FOLLOW_scriptLine_in_script42_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_scriptLine70  */
static	ANTLR3_BITWORD FOLLOW_statement_in_scriptLine70_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_scriptLine70	= { FOLLOW_statement_in_scriptLine70_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine79  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine79	= { FOLLOW_24_in_scriptLine79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_scriptLine84  */
static	ANTLR3_BITWORD FOLLOW_variable_in_scriptLine84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_scriptLine84	= { FOLLOW_variable_in_scriptLine84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine93  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine93_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine93	= { FOLLOW_24_in_scriptLine93_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_scriptLine98  */
static	ANTLR3_BITWORD FOLLOW_constant_in_scriptLine98_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_scriptLine98	= { FOLLOW_constant_in_scriptLine98_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine106  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine106	= { FOLLOW_24_in_scriptLine106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_scriptLine111  */
static	ANTLR3_BITWORD FOLLOW_function_in_scriptLine111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_scriptLine111	= { FOLLOW_function_in_scriptLine111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine120  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine120	= { FOLLOW_24_in_scriptLine120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_scriptLine126  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_scriptLine126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_scriptLine126	= { FOLLOW_EOL_in_scriptLine126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_variable146  */
static	ANTLR3_BITWORD FOLLOW_41_in_variable146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_variable146	= { FOLLOW_41_in_variable146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable152  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000440000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable152	= { FOLLOW_ID_in_variable152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_variable164  */
static	ANTLR3_BITWORD FOLLOW_18_in_variable164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_variable164	= { FOLLOW_18_in_variable164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable171  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000440000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable171	= { FOLLOW_ID_in_variable171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_variable187  */
static	ANTLR3_BITWORD FOLLOW_22_in_variable187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000780000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_variable187	= { FOLLOW_22_in_variable187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable191  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable191	= { FOLLOW_type_in_variable191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_variable207  */
static	ANTLR3_BITWORD FOLLOW_23_in_variable207_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_variable207	= { FOLLOW_23_in_variable207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_variable212  */
static	ANTLR3_BITWORD FOLLOW_expression_in_variable212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_variable212	= { FOLLOW_expression_in_variable212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_constant244  */
static	ANTLR3_BITWORD FOLLOW_40_in_constant244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_constant244	= { FOLLOW_40_in_constant244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_constant250  */
static	ANTLR3_BITWORD FOLLOW_ID_in_constant250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_constant250	= { FOLLOW_ID_in_constant250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_constant260  */
static	ANTLR3_BITWORD FOLLOW_22_in_constant260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000780000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_constant260	= { FOLLOW_22_in_constant260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_constant265  */
static	ANTLR3_BITWORD FOLLOW_type_in_constant265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_constant265	= { FOLLOW_type_in_constant265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_constant277  */
static	ANTLR3_BITWORD FOLLOW_23_in_constant277_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_constant277	= { FOLLOW_23_in_constant277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_constant282  */
static	ANTLR3_BITWORD FOLLOW_expression_in_constant282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_constant282	= { FOLLOW_expression_in_constant282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_type305  */
static	ANTLR3_BITWORD FOLLOW_32_in_type305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_type305	= { FOLLOW_32_in_type305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_type316  */
static	ANTLR3_BITWORD FOLLOW_31_in_type316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_type316	= { FOLLOW_31_in_type316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_type327  */
static	ANTLR3_BITWORD FOLLOW_34_in_type327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_type327	= { FOLLOW_34_in_type327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_type338  */
static	ANTLR3_BITWORD FOLLOW_33_in_type338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_type338	= { FOLLOW_33_in_type338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentStatement_in_statement362  */
static	ANTLR3_BITWORD FOLLOW_assignmentStatement_in_statement362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentStatement_in_statement362	= { FOLLOW_assignmentStatement_in_statement362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement372  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement372	= { FOLLOW_ifStatement_in_statement372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_statement383  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_statement383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_statement383	= { FOLLOW_whileStatement_in_statement383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionStatement_in_statement394  */
static	ANTLR3_BITWORD FOLLOW_functionStatement_in_statement394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionStatement_in_statement394	= { FOLLOW_functionStatement_in_statement394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_commandStatement_in_statement404  */
static	ANTLR3_BITWORD FOLLOW_commandStatement_in_statement404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_commandStatement_in_statement404	= { FOLLOW_commandStatement_in_statement404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_statement414  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_statement414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_statement414	= { FOLLOW_dataFormatter_in_statement414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defineStatement_in_statement425  */
static	ANTLR3_BITWORD FOLLOW_defineStatement_in_statement425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defineStatement_in_statement425	= { FOLLOW_defineStatement_in_statement425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_defineStatement436  */
static	ANTLR3_BITWORD FOLLOW_42_in_defineStatement436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_defineStatement436	= { FOLLOW_42_in_defineStatement436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_defineStatement438  */
static	ANTLR3_BITWORD FOLLOW_ID_in_defineStatement438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_defineStatement438	= { FOLLOW_ID_in_defineStatement438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_defineStatement440  */
static	ANTLR3_BITWORD FOLLOW_27_in_defineStatement440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_defineStatement440	= { FOLLOW_27_in_defineStatement440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_defineStatement442  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_defineStatement442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_defineStatement442	= { FOLLOW_STRING_in_defineStatement442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_outParameters_in_assignmentStatement463  */
static	ANTLR3_BITWORD FOLLOW_outParameters_in_assignmentStatement463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008800000) };
static  ANTLR3_BITSET_LIST FOLLOW_outParameters_in_assignmentStatement463	= { FOLLOW_outParameters_in_assignmentStatement463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentStatement473  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentStatement473_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentStatement473	= { FOLLOW_set_in_assignmentStatement473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_assignmentStatement490  */
static	ANTLR3_BITWORD FOLLOW_expression_in_assignmentStatement490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_assignmentStatement490	= { FOLLOW_expression_in_assignmentStatement490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters519  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800040002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters519	= { FOLLOW_ID_in_outParameters519_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters524  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters524	= { FOLLOW_selector_in_outParameters524_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters557  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters557	= { FOLLOW_formatPart_in_outParameters557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_outParameters570  */
static	ANTLR3_BITWORD FOLLOW_18_in_outParameters570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_outParameters570	= { FOLLOW_18_in_outParameters570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_outParameters574  */
static	ANTLR3_BITWORD FOLLOW_ID_in_outParameters574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800040002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_outParameters574	= { FOLLOW_ID_in_outParameters574_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_outParameters579  */
static	ANTLR3_BITWORD FOLLOW_selector_in_outParameters579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_outParameters579	= { FOLLOW_selector_in_outParameters579_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatPart_in_outParameters611  */
static	ANTLR3_BITWORD FOLLOW_formatPart_in_outParameters611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatPart_in_outParameters611	= { FOLLOW_formatPart_in_outParameters611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters652  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters652	= { FOLLOW_expression_in_actualParameters652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_actualParameters666  */
static	ANTLR3_BITWORD FOLLOW_18_in_actualParameters666_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_actualParameters666	= { FOLLOW_18_in_actualParameters666_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters675  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters675	= { FOLLOW_expression_in_actualParameters675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_function701  */
static	ANTLR3_BITWORD FOLLOW_50_in_function701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_function701	= { FOLLOW_50_in_function701_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function703  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function703	= { FOLLOW_ID_in_function703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_function713  */
static	ANTLR3_BITWORD FOLLOW_14_in_function713_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_function713	= { FOLLOW_14_in_function713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_function718  */
static	ANTLR3_BITWORD FOLLOW_variable_in_function718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_function718	= { FOLLOW_variable_in_function718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_function734  */
static	ANTLR3_BITWORD FOLLOW_18_in_function734_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_function734	= { FOLLOW_18_in_function734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_function738  */
static	ANTLR3_BITWORD FOLLOW_variable_in_function738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_function738	= { FOLLOW_variable_in_function738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_function753  */
static	ANTLR3_BITWORD FOLLOW_15_in_function753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_function753	= { FOLLOW_15_in_function753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function755  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function755_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function755	= { FOLLOW_EOL_in_function755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_function762  */
static	ANTLR3_BITWORD FOLLOW_38_in_function762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_function762	= { FOLLOW_38_in_function762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function764  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function764_bits[]	= { ANTLR3_UINT64_LIT(0x4022440000000200), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function764	= { FOLLOW_EOL_in_function764_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function769  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function769	= { FOLLOW_statement_in_function769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function780  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function780_bits[]	= { ANTLR3_UINT64_LIT(0x4022440000000200), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function780	= { FOLLOW_EOL_in_function780_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_function788  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_function788_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_function788	= { FOLLOW_returnStatement_in_function788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_function803  */
static	ANTLR3_BITWORD FOLLOW_46_in_function803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_function803	= { FOLLOW_46_in_function803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term825  */
static	ANTLR3_BITWORD FOLLOW_14_in_term825_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term825	= { FOLLOW_14_in_term825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_term827  */
static	ANTLR3_BITWORD FOLLOW_expression_in_term827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_term827	= { FOLLOW_expression_in_term827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term829  */
static	ANTLR3_BITWORD FOLLOW_15_in_term829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term829	= { FOLLOW_15_in_term829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_term840  */
static	ANTLR3_BITWORD FOLLOW_INT_in_term840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_term840	= { FOLLOW_INT_in_term840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_term852  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_term852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_term852	= { FOLLOW_FLOAT_in_term852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_term864  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_term864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_term864	= { FOLLOW_STRING_in_term864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term880  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term880	= { FOLLOW_ID_in_term880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term882  */
static	ANTLR3_BITWORD FOLLOW_14_in_term882_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term882	= { FOLLOW_14_in_term882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_term894  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_term894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_term894	= { FOLLOW_actualParameters_in_term894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term906  */
static	ANTLR3_BITWORD FOLLOW_15_in_term906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term906	= { FOLLOW_15_in_term906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term921  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term921	= { FOLLOW_ID_in_term921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selector_in_term935  */
static	ANTLR3_BITWORD FOLLOW_selector_in_term935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selector_in_term935	= { FOLLOW_selector_in_term935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term952  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term952	= { FOLLOW_ID_in_term952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector977  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector977	= { FOLLOW_35_in_selector977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector981  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector981	= { FOLLOW_INT_in_selector981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector985  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector985	= { FOLLOW_INT_in_selector985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector987  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector987	= { FOLLOW_18_in_selector987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector991  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector991	= { FOLLOW_INT_in_selector991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector995  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector995_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector995	= { FOLLOW_INT_in_selector995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector997  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector997	= { FOLLOW_36_in_selector997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector1005  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector1005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector1005	= { FOLLOW_35_in_selector1005_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1009  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1009	= { FOLLOW_ID_in_selector1009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector1012  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector1012_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector1012	= { FOLLOW_18_in_selector1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_selector1014  */
static	ANTLR3_BITWORD FOLLOW_54_in_selector1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_selector1014	= { FOLLOW_54_in_selector1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1018  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1018	= { FOLLOW_ID_in_selector1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector1023  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector1023	= { FOLLOW_36_in_selector1023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector1032  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector1032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector1032	= { FOLLOW_35_in_selector1032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1034  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1034_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1034	= { FOLLOW_INT_in_selector1034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector1036  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector1036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector1036	= { FOLLOW_36_in_selector1036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector1048  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector1048	= { FOLLOW_35_in_selector1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1052  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1052	= { FOLLOW_ID_in_selector1052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1057  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1057_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1057	= { FOLLOW_ID_in_selector1057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector1060  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector1060_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector1060	= { FOLLOW_18_in_selector1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_selector1061  */
static	ANTLR3_BITWORD FOLLOW_54_in_selector1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_selector1061	= { FOLLOW_54_in_selector1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1065  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1065	= { FOLLOW_ID_in_selector1065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector1069  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector1069	= { FOLLOW_36_in_selector1069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector1078  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector1078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector1078	= { FOLLOW_35_in_selector1078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1082  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1082	= { FOLLOW_INT_in_selector1082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1087  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1087_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1087	= { FOLLOW_INT_in_selector1087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector1089  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector1089	= { FOLLOW_36_in_selector1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_selector1099  */
static	ANTLR3_BITWORD FOLLOW_35_in_selector1099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_selector1099	= { FOLLOW_35_in_selector1099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1103  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1103	= { FOLLOW_ID_in_selector1103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1107  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1107	= { FOLLOW_ID_in_selector1107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector1109  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector1109	= { FOLLOW_18_in_selector1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1113  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1113	= { FOLLOW_INT_in_selector1113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_selector1117  */
static	ANTLR3_BITWORD FOLLOW_INT_in_selector1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_selector1117	= { FOLLOW_INT_in_selector1117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_selector1120  */
static	ANTLR3_BITWORD FOLLOW_18_in_selector1120_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_selector1120	= { FOLLOW_18_in_selector1120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_selector1122  */
static	ANTLR3_BITWORD FOLLOW_54_in_selector1122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_selector1122	= { FOLLOW_54_in_selector1122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selector1126  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selector1126_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selector1126	= { FOLLOW_ID_in_selector1126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_selector1131  */
static	ANTLR3_BITWORD FOLLOW_36_in_selector1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_selector1131	= { FOLLOW_36_in_selector1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_negation1156  */
static	ANTLR3_BITWORD FOLLOW_57_in_negation1156_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_negation1156	= { FOLLOW_57_in_negation1156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_negation1172  */
static	ANTLR3_BITWORD FOLLOW_term_in_negation1172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_negation1172	= { FOLLOW_term_in_negation1172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_unary1200  */
static	ANTLR3_BITWORD FOLLOW_17_in_unary1200_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_unary1200	= { FOLLOW_17_in_unary1200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_unary1212  */
static	ANTLR3_BITWORD FOLLOW_19_in_unary1212_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_unary1212	= { FOLLOW_19_in_unary1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_negation_in_unary1228  */
static	ANTLR3_BITWORD FOLLOW_negation_in_unary1228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_negation_in_unary1228	= { FOLLOW_negation_in_unary1228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1254  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1254_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1254	= { FOLLOW_unary_in_mult1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_mult1269  */
static	ANTLR3_BITWORD FOLLOW_16_in_mult1269_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_mult1269	= { FOLLOW_16_in_mult1269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_mult1282  */
static	ANTLR3_BITWORD FOLLOW_21_in_mult1282_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_mult1282	= { FOLLOW_21_in_mult1282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_mult1294  */
static	ANTLR3_BITWORD FOLLOW_56_in_mult1294_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_mult1294	= { FOLLOW_56_in_mult1294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1311  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1311_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000210002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1311	= { FOLLOW_unary_in_mult1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1346  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1346_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1346	= { FOLLOW_mult_in_add1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_add1361  */
static	ANTLR3_BITWORD FOLLOW_17_in_add1361_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_add1361	= { FOLLOW_17_in_add1361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_add1377  */
static	ANTLR3_BITWORD FOLLOW_19_in_add1377_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_add1377	= { FOLLOW_19_in_add1377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1397  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1397_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1397	= { FOLLOW_mult_in_add1397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1430  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000076002002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1430	= { FOLLOW_add_in_relation1430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_relation1448  */
static	ANTLR3_BITWORD FOLLOW_28_in_relation1448_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_relation1448	= { FOLLOW_28_in_relation1448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_relation1462  */
static	ANTLR3_BITWORD FOLLOW_13_in_relation1462_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_relation1462	= { FOLLOW_13_in_relation1462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_relation1476  */
static	ANTLR3_BITWORD FOLLOW_25_in_relation1476_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_relation1476	= { FOLLOW_25_in_relation1476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_relation1490  */
static	ANTLR3_BITWORD FOLLOW_26_in_relation1490_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_relation1490	= { FOLLOW_26_in_relation1490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_relation1504  */
static	ANTLR3_BITWORD FOLLOW_30_in_relation1504_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_relation1504	= { FOLLOW_30_in_relation1504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_relation1518  */
static	ANTLR3_BITWORD FOLLOW_29_in_relation1518_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_relation1518	= { FOLLOW_29_in_relation1518_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1536  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000076002002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1536	= { FOLLOW_add_in_relation1536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1570  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1570_bits[]	= { ANTLR3_UINT64_LIT(0x0400002000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1570	= { FOLLOW_relation_in_expression1570_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_expression1590  */
static	ANTLR3_BITWORD FOLLOW_37_in_expression1590_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_expression1590	= { FOLLOW_37_in_expression1590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_expression1604  */
static	ANTLR3_BITWORD FOLLOW_58_in_expression1604_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_expression1604	= { FOLLOW_58_in_expression1604_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_expression1618  */
static	ANTLR3_BITWORD FOLLOW_68_in_expression1618_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_expression1618	= { FOLLOW_68_in_expression1618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1635  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1635_bits[]	= { ANTLR3_UINT64_LIT(0x0400002000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1635	= { FOLLOW_relation_in_expression1635_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1672  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1672	= { FOLLOW_ID_in_commandStatement1672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_commandStatement1691  */
static	ANTLR3_BITWORD FOLLOW_20_in_commandStatement1691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_commandStatement1691	= { FOLLOW_20_in_commandStatement1691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1699  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008100002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1699	= { FOLLOW_ID_in_commandStatement1699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_commandStatement1710  */
static	ANTLR3_BITWORD FOLLOW_27_in_commandStatement1710_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_commandStatement1710	= { FOLLOW_27_in_commandStatement1710_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_commandStatement1713  */
static	ANTLR3_BITWORD FOLLOW_expression_in_commandStatement1713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_commandStatement1713	= { FOLLOW_expression_in_commandStatement1713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_functionStatement1752  */
static	ANTLR3_BITWORD FOLLOW_ID_in_functionStatement1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_functionStatement1752	= { FOLLOW_ID_in_functionStatement1752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_functionStatement1762  */
static	ANTLR3_BITWORD FOLLOW_14_in_functionStatement1762_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_functionStatement1762	= { FOLLOW_14_in_functionStatement1762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_functionStatement1764  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_functionStatement1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_functionStatement1764	= { FOLLOW_actualParameters_in_functionStatement1764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_functionStatement1774  */
static	ANTLR3_BITWORD FOLLOW_15_in_functionStatement1774_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_functionStatement1774	= { FOLLOW_15_in_functionStatement1774_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_whileStatement1796  */
static	ANTLR3_BITWORD FOLLOW_67_in_whileStatement1796_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_whileStatement1796	= { FOLLOW_67_in_whileStatement1796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1798  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1798_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1798	= { FOLLOW_expression_in_whileStatement1798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_whileStatement1800  */
static	ANTLR3_BITWORD FOLLOW_43_in_whileStatement1800_bits[]	= { ANTLR3_UINT64_LIT(0x0023048000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_whileStatement1800	= { FOLLOW_43_in_whileStatement1800_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1803  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1803_bits[]	= { ANTLR3_UINT64_LIT(0x0023048000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1803	= { FOLLOW_EOL_in_whileStatement1803_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1814  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1814_bits[]	= { ANTLR3_UINT64_LIT(0x0023048000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1814	= { FOLLOW_statement_in_whileStatement1814_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_whileStatement1832  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_whileStatement1832_bits[]	= { ANTLR3_UINT64_LIT(0x0023048000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_whileStatement1832	= { FOLLOW_breakStatement_in_whileStatement1832_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1845  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1845_bits[]	= { ANTLR3_UINT64_LIT(0x0023048000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1845	= { FOLLOW_EOL_in_whileStatement1845_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_whileStatement1858  */
static	ANTLR3_BITWORD FOLLOW_48_in_whileStatement1858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_whileStatement1858	= { FOLLOW_48_in_whileStatement1858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_breakStatement1879  */
static	ANTLR3_BITWORD FOLLOW_39_in_breakStatement1879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_breakStatement1879	= { FOLLOW_39_in_breakStatement1879_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_breakStatement1881  */
static	ANTLR3_BITWORD FOLLOW_66_in_breakStatement1881_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_breakStatement1881	= { FOLLOW_66_in_breakStatement1881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_breakStatement1883  */
static	ANTLR3_BITWORD FOLLOW_expression_in_breakStatement1883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_breakStatement1883	= { FOLLOW_expression_in_breakStatement1883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_formatPart1905  */
static	ANTLR3_BITWORD FOLLOW_69_in_formatPart1905_bits[]	= { ANTLR3_UINT64_LIT(0x2012100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_formatPart1905	= { FOLLOW_69_in_formatPart1905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatters_in_formatPart1907  */
static	ANTLR3_BITWORD FOLLOW_formatters_in_formatPart1907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_formatters_in_formatPart1907	= { FOLLOW_formatters_in_formatPart1907_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_formatPart1909  */
static	ANTLR3_BITWORD FOLLOW_70_in_formatPart1909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_formatPart1909	= { FOLLOW_70_in_formatPart1909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatter_in_formatters1932  */
static	ANTLR3_BITWORD FOLLOW_formatter_in_formatters1932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatter_in_formatters1932	= { FOLLOW_formatter_in_formatters1932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatter_in_formatters1943  */
static	ANTLR3_BITWORD FOLLOW_formatter_in_formatters1943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formatter_in_formatters1943	= { FOLLOW_formatter_in_formatters1943_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_formatters1945  */
static	ANTLR3_BITWORD FOLLOW_24_in_formatters1945_bits[]	= { ANTLR3_UINT64_LIT(0x2012100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_formatters1945	= { FOLLOW_24_in_formatters1945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatters_in_formatters1947  */
static	ANTLR3_BITWORD FOLLOW_formatters_in_formatters1947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatters_in_formatters1947	= { FOLLOW_formatters_in_formatters1947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dataFormatter_in_formatter1968  */
static	ANTLR3_BITWORD FOLLOW_dataFormatter_in_formatter1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dataFormatter_in_formatter1968	= { FOLLOW_dataFormatter_in_formatter1968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domainFormatter_in_formatter1978  */
static	ANTLR3_BITWORD FOLLOW_domainFormatter_in_formatter1978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domainFormatter_in_formatter1978	= { FOLLOW_domainFormatter_in_formatter1978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouper_in_formatter1987  */
static	ANTLR3_BITWORD FOLLOW_grouper_in_formatter1987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouper_in_formatter1987	= { FOLLOW_grouper_in_formatter1987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_reintepreter_in_formatter1992  */
static	ANTLR3_BITWORD FOLLOW_reintepreter_in_formatter1992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_reintepreter_in_formatter1992	= { FOLLOW_reintepreter_in_formatter1992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_grouper2002  */
static	ANTLR3_BITWORD FOLLOW_52_in_grouper2002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_grouper2002	= { FOLLOW_52_in_grouper2002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_grouper2004  */
static	ANTLR3_BITWORD FOLLOW_14_in_grouper2004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_grouper2004	= { FOLLOW_14_in_grouper2004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_idlist_in_grouper2006  */
static	ANTLR3_BITWORD FOLLOW_idlist_in_grouper2006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_idlist_in_grouper2006	= { FOLLOW_idlist_in_grouper2006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_grouper2007  */
static	ANTLR3_BITWORD FOLLOW_15_in_grouper2007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_grouper2007	= { FOLLOW_15_in_grouper2007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_reintepreter2018  */
static	ANTLR3_BITWORD FOLLOW_61_in_reintepreter2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_reintepreter2018	= { FOLLOW_61_in_reintepreter2018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_idlist_in_reintepreter2020  */
static	ANTLR3_BITWORD FOLLOW_idlist_in_reintepreter2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_idlist_in_reintepreter2020	= { FOLLOW_idlist_in_reintepreter2020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_reintepreter2022  */
static	ANTLR3_BITWORD FOLLOW_27_in_reintepreter2022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_reintepreter2022	= { FOLLOW_27_in_reintepreter2022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_reintepreter2024  */
static	ANTLR3_BITWORD FOLLOW_ID_in_reintepreter2024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_reintepreter2024	= { FOLLOW_ID_in_reintepreter2024_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_reintepreter2026  */
static	ANTLR3_BITWORD FOLLOW_18_in_reintepreter2026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_reintepreter2026	= { FOLLOW_18_in_reintepreter2026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter2028  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter2028	= { FOLLOW_STRING_in_reintepreter2028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_reintepreter2030  */
static	ANTLR3_BITWORD FOLLOW_18_in_reintepreter2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_reintepreter2030	= { FOLLOW_18_in_reintepreter2030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter2032  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter2032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter2032	= { FOLLOW_STRING_in_reintepreter2032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_reintepreter2034  */
static	ANTLR3_BITWORD FOLLOW_15_in_reintepreter2034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_reintepreter2034	= { FOLLOW_15_in_reintepreter2034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_reintepreter2039  */
static	ANTLR3_BITWORD FOLLOW_61_in_reintepreter2039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_reintepreter2039	= { FOLLOW_61_in_reintepreter2039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_reintepreter2041  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_reintepreter2041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_reintepreter2041	= { FOLLOW_STRING_in_reintepreter2041_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_reintepreter2043  */
static	ANTLR3_BITWORD FOLLOW_15_in_reintepreter2043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_reintepreter2043	= { FOLLOW_15_in_reintepreter2043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_idlist2054  */
static	ANTLR3_BITWORD FOLLOW_ID_in_idlist2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000202) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_idlist2054	= { FOLLOW_ID_in_idlist2054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_dataFormatter2077  */
static	ANTLR3_BITWORD FOLLOW_49_in_dataFormatter2077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_dataFormatter2077	= { FOLLOW_49_in_dataFormatter2077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter2079  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter2079	= { FOLLOW_14_in_dataFormatter2079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter2081  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter2081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter2081	= { FOLLOW_ID_in_dataFormatter2081_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter2083  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter2083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter2083	= { FOLLOW_18_in_dataFormatter2083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter2085  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter2085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter2085	= { FOLLOW_STRING_in_dataFormatter2085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter2087  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter2087_bits[]	= { ANTLR3_UINT64_LIT(0x9888000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter2087	= { FOLLOW_18_in_dataFormatter2087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_datatype_in_dataFormatter2091  */
static	ANTLR3_BITWORD FOLLOW_datatype_in_dataFormatter2091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_datatype_in_dataFormatter2091	= { FOLLOW_datatype_in_dataFormatter2091_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter2093  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter2093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter2093	= { FOLLOW_15_in_dataFormatter2093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_dataFormatter2100  */
static	ANTLR3_BITWORD FOLLOW_49_in_dataFormatter2100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_dataFormatter2100	= { FOLLOW_49_in_dataFormatter2100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter2102  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter2102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter2102	= { FOLLOW_14_in_dataFormatter2102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dataFormatter2104  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dataFormatter2104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dataFormatter2104	= { FOLLOW_ID_in_dataFormatter2104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_dataFormatter2106  */
static	ANTLR3_BITWORD FOLLOW_18_in_dataFormatter2106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_dataFormatter2106	= { FOLLOW_18_in_dataFormatter2106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter2108  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter2108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter2108	= { FOLLOW_STRING_in_dataFormatter2108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter2110  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter2110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter2110	= { FOLLOW_15_in_dataFormatter2110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_dataFormatter2119  */
static	ANTLR3_BITWORD FOLLOW_49_in_dataFormatter2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_dataFormatter2119	= { FOLLOW_49_in_dataFormatter2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_dataFormatter2121  */
static	ANTLR3_BITWORD FOLLOW_14_in_dataFormatter2121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_dataFormatter2121	= { FOLLOW_14_in_dataFormatter2121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_dataFormatter2123  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_dataFormatter2123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_dataFormatter2123	= { FOLLOW_STRING_in_dataFormatter2123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_dataFormatter2125  */
static	ANTLR3_BITWORD FOLLOW_15_in_dataFormatter2125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_dataFormatter2125	= { FOLLOW_15_in_dataFormatter2125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_datatype2144  */
static	ANTLR3_BITWORD FOLLOW_51_in_datatype2144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_datatype2144	= { FOLLOW_51_in_datatype2144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_datatype2154  */
static	ANTLR3_BITWORD FOLLOW_60_in_datatype2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_datatype2154	= { FOLLOW_60_in_datatype2154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_datatype2164  */
static	ANTLR3_BITWORD FOLLOW_55_in_datatype2164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_datatype2164	= { FOLLOW_55_in_datatype2164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_datatype2174  */
static	ANTLR3_BITWORD FOLLOW_59_in_datatype2174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_datatype2174	= { FOLLOW_59_in_datatype2174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_datatype2184  */
static	ANTLR3_BITWORD FOLLOW_63_in_datatype2184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_datatype2184	= { FOLLOW_63_in_datatype2184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_domainFormatter2211  */
static	ANTLR3_BITWORD FOLLOW_44_in_domainFormatter2211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_domainFormatter2211	= { FOLLOW_44_in_domainFormatter2211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_domainFormatter2213  */
static	ANTLR3_BITWORD FOLLOW_27_in_domainFormatter2213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_domainFormatter2213	= { FOLLOW_27_in_domainFormatter2213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_domainFormatter2215  */
static	ANTLR3_BITWORD FOLLOW_ID_in_domainFormatter2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_domainFormatter2215	= { FOLLOW_ID_in_domainFormatter2215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_domainFormatter2225  */
static	ANTLR3_BITWORD FOLLOW_44_in_domainFormatter2225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_domainFormatter2225	= { FOLLOW_44_in_domainFormatter2225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_domainFormatter2227  */
static	ANTLR3_BITWORD FOLLOW_27_in_domainFormatter2227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_domainFormatter2227	= { FOLLOW_27_in_domainFormatter2227_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_valrangePart_in_domainFormatter2229  */
static	ANTLR3_BITWORD FOLLOW_valrangePart_in_domainFormatter2229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_valrangePart_in_domainFormatter2229	= { FOLLOW_valrangePart_in_domainFormatter2229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_valrangePart2249  */
static	ANTLR3_BITWORD FOLLOW_65_in_valrangePart2249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_valrangePart2249	= { FOLLOW_65_in_valrangePart2249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_valrangePart2251  */
static	ANTLR3_BITWORD FOLLOW_27_in_valrangePart2251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_valrangePart2251	= { FOLLOW_27_in_valrangePart2251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_ifStatement2273  */
static	ANTLR3_BITWORD FOLLOW_53_in_ifStatement2273_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_ifStatement2273	= { FOLLOW_53_in_ifStatement2273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement2275  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement2275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement2275	= { FOLLOW_expression_in_ifStatement2275_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2278  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2278_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2278	= { FOLLOW_EOL_in_ifStatement2278_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_ifStatement2282  */
static	ANTLR3_BITWORD FOLLOW_64_in_ifStatement2282_bits[]	= { ANTLR3_UINT64_LIT(0x0022040000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_ifStatement2282	= { FOLLOW_64_in_ifStatement2282_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2284  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2284_bits[]	= { ANTLR3_UINT64_LIT(0x0022040000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2284	= { FOLLOW_EOL_in_ifStatement2284_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2290  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2290_bits[]	= { ANTLR3_UINT64_LIT(0x0022A40000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2290	= { FOLLOW_statement_in_ifStatement2290_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2294  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2294_bits[]	= { ANTLR3_UINT64_LIT(0x0022A40000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2294	= { FOLLOW_EOL_in_ifStatement2294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_ifStatement2306  */
static	ANTLR3_BITWORD FOLLOW_45_in_ifStatement2306_bits[]	= { ANTLR3_UINT64_LIT(0x0022040000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_ifStatement2306	= { FOLLOW_45_in_ifStatement2306_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2308  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2308_bits[]	= { ANTLR3_UINT64_LIT(0x0022040000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2308	= { FOLLOW_EOL_in_ifStatement2308_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement2314  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement2314_bits[]	= { ANTLR3_UINT64_LIT(0x0022840000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement2314	= { FOLLOW_statement_in_ifStatement2314_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_ifStatement2319  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_ifStatement2319_bits[]	= { ANTLR3_UINT64_LIT(0x0022840000000220), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_ifStatement2319	= { FOLLOW_EOL_in_ifStatement2319_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_ifStatement2331  */
static	ANTLR3_BITWORD FOLLOW_47_in_ifStatement2331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_ifStatement2331	= { FOLLOW_47_in_ifStatement2331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_returnStatement2351  */
static	ANTLR3_BITWORD FOLLOW_62_in_returnStatement2351_bits[]	= { ANTLR3_UINT64_LIT(0x02000000000A4F02) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_returnStatement2351	= { FOLLOW_62_in_returnStatement2351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2353  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2353	= { FOLLOW_expression_in_returnStatement2353_bits, 1	};



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    334:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );
 */
static const ANTLR3_INT32 dfa41_eot[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa41_eof[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa41_min[38] =
    {
	44, 14, 27, 14, 9, 9, 9, 9, 15, 9, 18, 15, 24, 27, 9, 24, 9, 11, 24, -1, 
	-1, 24, 24, 18, 15, 11, 51, 24, 18, 15, 15, 15, 15, 15, 11, 24, 15, 24
    };
static const ANTLR3_INT32 dfa41_max[38] =
    {
	61, 14, 27, 14, 11, 11, 65, 9, 15, 27, 18, 15, 70, 27, 15, 70, 9, 11, 70, 
	-1, -1, 70, 70, 18, 18, 11, 63, 70, 18, 15, 15, 15, 15, 15, 11, 70, 15, 
	70
    };
static const ANTLR3_INT32 dfa41_accept[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa41_special[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa41_T_empty	    NULL

static const ANTLR3_INT32 dfa41_T0[] =
    {
	35
    };

static const ANTLR3_INT32 dfa41_T1[] =
    {
	15
    };

static const ANTLR3_INT32 dfa41_T2[] =
    {
	7
    };

static const ANTLR3_INT32 dfa41_T3[] =
    {
	27, -1, -1, 26
    };

static const ANTLR3_INT32 dfa41_T4[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19
    };

static const ANTLR3_INT32 dfa41_T5[] =
    {
	6
    };

static const ANTLR3_INT32 dfa41_T6[] =
    {
	5
    };

static const ANTLR3_INT32 dfa41_T7[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR3_INT32 dfa41_T8[] =
    {
	21
    };

static const ANTLR3_INT32 dfa41_T9[] =
    {
	10, -1, 11
    };

static const ANTLR3_INT32 dfa41_T10[] =
    {
	14
    };

static const ANTLR3_INT32 dfa41_T11[] =
    {
	14, -1, -1, -1, -1, -1, 22
    };

static const ANTLR3_INT32 dfa41_T12[] =
    {
	23
    };

static const ANTLR3_INT32 dfa41_T13[] =
    {
	9, -1, 8
    };

static const ANTLR3_INT32 dfa41_T14[] =
    {
	28
    };

static const ANTLR3_INT32 dfa41_T15[] =
    {
	25
    };

static const ANTLR3_INT32 dfa41_T16[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 13
    };

static const ANTLR3_INT32 dfa41_T17[] =
    {
	36
    };

static const ANTLR3_INT32 dfa41_T18[] =
    {
	2, -1, -1, -1, -1, 1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };

static const ANTLR3_INT32 dfa41_T19[] =
    {
	29, -1, -1, -1, 31, -1, -1, -1, 32, 30, -1, -1, 33
    };

static const ANTLR3_INT32 dfa41_T20[] =
    {
	17
    };

static const ANTLR3_INT32 dfa41_T21[] =
    {
	34
    };

static const ANTLR3_INT32 dfa41_T22[] =
    {
	18
    };

static const ANTLR3_INT32 dfa41_T23[] =
    {
	24
    };

static const ANTLR3_INT32 dfa41_T24[] =
    {
	37
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa41_transitions[] =
{
    dfa41_T18, dfa41_T6, dfa41_T5, dfa41_T2, dfa41_T13, dfa41_T9, dfa41_T16, 
    dfa41_T10, dfa41_T1, dfa41_T7, dfa41_T20, dfa41_T22, dfa41_T4, dfa41_T8, 
    dfa41_T11, dfa41_T4, dfa41_T12, dfa41_T23, dfa41_T4, NULL, NULL, dfa41_T4, 
    dfa41_T4, dfa41_T15, dfa41_T3, dfa41_T14, dfa41_T19, dfa41_T4, dfa41_T21, 
    dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T17, dfa41_T4, 
    dfa41_T24, dfa41_T4
};


/* Declare tracking structure for Cyclic DFA 41
 */
static
ANTLR3_CYCLIC_DFA cdfa41
    =	{
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"334:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 41
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start script
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:46:1: script returns [ ASTNode *node] : ( scriptLine )+ ;
 */
static ASTNode *
script(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * scriptLine1;
    #undef	RETURN_TYPE_scriptLine1
    #define	RETURN_TYPE_scriptLine1 ASTNode *

    /* Initialize rule variables
     */


    	node = new ScriptNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:50:2: ( ( scriptLine )+ )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:50:4: ( scriptLine )+
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:50:4: ( scriptLine )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case EOL:
            	case ID:
            	case 40:
            	case 41:
            	case 42:
            	case 49:
            	case 50:
            	case 53:
            	case 67:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:50:6: scriptLine
            	        {
            	            FOLLOWPUSH(FOLLOW_scriptLine_in_script42);
            	            scriptLine1=scriptLine(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulescriptEx;
            	            }


            	            {
            	                node->addChild(scriptLine1
            	                ); 
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulescriptEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulescriptEx; /* Prevent compiler warnings */
    rulescriptEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end script */

/**
 * $ANTLR start scriptLine
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:53:1: scriptLine returns [ ASTNode *node] : ( statement ';' | variable ';' | constant ';' | function ';' | EOL );
 */
static ASTNode *
scriptLine(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * statement2;
    #undef	RETURN_TYPE_statement2
    #define	RETURN_TYPE_statement2 ASTNode *

    VariableNode * variable3;
    #undef	RETURN_TYPE_variable3
    #define	RETURN_TYPE_variable3 VariableNode *

    VariableNode * constant4;
    #undef	RETURN_TYPE_constant4
    #define	RETURN_TYPE_constant4 VariableNode *

    FunctionNode * function5;
    #undef	RETURN_TYPE_function5
    #define	RETURN_TYPE_function5 FunctionNode *

    /* Initialize rule variables
     */


    	node =  new ScriptLineNode();

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:57:2: ( statement ';' | variable ';' | constant ';' | function ';' | EOL )

            ANTLR3_UINT32 alt2;

            alt2=5;

            switch ( LA(1) )
            {
            case ID:
            case 42:
            case 49:
            case 53:
            case 67:
            	{
            		alt2=1;
            	}
                break;
            case 41:
            	{
            		alt2=2;
            	}
                break;
            case 40:
            	{
            		alt2=3;
            	}
                break;
            case 50:
            	{
            		alt2=4;
            	}
                break;
            case EOL:
            	{
            		alt2=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulescriptLineEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:57:4: statement ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_scriptLine70);
        	        statement2=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(statement2
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine79);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:58:4: variable ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_variable_in_scriptLine84);
        	        variable3=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(variable3
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine93);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:59:4: constant ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_constant_in_scriptLine98);
        	        constant4=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(constant4
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine106);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:60:4: function ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_function_in_scriptLine111);
        	        function5=function(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(function5
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine120);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:61:5: EOL
        	    {
        	         MATCHT(EOL, &FOLLOW_EOL_in_scriptLine126);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulescriptLineEx; /* Prevent compiler warnings */
    rulescriptLineEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end scriptLine */

/**
 * $ANTLR start variable
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:64:1: variable returns [ VariableNode *node] : 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )? ;
 */
static VariableNode *
variable(pilwisscriptParser ctx)
{
    VariableNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    quint64 type6;
    #undef	RETURN_TYPE_type6
    #define	RETURN_TYPE_type6 quint64

    ExpressionNode * expression7;
    #undef	RETURN_TYPE_expression7
    #define	RETURN_TYPE_expression7 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new VariableNode(false);

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:68:2: ( 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )? )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:68:4: 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )?
        {
             MATCHT(41, &FOLLOW_41_in_variable146);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable152);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            {
                node->addChild(new IDNode((char *)((id1->getText(id1))->chars)));
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:69:3: ( ',' id2= ID )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:70:3: ',' id2= ID
            	    {
            	         MATCHT(18, &FOLLOW_18_in_variable164);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable171);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        {
            	            node->addChild(new IDNode((char *)((id2->getText(id2))->chars)));
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             MATCHT(22, &FOLLOW_22_in_variable187);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            FOLLOWPUSH(FOLLOW_type_in_variable191);
            type6=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            {
                 node->setType(type6
                ); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:75:3: ( ':=' expression )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case 23:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:75:4: ':=' expression
            	    {
            	         MATCHT(23, &FOLLOW_23_in_variable207);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_variable212);
            	        expression7=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        {
            	             node->setExpression(expression7
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end variable */

/**
 * $ANTLR start constant
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:80:1: constant returns [ VariableNode *node] : 'constant' id1= ID ':' type ':=' expression ;
 */
static VariableNode *
constant(pilwisscriptParser ctx)
{
    VariableNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    quint64 type8;
    #undef	RETURN_TYPE_type8
    #define	RETURN_TYPE_type8 quint64

    ExpressionNode * expression9;
    #undef	RETURN_TYPE_expression9
    #define	RETURN_TYPE_expression9 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new VariableNode(true);

    id1       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:84:2: ( 'constant' id1= ID ':' type ':=' expression )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:84:4: 'constant' id1= ID ':' type ':=' expression
        {
             MATCHT(40, &FOLLOW_40_in_constant244);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_constant250);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->addChild(new IDNode((char *)((id1->getText(id1))->chars)));
            }


             MATCHT(22, &FOLLOW_22_in_constant260);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            FOLLOWPUSH(FOLLOW_type_in_constant265);
            type8=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->setType(type8
                ); 
            }


             MATCHT(23, &FOLLOW_23_in_constant277);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_constant282);
            expression9=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->setExpression(expression9
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end constant */

/**
 * $ANTLR start type
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:91:1: type returns [ quint64 type] : ( 'Integer' | 'Boolean' | 'String' | 'Real' );
 */
static quint64
type(pilwisscriptParser ctx)
{
    quint64 type;


    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:92:2: ( 'Integer' | 'Boolean' | 'String' | 'Real' )

            ANTLR3_UINT32 alt5;

            alt5=4;

            switch ( LA(1) )
            {
            case 32:
            	{
            		alt5=1;
            	}
                break;
            case 31:
            	{
            		alt5=2;
            	}
                break;
            case 34:
            	{
            		alt5=3;
            	}
                break;
            case 33:
            	{
            		alt5=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruletypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:92:4: 'Integer'
        	    {
        	         MATCHT(32, &FOLLOW_32_in_type305);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type= itINT32; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:93:4: 'Boolean'
        	    {
        	         MATCHT(31, &FOLLOW_31_in_type316);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type =  itBOOL; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:94:4: 'String'
        	    {
        	         MATCHT(34, &FOLLOW_34_in_type327);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type=  itSTRING;
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:95:4: 'Real'
        	    {
        	         MATCHT(33, &FOLLOW_33_in_type338);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type= itDOUBLE; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return type;
}
/* $ANTLR end type */

/**
 * $ANTLR start statement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:98:1: statement returns [ ASTNode *node] : ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement );
 */
static ASTNode *
statement(pilwisscriptParser ctx)
{
    ASTNode * node;


    AssignmentNode * assignmentStatement10;
    #undef	RETURN_TYPE_assignmentStatement10
    #define	RETURN_TYPE_assignmentStatement10 AssignmentNode *

    Ifnode * ifStatement11;
    #undef	RETURN_TYPE_ifStatement11
    #define	RETURN_TYPE_ifStatement11 Ifnode *

    WhileNode * whileStatement12;
    #undef	RETURN_TYPE_whileStatement12
    #define	RETURN_TYPE_whileStatement12 WhileNode *

    FunctionStatementNode * functionStatement13;
    #undef	RETURN_TYPE_functionStatement13
    #define	RETURN_TYPE_functionStatement13 FunctionStatementNode *

    CommandNode * commandStatement14;
    #undef	RETURN_TYPE_commandStatement14
    #define	RETURN_TYPE_commandStatement14 CommandNode *

    Formatter * dataFormatter15;
    #undef	RETURN_TYPE_dataFormatter15
    #define	RETURN_TYPE_dataFormatter15 Formatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:99:2: ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | dataFormatter | defineStatement )

            ANTLR3_UINT32 alt6;

            alt6=7;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 18:
            		case 23:
            		case 27:
            		case 35:
            		case 69:
            			{
            				alt6=1;
            			}
            		    break;
            		case 14:
            			{
            				alt6=4;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case 20:
            		case 24:
            		case 39:
            		case 42:
            		case 45:
            		case 47:
            		case 48:
            		case 49:
            		case 53:
            		case 67:
            			{
            				alt6=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 6;
            		    EXCEPTION->state        = 1;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case 53:
            	{
            		alt6=2;
            	}
                break;
            case 67:
            	{
            		alt6=3;
            	}
                break;
            case 49:
            	{
            		alt6=6;
            	}
                break;
            case 42:
            	{
            		alt6=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:99:4: assignmentStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentStatement_in_statement362);
        	        assignmentStatement10=assignmentStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = assignmentStatement10
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:100:4: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement372);
        	        ifStatement11=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = ifStatement11
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:101:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_statement383);
        	        whileStatement12=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = whileStatement12
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:102:4: functionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_functionStatement_in_statement394);
        	        functionStatement13=functionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = functionStatement13
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:103:4: commandStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_commandStatement_in_statement404);
        	        commandStatement14=commandStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = commandStatement14
        	            ; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:104:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_statement414);
        	        dataFormatter15=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = dataFormatter15
        	            ; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:105:4: defineStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_defineStatement_in_statement425);
        	        defineStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end statement */

/**
 * $ANTLR start defineStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:108:1: defineStatement : 'define' ID '=' STRING ;
 */
static void
defineStatement(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:109:2: ( 'define' ID '=' STRING )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:109:4: 'define' ID '=' STRING
        {
             MATCHT(42, &FOLLOW_42_in_defineStatement436);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(ID, &FOLLOW_ID_in_defineStatement438);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(27, &FOLLOW_27_in_defineStatement440);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


             MATCHT(STRING, &FOLLOW_STRING_in_defineStatement442);
            if  (HASEXCEPTION())
            {
                goto ruledefineStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledefineStatementEx; /* Prevent compiler warnings */
    ruledefineStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end defineStatement */

/**
 * $ANTLR start assignmentStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:113:1: assignmentStatement returns [ AssignmentNode *node] : outParameters ( ':=' | '=' ) expression ;
 */
static AssignmentNode *
assignmentStatement(pilwisscriptParser ctx)
{
    AssignmentNode * node;


    OutParametersNode * outParameters16;
    #undef	RETURN_TYPE_outParameters16
    #define	RETURN_TYPE_outParameters16 OutParametersNode *

    ExpressionNode * expression17;
    #undef	RETURN_TYPE_expression17
    #define	RETURN_TYPE_expression17 ExpressionNode *

    /* Initialize rule variables
     */


    	node= new AssignmentNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:117:2: ( outParameters ( ':=' | '=' ) expression )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:117:4: outParameters ( ':=' | '=' ) expression
        {
            FOLLOWPUSH(FOLLOW_outParameters_in_assignmentStatement463);
            outParameters16=outParameters(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }


            {
                 node->addOutputs(outParameters16
                ); 
            }


            if ( LA(1) == 23 || LA(1) == 27 )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleassignmentStatementEx;
            }


            {
                 node->setDefintion(true); 
            }


            FOLLOWPUSH(FOLLOW_expression_in_assignmentStatement490);
            expression17=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }


            {
                 node->setExpression(expression17
                );
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleassignmentStatementEx; /* Prevent compiler warnings */
    ruleassignmentStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end assignmentStatement */

/**
 * $ANTLR start outParameters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:122:1: outParameters returns [ OutParametersNode *node] : id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* ;
 */
static OutParametersNode *
outParameters(pilwisscriptParser ctx)
{
    OutParametersNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    Selector * sel1;
    #undef	RETURN_TYPE_sel1
    #define	RETURN_TYPE_sel1 Selector *

    ASTNode * for1;
    #undef	RETURN_TYPE_for1
    #define	RETURN_TYPE_for1 ASTNode *

    Selector * sel2;
    #undef	RETURN_TYPE_sel2
    #define	RETURN_TYPE_sel2 Selector *

    ASTNode * for2;
    #undef	RETURN_TYPE_for2
    #define	RETURN_TYPE_for2 ASTNode *

    /* Initialize rule variables
     */


    	node= new OutParametersNode();

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:126:2: (id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:126:4: id1= ID (sel1= selector )? (for1= formatPart )? ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters519);
            if  (HASEXCEPTION())
            {
                goto ruleoutParametersEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:126:11: (sel1= selector )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case 35:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:126:12: sel1= selector
            	    {
            	        FOLLOWPUSH(FOLLOW_selector_in_outParameters524);
            	        sel1=selector(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        {
            	             node->addSelector((char *)((id1->getText(id1))->chars),
            	            sel1
            	            );
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->addResult(new IDNode((char *)((id1->getText(id1))->chars))); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:128:3: (for1= formatPart )?
            {
                int alt8=2;
                switch ( LA(1) )
                {
                    case 69:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:128:4: for1= formatPart
            	    {
            	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters557);
            	        for1=formatPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        {
            	             node->addSpecifier((char *)((id1->getText(id1))->chars), 
            	            for1
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:129:2: ( ',' id2= ID (sel2= selector )? (for2= formatPart )? )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:129:3: ',' id2= ID (sel2= selector )? (for2= formatPart )?
            	    {
            	         MATCHT(18, &FOLLOW_18_in_outParameters570);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_outParameters574);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoutParametersEx;
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:129:14: (sel2= selector )?
            	        {
            	            int alt9=2;
            	            switch ( LA(1) )
            	            {
            	                case 35:
            	                	{
            	                		alt9=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:129:15: sel2= selector
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_selector_in_outParameters579);
            	        	        sel2=selector(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoutParametersEx;
            	        	        }


            	        	        {
            	        	             node->addSelector((char *)((id2->getText(id2))->chars), 
            	        	            sel2
            	        	            );
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addResult(new IDNode((char *)((id2->getText(id2))->chars))); 
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:131:3: (for2= formatPart )?
            	        {
            	            int alt10=2;
            	            switch ( LA(1) )
            	            {
            	                case 69:
            	                	{
            	                		alt10=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:131:4: for2= formatPart
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_formatPart_in_outParameters611);
            	        	        for2=formatPart(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoutParametersEx;
            	        	        }


            	        	        {
            	        	             node->addSpecifier((char *)((id2->getText(id2))->chars), 
            	        	            for2
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoutParametersEx; /* Prevent compiler warnings */
    ruleoutParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end outParameters */

/**
 * $ANTLR start actualParameters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:135:1: actualParameters returns [ ParametersNode *node] : expr1= expression ( ',' expr2= expression )* ;
 */
static ParametersNode *
actualParameters(pilwisscriptParser ctx)
{
    ParametersNode * node;


    ExpressionNode * expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 ExpressionNode *

    ExpressionNode * expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ParametersNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:139:2: (expr1= expression ( ',' expr2= expression )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:139:4: expr1= expression ( ',' expr2= expression )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_actualParameters652);
            expr1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParametersEx;
            }


            {
                 node->addChild(expr1
                ); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:140:3: ( ',' expr2= expression )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:141:3: ',' expr2= expression
            	    {
            	         MATCHT(18, &FOLLOW_18_in_actualParameters666);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_actualParameters675);
            	        expr2=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        {
            	             node->addChild(expr2
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleactualParametersEx; /* Prevent compiler warnings */
    ruleactualParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end actualParameters */

/**
 * $ANTLR start function
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:146:1: function returns [ FunctionNode *node] : 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction' ;
 */
static FunctionNode *
function(pilwisscriptParser ctx)
{
    FunctionNode * node;


    pANTLR3_COMMON_TOKEN    ID18;
    VariableNode * var1;
    #undef	RETURN_TYPE_var1
    #define	RETURN_TYPE_var1 VariableNode *

    VariableNode * var2;
    #undef	RETURN_TYPE_var2
    #define	RETURN_TYPE_var2 VariableNode *

    ASTNode * statement19;
    #undef	RETURN_TYPE_statement19
    #define	RETURN_TYPE_statement19 ASTNode *

    ReturnNode * returnStatement20;
    #undef	RETURN_TYPE_returnStatement20
    #define	RETURN_TYPE_returnStatement20 ReturnNode *

    /* Initialize rule variables
     */

    ID18       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:147:2: ( 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:147:4: 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction'
        {
             MATCHT(50, &FOLLOW_50_in_function701);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            ID18 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function703);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            {
                 node = new FunctionNode((char *)((ID18->getText(ID18))->chars));
            }


             MATCHT(14, &FOLLOW_14_in_function713);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:148:7: (var1= variable )?
            {
                int alt13=2;
                switch ( LA(1) )
                {
                    case 41:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:148:8: var1= variable
            	    {
            	        FOLLOWPUSH(FOLLOW_variable_in_function718);
            	        var1=variable(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addParameter(var1); 
            	        }


            	    }
            	    break;

                }
            }

            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:150:3: ( ',' var2= variable )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:150:4: ',' var2= variable
            	    {
            	         MATCHT(18, &FOLLOW_18_in_function734);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_variable_in_function738);
            	        var2=variable(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addParameter(var2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


             MATCHT(15, &FOLLOW_15_in_function753);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(EOL, &FOLLOW_EOL_in_function755);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(38, &FOLLOW_38_in_function762);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(EOL, &FOLLOW_EOL_in_function764);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:154:3: ( statement EOL )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case ID:
                case 42:
                case 49:
                case 53:
                case 67:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:154:4: statement EOL
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_function769);
            	        statement19=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addChild(statement19
            	            ); 
            	        }


            	         MATCHT(EOL, &FOLLOW_EOL_in_function780);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:156:3: ( returnStatement )?
            {
                int alt16=2;
                switch ( LA(1) )
                {
                    case 62:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:156:5: returnStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_returnStatement_in_function788);
            	        returnStatement20=returnStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->setReturn(returnStatement20
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(46, &FOLLOW_46_in_function803);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end function */

/**
 * $ANTLR start term
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:161:1: term returns [ TermNode *node] : ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters )? ')' |id2= ID (id3= selector )+ |id2= ID );
 */
static TermNode *
term(pilwisscriptParser ctx)
{
    TermNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    INT22;
    pANTLR3_COMMON_TOKEN    FLOAT23;
    pANTLR3_COMMON_TOKEN    STRING24;
    Selector * id3;
    #undef	RETURN_TYPE_id3
    #define	RETURN_TYPE_id3 Selector *

    ExpressionNode * expression21;
    #undef	RETURN_TYPE_expression21
    #define	RETURN_TYPE_expression21 ExpressionNode *

    ParametersNode * actualParameters25;
    #undef	RETURN_TYPE_actualParameters25
    #define	RETURN_TYPE_actualParameters25 ParametersNode *

    /* Initialize rule variables
     */


    	node = new TermNode();

    id1       = NULL;
    id2       = NULL;
    INT22       = NULL;
    FLOAT23       = NULL;
    STRING24       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:165:2: ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters )? ')' |id2= ID (id3= selector )+ |id2= ID )

            ANTLR3_UINT32 alt19;

            alt19=7;

            switch ( LA(1) )
            {
            case 14:
            	{
            		alt19=1;
            	}
                break;
            case INT:
            	{
            		alt19=2;
            	}
                break;
            case FLOAT:
            	{
            		alt19=3;
            	}
                break;
            case STRING:
            	{
            		alt19=4;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				alt19=5;
            			}
            		    break;
            		case 35:
            			{
            				alt19=6;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case 13:
            		case 15:
            		case 16:
            		case 17:
            		case 18:
            		case 19:
            		case 20:
            		case 21:
            		case 24:
            		case 25:
            		case 26:
            		case 28:
            		case 29:
            		case 30:
            		case 37:
            		case 39:
            		case 42:
            		case 43:
            		case 45:
            		case 46:
            		case 47:
            		case 48:
            		case 49:
            		case 53:
            		case 56:
            		case 58:
            		case 64:
            		case 67:
            		case 68:
            			{
            				alt19=7;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 19;
            		    EXCEPTION->state        = 5;


            		    goto ruletermEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:165:4: '(' expression ')'
        	    {
        	         MATCHT(14, &FOLLOW_14_in_term825);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_term827);
        	        expression21=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term829);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setExpression(expression21
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:166:4: INT
        	    {
        	        INT22 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_term840);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((INT22->getText(INT22))->chars)); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:167:4: FLOAT
        	    {
        	        FLOAT23 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_term852);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((FLOAT23->getText(FLOAT23))->chars)); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:168:4: STRING
        	    {
        	        STRING24 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_term864);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setString((char *)((STRING24->getText(STRING24))->chars)); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:169:4: id1= ID '(' ( actualParameters )? ')'
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term880);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term882);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id1->getText(id1))->chars))); 
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:170:3: ( actualParameters )?
        	        {
        	            int alt17=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT:
        	                case ID:
        	                case INT:
        	                case STRING:
        	                case 14:
        	                case 17:
        	                case 19:
        	                case 57:
        	                	{
        	                		alt17=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt17)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:170:4: actualParameters
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_actualParameters_in_term894);
        	        	        actualParameters25=actualParameters(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruletermEx;
        	        	        }


        	        	        {
        	        	               node->setParameters(actualParameters25
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(15, &FOLLOW_15_in_term906);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:172:4: id2= ID (id3= selector )+
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term921);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:173:3: (id3= selector )+
        	        {
        	            int cnt18=0;

        	            for (;;)
        	            {
        	                int alt18=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case 35:
        	        		{
        	        			alt18=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt18)
        	        	{
        	        	    case 1:
        	        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:173:4: id3= selector
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_selector_in_term935);
        	        	            id3=selector(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruletermEx;
        	        	            }


        	        	            {
        	        	                node->addSelector(id3
        	        	                );
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt18 >= 1 )
        	        		{
        	        		    goto loop18;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruletermEx;
        	        	}
        	        	cnt18++;
        	            }
        	            loop18: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 7:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:174:4: id2= ID
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term952);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end term */

/**
 * $ANTLR start selector
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:177:1: selector returns [ Selector *node] : ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' );
 */
static Selector *
selector(pilwisscriptParser ctx)
{
    Selector * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    id3;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    id5;
    pANTLR3_COMMON_TOKEN    INT26;

    /* Initialize rule variables
     */


    	node = new Selector("selector");

    id1       = NULL;
    id2       = NULL;
    id3       = NULL;
    id4       = NULL;
    id5       = NULL;
    INT26       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:181:2: ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' id1= ID ( ',' 'key=' id2= ID )? ']' | '[' INT ']' | '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']' | '[' id1= INT id2= INT ']' | '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']' )

            ANTLR3_UINT32 alt23;

            alt23=6;

            switch ( LA(1) )
            {
            case 35:
            	{
            		switch ( LA(2) )
            		{
            		case INT:
            			{
            				switch ( LA(3) )
            				{
            				case INT:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								alt23=1;
            							}
            						    break;
            						case 36:
            							{
            								alt23=5;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 23;
            						    EXCEPTION->state        = 4;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 36:
            					{
            						alt23=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 23;
            				    EXCEPTION->state        = 2;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;
            		case ID:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case INT:
            									{
            										alt23=6;
            									}
            								    break;
            								case 54:
            									{
            										alt23=4;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 23;
            								    EXCEPTION->state        = 10;


            								    goto ruleselectorEx;

            								}

            							}
            						    break;
            						case 36:
            							{
            								alt23=4;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 23;
            						    EXCEPTION->state        = 6;


            						    goto ruleselectorEx;

            						}

            					}
            				    break;
            				case 18:
            				case 36:
            					{
            						alt23=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 23;
            				    EXCEPTION->state        = 3;


            				    goto ruleselectorEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 23;
            		    EXCEPTION->state        = 1;


            		    goto ruleselectorEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 23;
                EXCEPTION->state        = 0;


                goto ruleselectorEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:181:4: '[' id1= INT id2= INT ',' id3= INT id4= INT ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector977);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector981);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector985);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector987);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector991);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector995);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(36, &FOLLOW_36_in_selector997);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("box"); node->setBounds((char *)((id1->getText(id1))->chars),
        	            									(char *)((id2->getText(id2))->chars),
        	            									(char *)((id3->getText(id3))->chars),
        	            									(char *)((id4->getText(id4))->chars)); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:185:4: '[' id1= ID ( ',' 'key=' id2= ID )? ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector1005);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1009);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:185:15: ( ',' 'key=' id2= ID )?
        	        {
        	            int alt20=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt20=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:185:16: ',' 'key=' id2= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector1012);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(54, &FOLLOW_54_in_selector1014);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1018);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(36, &FOLLOW_36_in_selector1023);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("var"); 
        	            								node->setVariable((char *)((id1->getText(id1))->chars));
        	            								if ( id2 != 0) node->keyColumns((char *)(id2->getText(id2))->chars);
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:188:4: '[' INT ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector1032);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        INT26 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1034);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(36, &FOLLOW_36_in_selector1036);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("index"); node->setVariable((char *)((INT26->getText(INT26))->chars));
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:189:4: '[' id1= ID id2= ID ( ',' 'key=' id3= ID )? ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector1048);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1052);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1057);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:189:23: ( ',' 'key=' id3= ID )?
        	        {
        	            int alt21=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:189:24: ',' 'key=' id3= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector1060);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(54, &FOLLOW_54_in_selector1061);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1065);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(36, &FOLLOW_36_in_selector1069);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								if ( id3 != 0) node->keyColumns((char *)(id3->getText(id3))->chars);
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:193:4: '[' id1= INT id2= INT ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector1078);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1082);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1087);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(36, &FOLLOW_36_in_selector1089);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("recordrange"); 
        	            								node->beginRec((char *)(id1->getText(id1))->chars); 
        	            								node->endRec((char *)(id2->getText(id2))->chars); 
        	        }


        	    }
        	    break;
        	case 6:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:196:4: '[' id1= ID id2= ID ',' id3= INT id4= INT ( ',' 'key=' id5= ID )? ']'
        	    {
        	         MATCHT(35, &FOLLOW_35_in_selector1099);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1103);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1107);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_selector1109);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1113);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_selector1117);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:196:42: ( ',' 'key=' id5= ID )?
        	        {
        	            int alt22=2;
        	            switch ( LA(1) )
        	            {
        	                case 18:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22)
        	            {
        	        	case 1:
        	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:196:43: ',' 'key=' id5= ID
        	        	    {
        	        	         MATCHT(18, &FOLLOW_18_in_selector1120);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	         MATCHT(54, &FOLLOW_54_in_selector1122);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	        id5 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selector1126);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselectorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(36, &FOLLOW_36_in_selector1131);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectorEx;
        	        }


        	        {
        	             node->setSelectorType("columnrecordrange");
        	            								node->beginCol((char *)(id1->getText(id1))->chars); 
        	            								node->endCol((char *)(id2->getText(id2))->chars); 
        	            								node->beginRec((char *)(id3->getText(id3))->chars); 
        	            								node->endRec((char *)(id4->getText(id4))->chars);
        	            								if ( id5 != 0) node->keyColumns((char *)(id5->getText(id5))->chars);
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleselectorEx; /* Prevent compiler warnings */
    ruleselectorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end selector */

/**
 * $ANTLR start negation
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:204:1: negation returns [ TermNode *node] : ( 'not' )* term ;
 */
static TermNode *
negation(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * term27;
    #undef	RETURN_TYPE_term27
    #define	RETURN_TYPE_term27 TermNode *

    /* Initialize rule variables
     */


    	bool negated = false;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:208:2: ( ( 'not' )* term )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:208:4: ( 'not' )* term
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:208:4: ( 'not' )*

            for (;;)
            {
                int alt24=2;
                switch ( LA(1) )
                {
                case 57:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:208:5: 'not'
            	    {
            	         MATCHT(57, &FOLLOW_57_in_negation1156);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenegationEx;
            	        }


            	        {
            	             negated = !negated; 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            FOLLOWPUSH(FOLLOW_term_in_negation1172);
            term27=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenegationEx;
            }


            {
                 term27
                ->setLogicalNegation(negated); node = term27
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenegationEx; /* Prevent compiler warnings */
    rulenegationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end negation */

/**
 * $ANTLR start unary
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:213:1: unary returns [ TermNode *node] : ( '+' | '-' )? negation ;
 */
static TermNode *
unary(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * negation28;
    #undef	RETURN_TYPE_negation28
    #define	RETURN_TYPE_negation28 TermNode *

    /* Initialize rule variables
     */


    	bool isnegated = false;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:218:2: ( ( '+' | '-' )? negation )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:218:4: ( '+' | '-' )? negation
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:218:4: ( '+' | '-' )?
            {
                int alt25=3;
                switch ( LA(1) )
                {
                    case 17:
                    	{
                    		alt25=1;
                    	}
                        break;
                    case 19:
                    	{
                    		alt25=2;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:218:5: '+'
            	    {
            	         MATCHT(17, &FOLLOW_17_in_unary1200);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:219:5: '-'
            	    {
            	         MATCHT(19, &FOLLOW_19_in_unary1212);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	        {
            	             isnegated = !isnegated; 
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_negation_in_unary1228);
            negation28=negation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunaryEx;
            }


            {
                 negation28
                ->setNumericalNegation(isnegated); node = negation28
                ; 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunaryEx; /* Prevent compiler warnings */
    ruleunaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end unary */

/**
 * $ANTLR start mult
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:223:1: mult returns [ MultiplicationNode *node] : un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* ;
 */
static MultiplicationNode *
mult(pilwisscriptParser ctx)
{
    MultiplicationNode * node;


    TermNode * un1;
    #undef	RETURN_TYPE_un1
    #define	RETURN_TYPE_un1 TermNode *

    TermNode * un2;
    #undef	RETURN_TYPE_un2
    #define	RETURN_TYPE_un2 TermNode *

    /* Initialize rule variables
     */


    	node = new MultiplicationNode();
    	OperationNode::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:228:2: (un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:228:4: un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )*
        {
            FOLLOWPUSH(FOLLOW_unary_in_mult1254);
            un1=unary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultEx;
            }


            {
                 node->setLeftTerm(un1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:229:3: ( ( '*' | '/' | 'mod' ) un2= unary )*

            for (;;)
            {
                int alt27=2;
                switch ( LA(1) )
                {
                case 16:
                case 21:
                case 56:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:230:3: ( '*' | '/' | 'mod' ) un2= unary
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:230:3: ( '*' | '/' | 'mod' )
            	        {
            	            int alt26=3;
            	            switch ( LA(1) )
            	            {
            	            case 16:
            	            	{
            	            		alt26=1;
            	            	}
            	                break;
            	            case 21:
            	            	{
            	            		alt26=2;
            	            	}
            	                break;
            	            case 56:
            	            	{
            	            		alt26=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 26;
            	                EXCEPTION->state        = 0;


            	                goto rulemultEx;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:230:4: '*'
            	        	    {
            	        	         MATCHT(16, &FOLLOW_16_in_mult1269);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oTIMES; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:231:5: '/'
            	        	    {
            	        	         MATCHT(21, &FOLLOW_21_in_mult1282);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oDIVIDED; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:232:5: 'mod'
            	        	    {
            	        	         MATCHT(56, &FOLLOW_56_in_mult1294);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oMOD; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_in_mult1311);
            	        un2=unary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultEx;
            	        }


            	        {
            	             node->addRightTerm(op, un2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemultEx; /* Prevent compiler warnings */
    rulemultEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end mult */

/**
 * $ANTLR start add
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:238:1: add returns [ AddNode *node] : mul1= mult ( ( '+' | '-' ) mul2= mult )* ;
 */
static AddNode *
add(pilwisscriptParser ctx)
{
    AddNode * node;


    MultiplicationNode * mul1;
    #undef	RETURN_TYPE_mul1
    #define	RETURN_TYPE_mul1 MultiplicationNode *

    MultiplicationNode * mul2;
    #undef	RETURN_TYPE_mul2
    #define	RETURN_TYPE_mul2 MultiplicationNode *

    /* Initialize rule variables
     */


    	node = new AddNode();
    	OperationNode::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:243:2: (mul1= mult ( ( '+' | '-' ) mul2= mult )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:243:4: mul1= mult ( ( '+' | '-' ) mul2= mult )*
        {
            FOLLOWPUSH(FOLLOW_mult_in_add1346);
            mul1=mult(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaddEx;
            }


            {
                 node->setLeftTerm(mul1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:244:3: ( ( '+' | '-' ) mul2= mult )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) )
                {
                case 17:
                case 19:
                	{
                		alt29=1;
                	}
                    break;

                }

                switch (alt29)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:245:3: ( '+' | '-' ) mul2= mult
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:245:3: ( '+' | '-' )
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	            case 17:
            	            	{
            	            		alt28=1;
            	            	}
            	                break;
            	            case 19:
            	            	{
            	            		alt28=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 28;
            	                EXCEPTION->state        = 0;


            	                goto ruleaddEx;

            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:245:4: '+'
            	        	    {
            	        	         MATCHT(17, &FOLLOW_17_in_add1361);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oADD; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:247:3: '-'
            	        	    {
            	        	         MATCHT(19, &FOLLOW_19_in_add1377);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oSUBSTRACT; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_mult_in_add1397);
            	        mul2=mult(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaddEx;
            	        }


            	        {
            	             node->addRightTerm(op, mul2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleaddEx; /* Prevent compiler warnings */
    ruleaddEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end add */

/**
 * $ANTLR start relation
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:253:1: relation returns [ RelationNode *node] : add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* ;
 */
static RelationNode *
relation(pilwisscriptParser ctx)
{
    RelationNode * node;


    AddNode * add1;
    #undef	RETURN_TYPE_add1
    #define	RETURN_TYPE_add1 AddNode *

    AddNode * add2;
    #undef	RETURN_TYPE_add2
    #define	RETURN_TYPE_add2 AddNode *

    /* Initialize rule variables
     */


    	node = new RelationNode();
    	OperationNode::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:258:2: (add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:258:4: add1= add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*
        {
            FOLLOWPUSH(FOLLOW_add_in_relation1430);
            add1=add(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }


            {
                 node->setLeftTerm(add1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:259:3: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) )
                {
                case 13:
                case 25:
                case 26:
                case 28:
                case 29:
                case 30:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:260:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add2= add
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:260:3: ( '==' | '!=' | '<' | '<=' | '>=' | '>' )
            	        {
            	            int alt30=6;
            	            switch ( LA(1) )
            	            {
            	            case 28:
            	            	{
            	            		alt30=1;
            	            	}
            	                break;
            	            case 13:
            	            	{
            	            		alt30=2;
            	            	}
            	                break;
            	            case 25:
            	            	{
            	            		alt30=3;
            	            	}
            	                break;
            	            case 26:
            	            	{
            	            		alt30=4;
            	            	}
            	                break;
            	            case 30:
            	            	{
            	            		alt30=5;
            	            	}
            	                break;
            	            case 29:
            	            	{
            	            		alt30=6;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 30;
            	                EXCEPTION->state        = 0;


            	                goto rulerelationEx;

            	            }

            	            switch (alt30)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:261:3: '=='
            	        	    {
            	        	         MATCHT(28, &FOLLOW_28_in_relation1448);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:262:5: '!='
            	        	    {
            	        	         MATCHT(13, &FOLLOW_13_in_relation1462);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oNEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:263:5: '<'
            	        	    {
            	        	         MATCHT(25, &FOLLOW_25_in_relation1476);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oLESS; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:264:5: '<='
            	        	    {
            	        	         MATCHT(26, &FOLLOW_26_in_relation1490);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oLESSEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:265:5: '>='
            	        	    {
            	        	         MATCHT(30, &FOLLOW_30_in_relation1504);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oGREATEREQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:266:5: '>'
            	        	    {
            	        	         MATCHT(29, &FOLLOW_29_in_relation1518);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oGREATER; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_add_in_relation1536);
            	        add2=add(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }


            	        {
            	             node->addRightTerm(op, add2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end relation */

/**
 * $ANTLR start expression
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:272:1: expression returns [ ExpressionNode *node] : rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* ;
 */
static ExpressionNode *
expression(pilwisscriptParser ctx)
{
    ExpressionNode * node;


    RelationNode * rel1;
    #undef	RETURN_TYPE_rel1
    #define	RETURN_TYPE_rel1 RelationNode *

    RelationNode * rel2;
    #undef	RETURN_TYPE_rel2
    #define	RETURN_TYPE_rel2 RelationNode *

    /* Initialize rule variables
     */


    	node = new ExpressionNode();
    	OperationNode::Operators op;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:277:2: (rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:277:4: rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )*
        {
            FOLLOWPUSH(FOLLOW_relation_in_expression1570);
            rel1=relation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }


            {
                 node->setLeftTerm(rel1); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:278:3: ( ( 'and' | 'or' | 'xor' ) rel2= relation )*

            for (;;)
            {
                int alt33=2;
                switch ( LA(1) )
                {
                case 37:
                case 58:
                case 68:
                	{
                		alt33=1;
                	}
                    break;

                }

                switch (alt33)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:279:3: ( 'and' | 'or' | 'xor' ) rel2= relation
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:279:3: ( 'and' | 'or' | 'xor' )
            	        {
            	            int alt32=3;
            	            switch ( LA(1) )
            	            {
            	            case 37:
            	            	{
            	            		alt32=1;
            	            	}
            	                break;
            	            case 58:
            	            	{
            	            		alt32=2;
            	            	}
            	                break;
            	            case 68:
            	            	{
            	            		alt32=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 32;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpressionEx;

            	            }

            	            switch (alt32)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:279:5: 'and'
            	        	    {
            	        	         MATCHT(37, &FOLLOW_37_in_expression1590);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oAND; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:280:5: 'or'
            	        	    {
            	        	         MATCHT(58, &FOLLOW_58_in_expression1604);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oOR; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:281:5: 'xor'
            	        	    {
            	        	         MATCHT(68, &FOLLOW_68_in_expression1618);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oXOR; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_relation_in_expression1635);
            	        rel2=relation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	        {
            	             node->addRightTerm(op, rel2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end expression */

/**
 * $ANTLR start commandStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:286:1: commandStatement returns [ CommandNode *node] : id1= ID ( '--' id2= ID ( '=' expression )? )* ;
 */
static CommandNode *
commandStatement(pilwisscriptParser ctx)
{
    CommandNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    ExpressionNode * expression29;
    #undef	RETURN_TYPE_expression29
    #define	RETURN_TYPE_expression29 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new CommandNode();
    	QString flag;
    	ExpressionNode *expr;

    id1       = NULL;
    id2       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:292:2: (id1= ID ( '--' id2= ID ( '=' expression )? )* )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:293:2: id1= ID ( '--' id2= ID ( '=' expression )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1672);
            if  (HASEXCEPTION())
            {
                goto rulecommandStatementEx;
            }


            {
                 node->setCommand((char *)((id1->getText(id1))->chars)); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:294:2: ( '--' id2= ID ( '=' expression )? )*

            for (;;)
            {
                int alt35=2;
                switch ( LA(1) )
                {
                case 20:
                	{
                		alt35=1;
                	}
                    break;

                }

                switch (alt35)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:295:2: '--' id2= ID ( '=' expression )?
            	    {
            	         MATCHT(20, &FOLLOW_20_in_commandStatement1691);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1699);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        {
            	             flag = QString((char *)((id2->getText(id2))->chars));
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:297:2: ( '=' expression )?
            	        {
            	            int alt34=2;
            	            switch ( LA(1) )
            	            {
            	                case 27:
            	                	{
            	                		alt34=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt34)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:297:3: '=' expression
            	        	    {
            	        	         MATCHT(27, &FOLLOW_27_in_commandStatement1710);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_expression_in_commandStatement1713);
            	        	        expression29=expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        {
            	        	             expr = expression29
            	        	            ; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addOption(flag, expr); expr = 0;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecommandStatementEx; /* Prevent compiler warnings */
    rulecommandStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end commandStatement */

/**
 * $ANTLR start functionStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:303:1: functionStatement returns [ FunctionStatementNode *node] : ID '(' ( actualParameters )? ')' ;
 */
static FunctionStatementNode *
functionStatement(pilwisscriptParser ctx)
{
    FunctionStatementNode * node;


    pANTLR3_COMMON_TOKEN    ID30;
    ParametersNode * actualParameters31;
    #undef	RETURN_TYPE_actualParameters31
    #define	RETURN_TYPE_actualParameters31 ParametersNode *

    /* Initialize rule variables
     */

    ID30       = NULL;

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:304:2: ( ID '(' ( actualParameters )? ')' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:304:4: ID '(' ( actualParameters )? ')'
        {
            ID30 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_functionStatement1752);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            {
                 node = new FunctionStatementNode((char *)((ID30->getText(ID30))->chars)); 
            }


             MATCHT(14, &FOLLOW_14_in_functionStatement1762);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:305:6: ( actualParameters )?
            {
                int alt36=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 57:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:305:6: actualParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParameters_in_functionStatement1764);
            	        actualParameters31=actualParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->setParameters(actualParameters31
                ); 
            }


             MATCHT(15, &FOLLOW_15_in_functionStatement1774);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionStatementEx; /* Prevent compiler warnings */
    rulefunctionStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end functionStatement */

/**
 * $ANTLR start whileStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:309:1: whileStatement returns [ WhileNode *node] : 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' ;
 */
static WhileNode *
whileStatement(pilwisscriptParser ctx)
{
    WhileNode * node;


    ExpressionNode * expression32;
    #undef	RETURN_TYPE_expression32
    #define	RETURN_TYPE_expression32 ExpressionNode *

    ASTNode * statement33;
    #undef	RETURN_TYPE_statement33
    #define	RETURN_TYPE_statement33 ASTNode *

    BreakNode * breakStatement34;
    #undef	RETURN_TYPE_breakStatement34
    #define	RETURN_TYPE_breakStatement34 BreakNode *

    /* Initialize rule variables
     */


    	node = new WhileNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:313:2: ( 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:313:4: 'while' expression 'do' ( EOL )* ( ( statement | breakStatement ) ( EOL )* )* 'endwhile'
        {
             MATCHT(67, &FOLLOW_67_in_whileStatement1796);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1798);
            expression32=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


             MATCHT(43, &FOLLOW_43_in_whileStatement1800);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:313:28: ( EOL )*

            for (;;)
            {
                int alt37=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:313:29: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1803);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


            {
                 node->setCondition(expression32
                ); 
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:3: ( ( statement | breakStatement ) ( EOL )* )*

            for (;;)
            {
                int alt40=2;
                switch ( LA(1) )
                {
                case ID:
                case 39:
                case 42:
                case 49:
                case 53:
                case 67:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:5: ( statement | breakStatement ) ( EOL )*
            	    {
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:5: ( statement | breakStatement )
            	        {
            	            int alt38=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            case 42:
            	            case 49:
            	            case 53:
            	            case 67:
            	            	{
            	            		alt38=1;
            	            	}
            	                break;
            	            case 39:
            	            	{
            	            		alt38=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 38;
            	                EXCEPTION->state        = 0;


            	                goto rulewhileStatementEx;

            	            }

            	            switch (alt38)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:314:6: statement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_statement_in_whileStatement1814);
            	        	        statement33=statement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(statement33
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:316:3: breakStatement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_breakStatement_in_whileStatement1832);
            	        	        breakStatement34=breakStatement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(breakStatement34
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:317:5: ( EOL )*

            	        for (;;)
            	        {
            	            int alt39=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt39=1;
            	            	}
            	                break;

            	            }

            	            switch (alt39)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:317:6: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1845);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop39;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop39: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


             MATCHT(48, &FOLLOW_48_in_whileStatement1858);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end whileStatement */

/**
 * $ANTLR start breakStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:322:1: breakStatement returns [ BreakNode *node] : 'break' 'when' expression ;
 */
static BreakNode *
breakStatement(pilwisscriptParser ctx)
{
    BreakNode * node;


    ExpressionNode * expression35;
    #undef	RETURN_TYPE_expression35
    #define	RETURN_TYPE_expression35 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new BreakNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:326:2: ( 'break' 'when' expression )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:326:4: 'break' 'when' expression
        {
             MATCHT(39, &FOLLOW_39_in_breakStatement1879);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


             MATCHT(66, &FOLLOW_66_in_breakStatement1881);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_breakStatement1883);
            expression35=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            {
                 node->addChild(expression35
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end breakStatement */

/**
 * $ANTLR start formatPart
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:329:1: formatPart returns [ ASTNode *node] : '{' formatters '}' ;
 */
static ASTNode *
formatPart(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * formatters36;
    #undef	RETURN_TYPE_formatters36
    #define	RETURN_TYPE_formatters36 ASTNode *

    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:331:2: ( '{' formatters '}' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:331:4: '{' formatters '}'
        {
             MATCHT(69, &FOLLOW_69_in_formatPart1905);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            FOLLOWPUSH(FOLLOW_formatters_in_formatPart1907);
            formatters36=formatters(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


             MATCHT(70, &FOLLOW_70_in_formatPart1909);
            if  (HASEXCEPTION())
            {
                goto ruleformatPartEx;
            }


            {
                 node=formatters36
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleformatPartEx; /* Prevent compiler warnings */
    ruleformatPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatPart */

/**
 * $ANTLR start formatters
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:334:1: formatters returns [ ASTNode *node ] : ( formatter | formatter ';' formatters );
 */
static ASTNode *
formatters(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * formatter37;
    #undef	RETURN_TYPE_formatter37
    #define	RETURN_TYPE_formatter37 ASTNode *

    ASTNode * formatter38;
    #undef	RETURN_TYPE_formatter38
    #define	RETURN_TYPE_formatter38 ASTNode *

    /* Initialize rule variables
     */


    	node = new ASTNode("Formatters");

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:338:2: ( formatter | formatter ';' formatters )

            ANTLR3_UINT32 alt41;

            alt41=2;

            alt41 = cdfa41.predict(ctx, RECOGNIZER, ISTREAM, &cdfa41);
            if  (HASEXCEPTION())
            {
                goto ruleformattersEx;
            }

            switch (alt41)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:338:4: formatter
        	    {
        	        FOLLOWPUSH(FOLLOW_formatter_in_formatters1932);
        	        formatter37=formatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(formatter37
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:339:4: formatter ';' formatters
        	    {
        	        FOLLOWPUSH(FOLLOW_formatter_in_formatters1943);
        	        formatter38=formatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	         MATCHT(24, &FOLLOW_24_in_formatters1945);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_formatters_in_formatters1947);
        	        formatters(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformattersEx;
        	        }


        	        {
        	             node->addChild(formatter38
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformattersEx; /* Prevent compiler warnings */
    ruleformattersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatters */

/**
 * $ANTLR start formatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:342:1: formatter returns [ ASTNode *node] : ( dataFormatter | domainFormatter | grouper | reintepreter );
 */
static ASTNode *
formatter(pilwisscriptParser ctx)
{
    ASTNode * node;


    Formatter * dataFormatter39;
    #undef	RETURN_TYPE_dataFormatter39
    #define	RETURN_TYPE_dataFormatter39 Formatter *

    DomainFormatter * domainFormatter40;
    #undef	RETURN_TYPE_domainFormatter40
    #define	RETURN_TYPE_domainFormatter40 DomainFormatter *

    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:344:2: ( dataFormatter | domainFormatter | grouper | reintepreter )

            ANTLR3_UINT32 alt42;

            alt42=4;

            switch ( LA(1) )
            {
            case 49:
            	{
            		alt42=1;
            	}
                break;
            case 44:
            	{
            		alt42=2;
            	}
                break;
            case 52:
            	{
            		alt42=3;
            	}
                break;
            case 61:
            	{
            		alt42=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 42;
                EXCEPTION->state        = 0;


                goto ruleformatterEx;

            }

            switch (alt42)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:344:4: dataFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_dataFormatter_in_formatter1968);
        	        dataFormatter39=dataFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = dataFormatter39
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:345:4: domainFormatter
        	    {
        	        FOLLOWPUSH(FOLLOW_domainFormatter_in_formatter1978);
        	        domainFormatter40=domainFormatter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	        {
        	             node = domainFormatter40
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:346:4: grouper
        	    {
        	        FOLLOWPUSH(FOLLOW_grouper_in_formatter1987);
        	        grouper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:347:4: reintepreter
        	    {
        	        FOLLOWPUSH(FOLLOW_reintepreter_in_formatter1992);
        	        reintepreter(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatterEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformatterEx; /* Prevent compiler warnings */
    ruleformatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatter */

/**
 * $ANTLR start grouper
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:350:1: grouper : 'groupBy' '(' idlist ')' ;
 */
static void
grouper(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:350:9: ( 'groupBy' '(' idlist ')' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:350:11: 'groupBy' '(' idlist ')'
        {
             MATCHT(52, &FOLLOW_52_in_grouper2002);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


             MATCHT(14, &FOLLOW_14_in_grouper2004);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


            FOLLOWPUSH(FOLLOW_idlist_in_grouper2006);
            idlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


             MATCHT(15, &FOLLOW_15_in_grouper2007);
            if  (HASEXCEPTION())
            {
                goto rulegrouperEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulegrouperEx; /* Prevent compiler warnings */
    rulegrouperEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end grouper */

/**
 * $ANTLR start reintepreter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:353:1: reintepreter : ( 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')' | 'reinterpret(' STRING ')' );
 */
static void
reintepreter(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:354:2: ( 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')' | 'reinterpret(' STRING ')' )

            ANTLR3_UINT32 alt43;

            alt43=2;

            switch ( LA(1) )
            {
            case 61:
            	{
            		switch ( LA(2) )
            		{
            		case STRING:
            			{
            				alt43=2;
            			}
            		    break;
            		case ID:
            			{
            				alt43=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 43;
            		    EXCEPTION->state        = 1;


            		    goto rulereintepreterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 43;
                EXCEPTION->state        = 0;


                goto rulereintepreterEx;

            }

            switch (alt43)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:354:4: 'reinterpret(' idlist '=' ID ',' STRING ',' STRING ')'
        	    {
        	         MATCHT(61, &FOLLOW_61_in_reintepreter2018);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_idlist_in_reintepreter2020);
        	        idlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_reintepreter2022);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(ID, &FOLLOW_ID_in_reintepreter2024);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_reintepreter2026);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter2028);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_reintepreter2030);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter2032);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_reintepreter2034);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:355:4: 'reinterpret(' STRING ')'
        	    {
        	         MATCHT(61, &FOLLOW_61_in_reintepreter2039);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(STRING, &FOLLOW_STRING_in_reintepreter2041);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_reintepreter2043);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulereintepreterEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulereintepreterEx; /* Prevent compiler warnings */
    rulereintepreterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end reintepreter */

/**
 * $ANTLR start idlist
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:358:1: idlist : ( ID )+ ;
 */
static void
idlist(pilwisscriptParser ctx)
{
    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:358:8: ( ( ID )+ )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:358:10: ( ID )+
        {
            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:358:10: ( ID )+
            {
                int cnt44=0;

                for (;;)
                {
                    int alt44=2;
            	switch ( LA(1) )
            	{
            	case ID:
            		{
            			alt44=1;
            		}
            	    break;

            	}

            	switch (alt44)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:358:10: ID
            	        {
            	             MATCHT(ID, &FOLLOW_ID_in_idlist2054);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleidlistEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt44 >= 1 )
            		{
            		    goto loop44;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleidlistEx;
            	}
            	cnt44++;
                }
                loop44: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleidlistEx; /* Prevent compiler warnings */
    ruleidlistEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end idlist */

/**
 * $ANTLR start dataFormatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:362:1: dataFormatter returns [ Formatter *node] : ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' );
 */
static Formatter *
dataFormatter(pilwisscriptParser ctx)
{
    Formatter * node;


    pANTLR3_COMMON_TOKEN    ID41;
    pANTLR3_COMMON_TOKEN    STRING42;
    pANTLR3_COMMON_TOKEN    ID43;
    pANTLR3_COMMON_TOKEN    STRING44;
    pANTLR3_COMMON_TOKEN    STRING45;
    QString id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 QString

    /* Initialize rule variables
     */


    	node = new Formatter();

    ID41       = NULL;
    STRING42       = NULL;
    ID43       = NULL;
    STRING44       = NULL;
    STRING45       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:366:2: ( 'format' '(' ID ',' STRING ',' id1= datatype ')' | 'format' '(' ID ',' STRING ')' | 'format' '(' STRING ')' )

            ANTLR3_UINT32 alt45;

            alt45=3;

            switch ( LA(1) )
            {
            case 49:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 18:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 18:
            											{
            												alt45=1;
            											}
            										    break;
            										case 15:
            											{
            												alt45=2;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 45;
            										    EXCEPTION->state        = 6;


            										    goto ruledataFormatterEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 45;
            								    EXCEPTION->state        = 5;


            								    goto ruledataFormatterEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 45;
            						    EXCEPTION->state        = 3;


            						    goto ruledataFormatterEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						alt45=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 45;
            				    EXCEPTION->state        = 2;


            				    goto ruledataFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 45;
            		    EXCEPTION->state        = 1;


            		    goto ruledataFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 45;
                EXCEPTION->state        = 0;


                goto ruledataFormatterEx;

            }

            switch (alt45)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:366:4: 'format' '(' ID ',' STRING ',' id1= datatype ')'
        	    {
        	         MATCHT(49, &FOLLOW_49_in_dataFormatter2077);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter2079);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID41 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter2081);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter2083);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING42 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter2085);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter2087);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_datatype_in_dataFormatter2091);
        	        id1=datatype(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter2093);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setDataType(id1
        	            );
        	            							  node->setFormatNameSpace(new IDNode((char *)((ID41->getText(ID41))->chars)));
        	            							  node->setFormat((char *)((STRING42->getText(STRING42))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:369:4: 'format' '(' ID ',' STRING ')'
        	    {
        	         MATCHT(49, &FOLLOW_49_in_dataFormatter2100);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter2102);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        ID43 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dataFormatter2104);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_dataFormatter2106);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING44 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter2108);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter2110);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormatNameSpace(new IDNode((char *)((ID43->getText(ID43))->chars)));
        	            							  node->setFormat((char *)((STRING44->getText(STRING44))->chars));
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:371:4: 'format' '(' STRING ')'
        	    {
        	         MATCHT(49, &FOLLOW_49_in_dataFormatter2119);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_dataFormatter2121);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        STRING45 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_dataFormatter2123);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_dataFormatter2125);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledataFormatterEx;
        	        }


        	        {
        	             node->setFormat((char *)((STRING45->getText(STRING45))->chars)); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledataFormatterEx; /* Prevent compiler warnings */
    ruledataFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end dataFormatter */

/**
 * $ANTLR start datatype
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:374:1: datatype returns [ QString typeName] : ( 'gridcoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'table' );
 */
static QString
datatype(pilwisscriptParser ctx)
{
    QString typeName;


    /* Initialize rule variables
     */

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:375:2: ( 'gridcoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'table' )

            ANTLR3_UINT32 alt46;

            alt46=5;

            switch ( LA(1) )
            {
            case 51:
            	{
            		alt46=1;
            	}
                break;
            case 60:
            	{
            		alt46=2;
            	}
                break;
            case 55:
            	{
            		alt46=3;
            	}
                break;
            case 59:
            	{
            		alt46=4;
            	}
                break;
            case 63:
            	{
            		alt46=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 46;
                EXCEPTION->state        = 0;


                goto ruledatatypeEx;

            }

            switch (alt46)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:375:4: 'gridcoverage'
        	    {
        	         MATCHT(51, &FOLLOW_51_in_datatype2144);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "gridcoverage"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:376:4: 'polygoncoverage'
        	    {
        	         MATCHT(60, &FOLLOW_60_in_datatype2154);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "polygoncoverage"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:377:4: 'linecoverage'
        	    {
        	         MATCHT(55, &FOLLOW_55_in_datatype2164);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "linecoverage";
        	        }


        	    }
        	    break;
        	case 4:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:378:4: 'pointcoverage'
        	    {
        	         MATCHT(59, &FOLLOW_59_in_datatype2174);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "pointcoverage"; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:379:4: 'table'
        	    {
        	         MATCHT(63, &FOLLOW_63_in_datatype2184);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "table"; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledatatypeEx; /* Prevent compiler warnings */
    ruledatatypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return typeName;
}
/* $ANTLR end datatype */

/**
 * $ANTLR start domainFormatter
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:382:1: domainFormatter returns [ DomainFormatter *node] : ( 'dom' '=' ID | 'dom' '=' valrangePart );
 */
static DomainFormatter *
domainFormatter(pilwisscriptParser ctx)
{
    DomainFormatter * node;


    pANTLR3_COMMON_TOKEN    ID46;
    ValueRangeNode * valrangePart47;
    #undef	RETURN_TYPE_valrangePart47
    #define	RETURN_TYPE_valrangePart47 ValueRangeNode *

    /* Initialize rule variables
     */


    	node = new DomainFormatter();

    ID46       = NULL;

    {
        {
            //  D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:386:2: ( 'dom' '=' ID | 'dom' '=' valrangePart )

            ANTLR3_UINT32 alt47;

            alt47=2;

            switch ( LA(1) )
            {
            case 44:
            	{
            		switch ( LA(2) )
            		{
            		case 27:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						alt47=1;
            					}
            				    break;
            				case 65:
            					{
            						alt47=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 47;
            				    EXCEPTION->state        = 2;


            				    goto ruledomainFormatterEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 47;
            		    EXCEPTION->state        = 1;


            		    goto ruledomainFormatterEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 47;
                EXCEPTION->state        = 0;


                goto ruledomainFormatterEx;

            }

            switch (alt47)
            {
        	case 1:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:386:4: 'dom' '=' ID
        	    {
        	         MATCHT(44, &FOLLOW_44_in_domainFormatter2211);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_domainFormatter2213);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        ID46 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_domainFormatter2215);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setDomainId(new IDNode((char *)((ID46->getText(ID46))->chars)));
        	        }


        	    }
        	    break;
        	case 2:
        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:387:4: 'dom' '=' valrangePart
        	    {
        	         MATCHT(44, &FOLLOW_44_in_domainFormatter2225);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_domainFormatter2227);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_valrangePart_in_domainFormatter2229);
        	        valrangePart47=valrangePart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainFormatterEx;
        	        }


        	        {
        	             node->setValueRange(valrangePart47
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledomainFormatterEx; /* Prevent compiler warnings */
    ruledomainFormatterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end domainFormatter */

/**
 * $ANTLR start valrangePart
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:390:1: valrangePart returns [ ValueRangeNode *node] : 'vr' '=' ;
 */
static ValueRangeNode *
valrangePart(pilwisscriptParser ctx)
{
    ValueRangeNode * node;


    /* Initialize rule variables
     */

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:391:2: ( 'vr' '=' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:391:4: 'vr' '='
        {
             MATCHT(65, &FOLLOW_65_in_valrangePart2249);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


             MATCHT(27, &FOLLOW_27_in_valrangePart2251);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalrangePartEx; /* Prevent compiler warnings */
    rulevalrangePartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end valrangePart */

/**
 * $ANTLR start ifStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:394:1: ifStatement returns [ Ifnode *node] : 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' ;
 */
static Ifnode *
ifStatement(pilwisscriptParser ctx)
{
    Ifnode * node;


    ASTNode * result;
    #undef	RETURN_TYPE_result
    #define	RETURN_TYPE_result ASTNode *

    ASTNode * result2;
    #undef	RETURN_TYPE_result2
    #define	RETURN_TYPE_result2 ASTNode *

    ExpressionNode * expression48;
    #undef	RETURN_TYPE_expression48
    #define	RETURN_TYPE_expression48 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new Ifnode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:2: ( 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif' )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:4: 'if' expression ( EOL )? 'then' ( EOL )* (result= statement ( EOL )* )+ ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )? 'endif'
        {
             MATCHT(53, &FOLLOW_53_in_ifStatement2273);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_ifStatement2275);
            expression48=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:20: ( EOL )?
            {
                int alt48=2;
                switch ( LA(1) )
                {
                    case EOL:
                    	{
                    		alt48=1;
                    	}
                        break;
                }

                switch (alt48)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:21: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2278);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(64, &FOLLOW_64_in_ifStatement2282);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:34: ( EOL )*

            for (;;)
            {
                int alt49=2;
                switch ( LA(1) )
                {
                case EOL:
                	{
                		alt49=1;
                	}
                    break;

                }

                switch (alt49)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:34: EOL
            	    {
            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2284);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:39: (result= statement ( EOL )* )+
            {
                int cnt51=0;

                for (;;)
                {
                    int alt51=2;
            	switch ( LA(1) )
            	{
            	case ID:
            	case 42:
            	case 49:
            	case 53:
            	case 67:
            		{
            			alt51=1;
            		}
            	    break;

            	}

            	switch (alt51)
            	{
            	    case 1:
            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:40: result= statement ( EOL )*
            	        {
            	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2290);
            	            result=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleifStatementEx;
            	            }


            	            {
            	                node->addThen(result
            	                );
            	            }


            	            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:88: ( EOL )*

            	            for (;;)
            	            {
            	                int alt50=2;
            	                switch ( LA(1) )
            	                {
            	                case EOL:
            	                	{
            	                		alt50=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt50)
            	                {
            	            	case 1:
            	            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:398:88: EOL
            	            	    {
            	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2294);
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleifStatementEx;
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop50;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop50: ; /* Jump out to here if this rule does not match */


            	        }
            	        break;

            	    default:

            		if ( cnt51 >= 1 )
            		{
            		    goto loop51;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleifStatementEx;
            	}
            	cnt51++;
                }
                loop51: ;	/* Jump to here if this rule does not match */
            }

            {
                 node->setCondition(expression48
                );  
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:3: ( 'else' ( EOL )* (result2= statement ( EOL )* )+ )?
            {
                int alt55=2;
                switch ( LA(1) )
                {
                    case 45:
                    	{
                    		alt55=1;
                    	}
                        break;
                }

                switch (alt55)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:4: 'else' ( EOL )* (result2= statement ( EOL )* )+
            	    {
            	         MATCHT(45, &FOLLOW_45_in_ifStatement2306);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:11: ( EOL )*

            	        for (;;)
            	        {
            	            int alt52=2;
            	            switch ( LA(1) )
            	            {
            	            case EOL:
            	            	{
            	            		alt52=1;
            	            	}
            	                break;

            	            }

            	            switch (alt52)
            	            {
            	        	case 1:
            	        	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:11: EOL
            	        	    {
            	        	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2308);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop52;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop52: ; /* Jump out to here if this rule does not match */


            	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:16: (result2= statement ( EOL )* )+
            	        {
            	            int cnt54=0;

            	            for (;;)
            	            {
            	                int alt54=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case ID:
            	        	case 42:
            	        	case 49:
            	        	case 53:
            	        	case 67:
            	        		{
            	        			alt54=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt54)
            	        	{
            	        	    case 1:
            	        	        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:17: result2= statement ( EOL )*
            	        	        {
            	        	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement2314);
            	        	            result2=statement(ctx);

            	        	            FOLLOWPOP();
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleifStatementEx;
            	        	            }


            	        	            {
            	        	                node->addElse(result2
            	        	                 ); 
            	        	            }


            	        	            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:70: ( EOL )*

            	        	            for (;;)
            	        	            {
            	        	                int alt53=2;
            	        	                switch ( LA(1) )
            	        	                {
            	        	                case EOL:
            	        	                	{
            	        	                		alt53=1;
            	        	                	}
            	        	                    break;

            	        	                }

            	        	                switch (alt53)
            	        	                {
            	        	            	case 1:
            	        	            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:399:70: EOL
            	        	            	    {
            	        	            	         MATCHT(EOL, &FOLLOW_EOL_in_ifStatement2319);
            	        	            	        if  (HASEXCEPTION())
            	        	            	        {
            	        	            	            goto ruleifStatementEx;
            	        	            	        }


            	        	            	    }
            	        	            	    break;

            	        	            	default:
            	        	            	    goto loop53;	/* break out of the loop */
            	        	            	    break;
            	        	                }
            	        	            }
            	        	            loop53: ; /* Jump out to here if this rule does not match */


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt54 >= 1 )
            	        		{
            	        		    goto loop54;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleifStatementEx;
            	        	}
            	        	cnt54++;
            	            }
            	            loop54: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

             MATCHT(47, &FOLLOW_47_in_ifStatement2331);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end ifStatement */

/**
 * $ANTLR start returnStatement
 * D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:403:1: returnStatement returns [ ReturnNode *node] : 'return' ( expression )? ;
 */
static ReturnNode *
returnStatement(pilwisscriptParser ctx)
{
    ReturnNode * node;


    ExpressionNode * expression49;
    #undef	RETURN_TYPE_expression49
    #define	RETURN_TYPE_expression49 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ReturnNode();

    {
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:407:2: ( 'return' ( expression )? )
        // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:407:4: 'return' ( expression )?
        {
             MATCHT(62, &FOLLOW_62_in_returnStatement2351);
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }


            // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:407:13: ( expression )?
            {
                int alt56=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 57:
                    	{
                    		alt56=1;
                    	}
                        break;
                }

                switch (alt56)
                {
            	case 1:
            	    // D:\\Projects\\Ilwis\\Ilwis4\\projects\\IlwisCore\\ilwisscript\\parserlexer\\ilwisscript.g:407:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2353);
            	        expression49=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                node->addChild(expression49
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end returnStatement */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
