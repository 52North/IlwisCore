/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g
 *     -                            On : 2013-05-08 21:50:11
 *     -                for the parser : ilwisscriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ilwisscriptParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pilwisscriptParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pilwisscriptParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pilwisscriptParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pilwisscriptParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ilwisscriptParserTokenNames[62+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "' -'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "':='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'Boolean'",
        (pANTLR3_UINT8) "'Integer'",
        (pANTLR3_UINT8) "'Real'",
        (pANTLR3_UINT8) "'String'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'and'",
        (pANTLR3_UINT8) "'begin'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'constant'",
        (pANTLR3_UINT8) "'declare'",
        (pANTLR3_UINT8) "'dom'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'elsif'",
        (pANTLR3_UINT8) "'endfunction'",
        (pANTLR3_UINT8) "'endif'",
        (pANTLR3_UINT8) "'endwhile'",
        (pANTLR3_UINT8) "'format'",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'gridcoverage'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'linecoverage'",
        (pANTLR3_UINT8) "'mod'",
        (pANTLR3_UINT8) "'not'",
        (pANTLR3_UINT8) "'or'",
        (pANTLR3_UINT8) "'pointcoverage'",
        (pANTLR3_UINT8) "'polygoncoverage'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'table'",
        (pANTLR3_UINT8) "'then'",
        (pANTLR3_UINT8) "'vr'",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'xor'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 ASTNode *
	script    (pilwisscriptParser ctx);
static 
 ASTNode *
	scriptLine    (pilwisscriptParser ctx);
static 
 VariableNode *
	variable    (pilwisscriptParser ctx);
static 
 VariableNode *
	constant    (pilwisscriptParser ctx);
static 
 quint64
	type    (pilwisscriptParser ctx);
static 
 ASTNode *
	statement    (pilwisscriptParser ctx);
static 
 AssignmentNode *
	assignmentStatement    (pilwisscriptParser ctx);
static 
 ParametersNode *
	actualParameters    (pilwisscriptParser ctx);
static 
 FunctionNode *
	function    (pilwisscriptParser ctx);
static 
 TermNode *
	term    (pilwisscriptParser ctx);
static 
 RangeDefinitionNode *
	rangeDef    (pilwisscriptParser ctx);
static 
 TermNode *
	negation    (pilwisscriptParser ctx);
static 
 TermNode *
	unary    (pilwisscriptParser ctx);
static 
 MultiplicationNode *
	mult    (pilwisscriptParser ctx);
static 
 AddNode *
	add    (pilwisscriptParser ctx);
static 
 RelationNode *
	relation    (pilwisscriptParser ctx);
static 
 ExpressionNode *
	expression    (pilwisscriptParser ctx);
static 
 CommandNode *
	commandStatement    (pilwisscriptParser ctx);
static 
 FunctionStatementNode *
	functionStatement    (pilwisscriptParser ctx);
static 
 WhileNode *
	whileStatement    (pilwisscriptParser ctx);
static 
 BreakNode *
	breakStatement    (pilwisscriptParser ctx);
static 
 ModifierPart *
	typeModifierPart    (pilwisscriptParser ctx);
static 
 ModifierPart *
	modifierPart    (pilwisscriptParser ctx);
static 
 FormatNode *
	formatModifier    (pilwisscriptParser ctx);
static 
 QString
	datatype    (pilwisscriptParser ctx);
static 
 DomPartNode *
	domPart    (pilwisscriptParser ctx);
static 
 ValueRangeNode *
	valrangePart    (pilwisscriptParser ctx);
static 
 ASTNode *
	ifStatement    (pilwisscriptParser ctx);
static 
 ReturnNode *
	returnStatement    (pilwisscriptParser ctx);
static void	ilwisscriptParserFree(pilwisscriptParser ctx);
static void     ilwisscriptParserReset (pilwisscriptParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ilwisscriptParserNewSSD(instream, NULL);
}

/** \brief Create a new ilwisscriptParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pilwisscriptParser
ilwisscriptParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pilwisscriptParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pilwisscriptParser) ANTLR3_CALLOC(1, sizeof(ilwisscriptParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ilwisscriptParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ilwisscriptParser interface
     */
    ctx->script	= script;
    ctx->scriptLine	= scriptLine;
    ctx->variable	= variable;
    ctx->constant	= constant;
    ctx->type	= type;
    ctx->statement	= statement;
    ctx->assignmentStatement	= assignmentStatement;
    ctx->actualParameters	= actualParameters;
    ctx->function	= function;
    ctx->term	= term;
    ctx->rangeDef	= rangeDef;
    ctx->negation	= negation;
    ctx->unary	= unary;
    ctx->mult	= mult;
    ctx->add	= add;
    ctx->relation	= relation;
    ctx->expression	= expression;
    ctx->commandStatement	= commandStatement;
    ctx->functionStatement	= functionStatement;
    ctx->whileStatement	= whileStatement;
    ctx->breakStatement	= breakStatement;
    ctx->typeModifierPart	= typeModifierPart;
    ctx->modifierPart	= modifierPart;
    ctx->formatModifier	= formatModifier;
    ctx->datatype	= datatype;
    ctx->domPart	= domPart;
    ctx->valrangePart	= valrangePart;
    ctx->ifStatement	= ifStatement;
    ctx->returnStatement	= returnStatement;
    ctx->free			= ilwisscriptParserFree;
    ctx->reset			= ilwisscriptParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ilwisscriptParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ilwisscriptParserReset (pilwisscriptParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ilwisscriptParserFree(pilwisscriptParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ilwisscriptParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scriptLine_in_script42  */
static	ANTLR3_BITWORD FOLLOW_scriptLine_in_script42_bits[]	= { ANTLR3_UINT64_LIT(0x4005818000000222) };
static  ANTLR3_BITSET_LIST FOLLOW_scriptLine_in_script42	= { FOLLOW_scriptLine_in_script42_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_scriptLine70  */
static	ANTLR3_BITWORD FOLLOW_statement_in_scriptLine70_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_scriptLine70	= { FOLLOW_statement_in_scriptLine70_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine79  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine79	= { FOLLOW_24_in_scriptLine79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_scriptLine84  */
static	ANTLR3_BITWORD FOLLOW_variable_in_scriptLine84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_scriptLine84	= { FOLLOW_variable_in_scriptLine84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine93  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine93_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine93	= { FOLLOW_24_in_scriptLine93_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_scriptLine98  */
static	ANTLR3_BITWORD FOLLOW_constant_in_scriptLine98_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_scriptLine98	= { FOLLOW_constant_in_scriptLine98_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine106  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine106	= { FOLLOW_24_in_scriptLine106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_scriptLine111  */
static	ANTLR3_BITWORD FOLLOW_function_in_scriptLine111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_scriptLine111	= { FOLLOW_function_in_scriptLine111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_scriptLine120  */
static	ANTLR3_BITWORD FOLLOW_24_in_scriptLine120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_scriptLine120	= { FOLLOW_24_in_scriptLine120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_scriptLine126  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_scriptLine126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_scriptLine126	= { FOLLOW_EOL_in_scriptLine126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_variable146  */
static	ANTLR3_BITWORD FOLLOW_40_in_variable146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_variable146	= { FOLLOW_40_in_variable146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable152  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000440000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable152	= { FOLLOW_ID_in_variable152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_variable164  */
static	ANTLR3_BITWORD FOLLOW_18_in_variable164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_variable164	= { FOLLOW_18_in_variable164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable171  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000440000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable171	= { FOLLOW_ID_in_variable171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_variable187  */
static	ANTLR3_BITWORD FOLLOW_22_in_variable187_bits[]	= { ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_variable187	= { FOLLOW_22_in_variable187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable191  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable191	= { FOLLOW_type_in_variable191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_variable207  */
static	ANTLR3_BITWORD FOLLOW_23_in_variable207_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_variable207	= { FOLLOW_23_in_variable207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_variable212  */
static	ANTLR3_BITWORD FOLLOW_expression_in_variable212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_variable212	= { FOLLOW_expression_in_variable212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_constant244  */
static	ANTLR3_BITWORD FOLLOW_39_in_constant244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_constant244	= { FOLLOW_39_in_constant244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_constant250  */
static	ANTLR3_BITWORD FOLLOW_ID_in_constant250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_constant250	= { FOLLOW_ID_in_constant250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_constant260  */
static	ANTLR3_BITWORD FOLLOW_22_in_constant260_bits[]	= { ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_constant260	= { FOLLOW_22_in_constant260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_constant265  */
static	ANTLR3_BITWORD FOLLOW_type_in_constant265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_constant265	= { FOLLOW_type_in_constant265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_constant277  */
static	ANTLR3_BITWORD FOLLOW_23_in_constant277_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_constant277	= { FOLLOW_23_in_constant277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_constant282  */
static	ANTLR3_BITWORD FOLLOW_expression_in_constant282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_constant282	= { FOLLOW_expression_in_constant282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_type305  */
static	ANTLR3_BITWORD FOLLOW_31_in_type305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_type305	= { FOLLOW_31_in_type305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_type316  */
static	ANTLR3_BITWORD FOLLOW_30_in_type316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_type316	= { FOLLOW_30_in_type316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_type327  */
static	ANTLR3_BITWORD FOLLOW_33_in_type327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_type327	= { FOLLOW_33_in_type327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_type338  */
static	ANTLR3_BITWORD FOLLOW_32_in_type338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_type338	= { FOLLOW_32_in_type338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentStatement_in_statement362  */
static	ANTLR3_BITWORD FOLLOW_assignmentStatement_in_statement362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentStatement_in_statement362	= { FOLLOW_assignmentStatement_in_statement362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement372  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement372	= { FOLLOW_ifStatement_in_statement372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_statement383  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_statement383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_statement383	= { FOLLOW_whileStatement_in_statement383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionStatement_in_statement394  */
static	ANTLR3_BITWORD FOLLOW_functionStatement_in_statement394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionStatement_in_statement394	= { FOLLOW_functionStatement_in_statement394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_commandStatement_in_statement404  */
static	ANTLR3_BITWORD FOLLOW_commandStatement_in_statement404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_commandStatement_in_statement404	= { FOLLOW_commandStatement_in_statement404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatModifier_in_statement414  */
static	ANTLR3_BITWORD FOLLOW_formatModifier_in_statement414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatModifier_in_statement414	= { FOLLOW_formatModifier_in_statement414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_assignmentStatement440  */
static	ANTLR3_BITWORD FOLLOW_ID_in_assignmentStatement440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008800000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_assignmentStatement440	= { FOLLOW_ID_in_assignmentStatement440_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeModifierPart_in_assignmentStatement453  */
static	ANTLR3_BITWORD FOLLOW_typeModifierPart_in_assignmentStatement453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008800000) };
static  ANTLR3_BITSET_LIST FOLLOW_typeModifierPart_in_assignmentStatement453	= { FOLLOW_typeModifierPart_in_assignmentStatement453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentStatement468  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentStatement468_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentStatement468	= { FOLLOW_set_in_assignmentStatement468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_assignmentStatement485  */
static	ANTLR3_BITWORD FOLLOW_expression_in_assignmentStatement485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_assignmentStatement485	= { FOLLOW_expression_in_assignmentStatement485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters516  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters516	= { FOLLOW_expression_in_actualParameters516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_actualParameters530  */
static	ANTLR3_BITWORD FOLLOW_18_in_actualParameters530_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_actualParameters530	= { FOLLOW_18_in_actualParameters530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_actualParameters539  */
static	ANTLR3_BITWORD FOLLOW_expression_in_actualParameters539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_actualParameters539	= { FOLLOW_expression_in_actualParameters539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_function565  */
static	ANTLR3_BITWORD FOLLOW_48_in_function565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_function565	= { FOLLOW_48_in_function565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function567  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function567	= { FOLLOW_ID_in_function567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_function577  */
static	ANTLR3_BITWORD FOLLOW_14_in_function577_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_function577	= { FOLLOW_14_in_function577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_function582  */
static	ANTLR3_BITWORD FOLLOW_variable_in_function582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_function582	= { FOLLOW_variable_in_function582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_function598  */
static	ANTLR3_BITWORD FOLLOW_18_in_function598_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_function598	= { FOLLOW_18_in_function598_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_function602  */
static	ANTLR3_BITWORD FOLLOW_variable_in_function602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000048000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_function602	= { FOLLOW_variable_in_function602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_function617  */
static	ANTLR3_BITWORD FOLLOW_15_in_function617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_function617	= { FOLLOW_15_in_function617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function619  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function619_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function619	= { FOLLOW_EOL_in_function619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_function626  */
static	ANTLR3_BITWORD FOLLOW_37_in_function626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_function626	= { FOLLOW_37_in_function626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function628  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function628_bits[]	= { ANTLR3_UINT64_LIT(0x4204900000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function628	= { FOLLOW_EOL_in_function628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function633  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function633	= { FOLLOW_statement_in_function633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_function644  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_function644_bits[]	= { ANTLR3_UINT64_LIT(0x4204900000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_function644	= { FOLLOW_EOL_in_function644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_function652  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_function652_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_function652	= { FOLLOW_returnStatement_in_function652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_function667  */
static	ANTLR3_BITWORD FOLLOW_44_in_function667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_function667	= { FOLLOW_44_in_function667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term689  */
static	ANTLR3_BITWORD FOLLOW_14_in_term689_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term689	= { FOLLOW_14_in_term689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_term691  */
static	ANTLR3_BITWORD FOLLOW_expression_in_term691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_term691	= { FOLLOW_expression_in_term691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term693  */
static	ANTLR3_BITWORD FOLLOW_15_in_term693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term693	= { FOLLOW_15_in_term693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_term704  */
static	ANTLR3_BITWORD FOLLOW_INT_in_term704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_term704	= { FOLLOW_INT_in_term704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_term716  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_term716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_term716	= { FOLLOW_FLOAT_in_term716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_term728  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_term728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_term728	= { FOLLOW_STRING_in_term728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term744  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term744	= { FOLLOW_ID_in_term744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_term746  */
static	ANTLR3_BITWORD FOLLOW_14_in_term746_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_term746	= { FOLLOW_14_in_term746_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_term758  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_term758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_term758	= { FOLLOW_actualParameters_in_term758_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_term770  */
static	ANTLR3_BITWORD FOLLOW_15_in_term770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_term770	= { FOLLOW_15_in_term770_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term785  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term785	= { FOLLOW_ID_in_term785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rangeDef_in_term790  */
static	ANTLR3_BITWORD FOLLOW_rangeDef_in_term790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_rangeDef_in_term790	= { FOLLOW_rangeDef_in_term790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_term805  */
static	ANTLR3_BITWORD FOLLOW_ID_in_term805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_term805	= { FOLLOW_ID_in_term805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_rangeDef830  */
static	ANTLR3_BITWORD FOLLOW_34_in_rangeDef830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_rangeDef830	= { FOLLOW_34_in_rangeDef830_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_rangeDef834  */
static	ANTLR3_BITWORD FOLLOW_INT_in_rangeDef834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_rangeDef834	= { FOLLOW_INT_in_rangeDef834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_rangeDef838  */
static	ANTLR3_BITWORD FOLLOW_INT_in_rangeDef838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_rangeDef838	= { FOLLOW_INT_in_rangeDef838_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_rangeDef840  */
static	ANTLR3_BITWORD FOLLOW_18_in_rangeDef840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_rangeDef840	= { FOLLOW_18_in_rangeDef840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_rangeDef844  */
static	ANTLR3_BITWORD FOLLOW_INT_in_rangeDef844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_rangeDef844	= { FOLLOW_INT_in_rangeDef844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_rangeDef848  */
static	ANTLR3_BITWORD FOLLOW_INT_in_rangeDef848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_rangeDef848	= { FOLLOW_INT_in_rangeDef848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_rangeDef850  */
static	ANTLR3_BITWORD FOLLOW_35_in_rangeDef850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_rangeDef850	= { FOLLOW_35_in_rangeDef850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_rangeDef858  */
static	ANTLR3_BITWORD FOLLOW_34_in_rangeDef858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_rangeDef858	= { FOLLOW_34_in_rangeDef858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_rangeDef860  */
static	ANTLR3_BITWORD FOLLOW_ID_in_rangeDef860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_rangeDef860	= { FOLLOW_ID_in_rangeDef860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_rangeDef862  */
static	ANTLR3_BITWORD FOLLOW_35_in_rangeDef862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_rangeDef862	= { FOLLOW_35_in_rangeDef862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_rangeDef874  */
static	ANTLR3_BITWORD FOLLOW_34_in_rangeDef874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_rangeDef874	= { FOLLOW_34_in_rangeDef874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_rangeDef876  */
static	ANTLR3_BITWORD FOLLOW_INT_in_rangeDef876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_rangeDef876	= { FOLLOW_INT_in_rangeDef876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_rangeDef878  */
static	ANTLR3_BITWORD FOLLOW_35_in_rangeDef878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_rangeDef878	= { FOLLOW_35_in_rangeDef878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_negation906  */
static	ANTLR3_BITWORD FOLLOW_53_in_negation906_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_negation906	= { FOLLOW_53_in_negation906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_negation922  */
static	ANTLR3_BITWORD FOLLOW_term_in_negation922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_negation922	= { FOLLOW_term_in_negation922_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_unary950  */
static	ANTLR3_BITWORD FOLLOW_17_in_unary950_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_unary950	= { FOLLOW_17_in_unary950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_unary962  */
static	ANTLR3_BITWORD FOLLOW_19_in_unary962_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000004F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_unary962	= { FOLLOW_19_in_unary962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_negation_in_unary978  */
static	ANTLR3_BITWORD FOLLOW_negation_in_unary978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_negation_in_unary978	= { FOLLOW_negation_in_unary978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1004  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1004_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000110002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1004	= { FOLLOW_unary_in_mult1004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_mult1019  */
static	ANTLR3_BITWORD FOLLOW_16_in_mult1019_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_mult1019	= { FOLLOW_16_in_mult1019_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_mult1032  */
static	ANTLR3_BITWORD FOLLOW_20_in_mult1032_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_mult1032	= { FOLLOW_20_in_mult1032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_mult1044  */
static	ANTLR3_BITWORD FOLLOW_52_in_mult1044_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_mult1044	= { FOLLOW_52_in_mult1044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_in_mult1061  */
static	ANTLR3_BITWORD FOLLOW_unary_in_mult1061_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000110002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_in_mult1061	= { FOLLOW_unary_in_mult1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1096  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1096_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1096	= { FOLLOW_mult_in_add1096_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_add1111  */
static	ANTLR3_BITWORD FOLLOW_17_in_add1111_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_add1111	= { FOLLOW_17_in_add1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_add1127  */
static	ANTLR3_BITWORD FOLLOW_19_in_add1127_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_add1127	= { FOLLOW_19_in_add1127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mult_in_add1147  */
static	ANTLR3_BITWORD FOLLOW_mult_in_add1147_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000A0002) };
static  ANTLR3_BITSET_LIST FOLLOW_mult_in_add1147	= { FOLLOW_mult_in_add1147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1180  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1180_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E200002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1180	= { FOLLOW_add_in_relation1180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_relation1198  */
static	ANTLR3_BITWORD FOLLOW_27_in_relation1198_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_relation1198	= { FOLLOW_27_in_relation1198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_relation1212  */
static	ANTLR3_BITWORD FOLLOW_21_in_relation1212_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_relation1212	= { FOLLOW_21_in_relation1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_relation1226  */
static	ANTLR3_BITWORD FOLLOW_25_in_relation1226_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_relation1226	= { FOLLOW_25_in_relation1226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_relation1240  */
static	ANTLR3_BITWORD FOLLOW_26_in_relation1240_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_relation1240	= { FOLLOW_26_in_relation1240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_relation1254  */
static	ANTLR3_BITWORD FOLLOW_29_in_relation1254_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_relation1254	= { FOLLOW_29_in_relation1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_relation1268  */
static	ANTLR3_BITWORD FOLLOW_28_in_relation1268_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_relation1268	= { FOLLOW_28_in_relation1268_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_in_relation1286  */
static	ANTLR3_BITWORD FOLLOW_add_in_relation1286_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E200002) };
static  ANTLR3_BITSET_LIST FOLLOW_add_in_relation1286	= { FOLLOW_add_in_relation1286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1320  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1320_bits[]	= { ANTLR3_UINT64_LIT(0x8040001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1320	= { FOLLOW_relation_in_expression1320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_expression1340  */
static	ANTLR3_BITWORD FOLLOW_36_in_expression1340_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_expression1340	= { FOLLOW_36_in_expression1340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_expression1354  */
static	ANTLR3_BITWORD FOLLOW_54_in_expression1354_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_expression1354	= { FOLLOW_54_in_expression1354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expression1368  */
static	ANTLR3_BITWORD FOLLOW_63_in_expression1368_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expression1368	= { FOLLOW_63_in_expression1368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_expression1385  */
static	ANTLR3_BITWORD FOLLOW_relation_in_expression1385_bits[]	= { ANTLR3_UINT64_LIT(0x8040001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_expression1385	= { FOLLOW_relation_in_expression1385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1422  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1422	= { FOLLOW_ID_in_commandStatement1422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_commandStatement1441  */
static	ANTLR3_BITWORD FOLLOW_13_in_commandStatement1441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_commandStatement1441	= { FOLLOW_13_in_commandStatement1441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_commandStatement1449  */
static	ANTLR3_BITWORD FOLLOW_ID_in_commandStatement1449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008002002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_commandStatement1449	= { FOLLOW_ID_in_commandStatement1449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_commandStatement1460  */
static	ANTLR3_BITWORD FOLLOW_27_in_commandStatement1460_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_commandStatement1460	= { FOLLOW_27_in_commandStatement1460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_commandStatement1463  */
static	ANTLR3_BITWORD FOLLOW_expression_in_commandStatement1463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_commandStatement1463	= { FOLLOW_expression_in_commandStatement1463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_functionStatement1502  */
static	ANTLR3_BITWORD FOLLOW_ID_in_functionStatement1502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_functionStatement1502	= { FOLLOW_ID_in_functionStatement1502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_functionStatement1512  */
static	ANTLR3_BITWORD FOLLOW_14_in_functionStatement1512_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000ACF00) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_functionStatement1512	= { FOLLOW_14_in_functionStatement1512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_actualParameters_in_functionStatement1514  */
static	ANTLR3_BITWORD FOLLOW_actualParameters_in_functionStatement1514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_actualParameters_in_functionStatement1514	= { FOLLOW_actualParameters_in_functionStatement1514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_functionStatement1524  */
static	ANTLR3_BITWORD FOLLOW_15_in_functionStatement1524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_functionStatement1524	= { FOLLOW_15_in_functionStatement1524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_whileStatement1546  */
static	ANTLR3_BITWORD FOLLOW_62_in_whileStatement1546_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_whileStatement1546	= { FOLLOW_62_in_whileStatement1546_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1548  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1548	= { FOLLOW_expression_in_whileStatement1548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1550  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1550_bits[]	= { ANTLR3_UINT64_LIT(0x4004C04000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1550	= { FOLLOW_EOL_in_whileStatement1550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1561  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1561	= { FOLLOW_statement_in_whileStatement1561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_whileStatement1571  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_whileStatement1571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_whileStatement1571	= { FOLLOW_breakStatement_in_whileStatement1571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_whileStatement1582  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_whileStatement1582_bits[]	= { ANTLR3_UINT64_LIT(0x4004C04000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_whileStatement1582	= { FOLLOW_EOL_in_whileStatement1582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_whileStatement1591  */
static	ANTLR3_BITWORD FOLLOW_46_in_whileStatement1591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_whileStatement1591	= { FOLLOW_46_in_whileStatement1591_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_breakStatement1612  */
static	ANTLR3_BITWORD FOLLOW_38_in_breakStatement1612_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_breakStatement1612	= { FOLLOW_38_in_breakStatement1612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_breakStatement1614  */
static	ANTLR3_BITWORD FOLLOW_61_in_breakStatement1614_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_breakStatement1614	= { FOLLOW_61_in_breakStatement1614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_breakStatement1616  */
static	ANTLR3_BITWORD FOLLOW_expression_in_breakStatement1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_breakStatement1616	= { FOLLOW_expression_in_breakStatement1616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_typeModifierPart1641  */
static	ANTLR3_BITWORD FOLLOW_64_in_typeModifierPart1641_bits[]	= { ANTLR3_UINT64_LIT(0x0000820000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_typeModifierPart1641	= { FOLLOW_64_in_typeModifierPart1641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_modifierPart_in_typeModifierPart1643  */
static	ANTLR3_BITWORD FOLLOW_modifierPart_in_typeModifierPart1643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_modifierPart_in_typeModifierPart1643	= { FOLLOW_modifierPart_in_typeModifierPart1643_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_typeModifierPart1644  */
static	ANTLR3_BITWORD FOLLOW_65_in_typeModifierPart1644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_typeModifierPart1644	= { FOLLOW_65_in_typeModifierPart1644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatModifier_in_modifierPart1669  */
static	ANTLR3_BITWORD FOLLOW_formatModifier_in_modifierPart1669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formatModifier_in_modifierPart1669	= { FOLLOW_formatModifier_in_modifierPart1669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domPart_in_modifierPart1679  */
static	ANTLR3_BITWORD FOLLOW_domPart_in_modifierPart1679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domPart_in_modifierPart1679	= { FOLLOW_domPart_in_modifierPart1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formatModifier_in_modifierPart1690  */
static	ANTLR3_BITWORD FOLLOW_formatModifier_in_modifierPart1690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formatModifier_in_modifierPart1690	= { FOLLOW_formatModifier_in_modifierPart1690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_modifierPart1692  */
static	ANTLR3_BITWORD FOLLOW_24_in_modifierPart1692_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_modifierPart1692	= { FOLLOW_24_in_modifierPart1692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domPart_in_modifierPart1694  */
static	ANTLR3_BITWORD FOLLOW_domPart_in_modifierPart1694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domPart_in_modifierPart1694	= { FOLLOW_domPart_in_modifierPart1694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_formatModifier1718  */
static	ANTLR3_BITWORD FOLLOW_47_in_formatModifier1718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_formatModifier1718	= { FOLLOW_47_in_formatModifier1718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_formatModifier1720  */
static	ANTLR3_BITWORD FOLLOW_27_in_formatModifier1720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_formatModifier1720	= { FOLLOW_27_in_formatModifier1720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_formatModifier1722  */
static	ANTLR3_BITWORD FOLLOW_ID_in_formatModifier1722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_formatModifier1722	= { FOLLOW_ID_in_formatModifier1722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatModifier1724  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatModifier1724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatModifier1724	= { FOLLOW_22_in_formatModifier1724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_formatModifier1726  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_formatModifier1726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_formatModifier1726	= { FOLLOW_STRING_in_formatModifier1726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatModifier1728  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatModifier1728_bits[]	= { ANTLR3_UINT64_LIT(0x058A000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatModifier1728	= { FOLLOW_22_in_formatModifier1728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_datatype_in_formatModifier1732  */
static	ANTLR3_BITWORD FOLLOW_datatype_in_formatModifier1732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_datatype_in_formatModifier1732	= { FOLLOW_datatype_in_formatModifier1732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_formatModifier1741  */
static	ANTLR3_BITWORD FOLLOW_47_in_formatModifier1741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_formatModifier1741	= { FOLLOW_47_in_formatModifier1741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_formatModifier1743  */
static	ANTLR3_BITWORD FOLLOW_27_in_formatModifier1743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_formatModifier1743	= { FOLLOW_27_in_formatModifier1743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_formatModifier1745  */
static	ANTLR3_BITWORD FOLLOW_ID_in_formatModifier1745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_formatModifier1745	= { FOLLOW_ID_in_formatModifier1745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_formatModifier1747  */
static	ANTLR3_BITWORD FOLLOW_22_in_formatModifier1747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_formatModifier1747	= { FOLLOW_22_in_formatModifier1747_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_formatModifier1749  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_formatModifier1749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_formatModifier1749	= { FOLLOW_STRING_in_formatModifier1749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_formatModifier1758  */
static	ANTLR3_BITWORD FOLLOW_47_in_formatModifier1758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_formatModifier1758	= { FOLLOW_47_in_formatModifier1758_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_formatModifier1760  */
static	ANTLR3_BITWORD FOLLOW_27_in_formatModifier1760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_formatModifier1760	= { FOLLOW_27_in_formatModifier1760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_formatModifier1762  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_formatModifier1762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_formatModifier1762	= { FOLLOW_STRING_in_formatModifier1762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_datatype1782  */
static	ANTLR3_BITWORD FOLLOW_49_in_datatype1782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_datatype1782	= { FOLLOW_49_in_datatype1782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_datatype1792  */
static	ANTLR3_BITWORD FOLLOW_56_in_datatype1792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_datatype1792	= { FOLLOW_56_in_datatype1792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_datatype1802  */
static	ANTLR3_BITWORD FOLLOW_51_in_datatype1802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_datatype1802	= { FOLLOW_51_in_datatype1802_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_datatype1812  */
static	ANTLR3_BITWORD FOLLOW_55_in_datatype1812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_datatype1812	= { FOLLOW_55_in_datatype1812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_datatype1822  */
static	ANTLR3_BITWORD FOLLOW_58_in_datatype1822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_datatype1822	= { FOLLOW_58_in_datatype1822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_domPart1849  */
static	ANTLR3_BITWORD FOLLOW_41_in_domPart1849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_domPart1849	= { FOLLOW_41_in_domPart1849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_domPart1851  */
static	ANTLR3_BITWORD FOLLOW_27_in_domPart1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_domPart1851	= { FOLLOW_27_in_domPart1851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_domPart1853  */
static	ANTLR3_BITWORD FOLLOW_ID_in_domPart1853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_domPart1853	= { FOLLOW_ID_in_domPart1853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_domPart1863  */
static	ANTLR3_BITWORD FOLLOW_41_in_domPart1863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_domPart1863	= { FOLLOW_41_in_domPart1863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_domPart1865  */
static	ANTLR3_BITWORD FOLLOW_27_in_domPart1865_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_domPart1865	= { FOLLOW_27_in_domPart1865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_valrangePart_in_domPart1867  */
static	ANTLR3_BITWORD FOLLOW_valrangePart_in_domPart1867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_valrangePart_in_domPart1867	= { FOLLOW_valrangePart_in_domPart1867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_valrangePart1887  */
static	ANTLR3_BITWORD FOLLOW_60_in_valrangePart1887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_valrangePart1887	= { FOLLOW_60_in_valrangePart1887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_valrangePart1889  */
static	ANTLR3_BITWORD FOLLOW_27_in_valrangePart1889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_valrangePart1889	= { FOLLOW_27_in_valrangePart1889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_ifStatement1907  */
static	ANTLR3_BITWORD FOLLOW_50_in_ifStatement1907_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_ifStatement1907	= { FOLLOW_50_in_ifStatement1907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1909  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1909_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1909	= { FOLLOW_expression_in_ifStatement1909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_ifStatement1911  */
static	ANTLR3_BITWORD FOLLOW_59_in_ifStatement1911_bits[]	= { ANTLR3_UINT64_LIT(0x4004800000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_ifStatement1911	= { FOLLOW_59_in_ifStatement1911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1913  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1913_bits[]	= { ANTLR3_UINT64_LIT(0x4004AC0000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1913	= { FOLLOW_statement_in_ifStatement1913_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_ifStatement1919  */
static	ANTLR3_BITWORD FOLLOW_43_in_ifStatement1919_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F00) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_ifStatement1919	= { FOLLOW_43_in_ifStatement1919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1921  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1921_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1921	= { FOLLOW_expression_in_ifStatement1921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_ifStatement1923  */
static	ANTLR3_BITWORD FOLLOW_59_in_ifStatement1923_bits[]	= { ANTLR3_UINT64_LIT(0x4004800000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_ifStatement1923	= { FOLLOW_59_in_ifStatement1923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1925  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1925_bits[]	= { ANTLR3_UINT64_LIT(0x4004AC0000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1925	= { FOLLOW_statement_in_ifStatement1925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_ifStatement1933  */
static	ANTLR3_BITWORD FOLLOW_42_in_ifStatement1933_bits[]	= { ANTLR3_UINT64_LIT(0x4004800000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_ifStatement1933	= { FOLLOW_42_in_ifStatement1933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1935  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1935_bits[]	= { ANTLR3_UINT64_LIT(0x4004A00000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1935	= { FOLLOW_statement_in_ifStatement1935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_ifStatement1942  */
static	ANTLR3_BITWORD FOLLOW_45_in_ifStatement1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_ifStatement1942	= { FOLLOW_45_in_ifStatement1942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_returnStatement1961  */
static	ANTLR3_BITWORD FOLLOW_57_in_returnStatement1961_bits[]	= { ANTLR3_UINT64_LIT(0x00200000000A4F02) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_returnStatement1961	= { FOLLOW_57_in_returnStatement1961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement1963  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement1963	= { FOLLOW_expression_in_returnStatement1963_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start script
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:43:1: script returns [ ASTNode *node] : ( scriptLine )+ ;
 */
static ASTNode *
script(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * scriptLine1;
    #undef	RETURN_TYPE_scriptLine1
    #define	RETURN_TYPE_scriptLine1 ASTNode *

    /* Initialize rule variables
     */


    	node = new ScriptNode();

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:47:2: ( ( scriptLine )+ )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:47:4: ( scriptLine )+
        {
            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:47:4: ( scriptLine )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case EOL:
            	case ID:
            	case 39:
            	case 40:
            	case 47:
            	case 48:
            	case 50:
            	case 62:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:47:6: scriptLine
            	        {
            	            FOLLOWPUSH(FOLLOW_scriptLine_in_script42);
            	            scriptLine1=scriptLine(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulescriptEx;
            	            }


            	            {
            	                node->addChild(scriptLine1
            	                ); 
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulescriptEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulescriptEx; /* Prevent compiler warnings */
    rulescriptEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end script */

/**
 * $ANTLR start scriptLine
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:50:1: scriptLine returns [ ASTNode *node] : ( statement ';' | variable ';' | constant ';' | function ';' | EOL );
 */
static ASTNode *
scriptLine(pilwisscriptParser ctx)
{
    ASTNode * node;


    ASTNode * statement2;
    #undef	RETURN_TYPE_statement2
    #define	RETURN_TYPE_statement2 ASTNode *

    VariableNode * variable3;
    #undef	RETURN_TYPE_variable3
    #define	RETURN_TYPE_variable3 VariableNode *

    VariableNode * constant4;
    #undef	RETURN_TYPE_constant4
    #define	RETURN_TYPE_constant4 VariableNode *

    FunctionNode * function5;
    #undef	RETURN_TYPE_function5
    #define	RETURN_TYPE_function5 FunctionNode *

    /* Initialize rule variables
     */


    	node =  new ScriptLineNode();

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:54:2: ( statement ';' | variable ';' | constant ';' | function ';' | EOL )

            ANTLR3_UINT32 alt2;

            alt2=5;

            switch ( LA(1) )
            {
            case ID:
            case 47:
            case 50:
            case 62:
            	{
            		alt2=1;
            	}
                break;
            case 40:
            	{
            		alt2=2;
            	}
                break;
            case 39:
            	{
            		alt2=3;
            	}
                break;
            case 48:
            	{
            		alt2=4;
            	}
                break;
            case EOL:
            	{
            		alt2=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulescriptLineEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:54:4: statement ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_scriptLine70);
        	        statement2=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(statement2
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine79);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:55:4: variable ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_variable_in_scriptLine84);
        	        variable3=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(variable3
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine93);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:56:4: constant ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_constant_in_scriptLine98);
        	        constant4=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(constant4
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine106);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:57:4: function ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_function_in_scriptLine111);
        	        function5=function(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	        {
        	             node->addChild(function5
        	            ); 
        	        }


        	         MATCHT(24, &FOLLOW_24_in_scriptLine120);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:58:5: EOL
        	    {
        	         MATCHT(EOL, &FOLLOW_EOL_in_scriptLine126);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescriptLineEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulescriptLineEx; /* Prevent compiler warnings */
    rulescriptLineEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end scriptLine */

/**
 * $ANTLR start variable
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:61:1: variable returns [ VariableNode *node] : 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )? ;
 */
static VariableNode *
variable(pilwisscriptParser ctx)
{
    VariableNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    quint64 type6;
    #undef	RETURN_TYPE_type6
    #define	RETURN_TYPE_type6 quint64

    ExpressionNode * expression7;
    #undef	RETURN_TYPE_expression7
    #define	RETURN_TYPE_expression7 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new VariableNode(false);

    id1       = NULL;
    id2       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:65:2: ( 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )? )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:65:4: 'declare' id1= ID ( ',' id2= ID )* ':' type ( ':=' expression )?
        {
             MATCHT(40, &FOLLOW_40_in_variable146);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable152);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            {
                node->addChild(new IDNode((char *)((id1->getText(id1))->chars)));
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:66:3: ( ',' id2= ID )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:67:3: ',' id2= ID
            	    {
            	         MATCHT(18, &FOLLOW_18_in_variable164);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable171);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        {
            	            node->addChild(new IDNode((char *)((id2->getText(id2))->chars)));
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             MATCHT(22, &FOLLOW_22_in_variable187);
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            FOLLOWPUSH(FOLLOW_type_in_variable191);
            type6=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }


            {
                 node->setType(type6
                ); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:72:3: ( ':=' expression )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case 23:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:72:4: ':=' expression
            	    {
            	         MATCHT(23, &FOLLOW_23_in_variable207);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_variable212);
            	        expression7=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }


            	        {
            	             node->setExpression(expression7
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end variable */

/**
 * $ANTLR start constant
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:77:1: constant returns [ VariableNode *node] : 'constant' id1= ID ':' type ':=' expression ;
 */
static VariableNode *
constant(pilwisscriptParser ctx)
{
    VariableNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    quint64 type8;
    #undef	RETURN_TYPE_type8
    #define	RETURN_TYPE_type8 quint64

    ExpressionNode * expression9;
    #undef	RETURN_TYPE_expression9
    #define	RETURN_TYPE_expression9 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new VariableNode(true);

    id1       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:81:2: ( 'constant' id1= ID ':' type ':=' expression )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:81:4: 'constant' id1= ID ':' type ':=' expression
        {
             MATCHT(39, &FOLLOW_39_in_constant244);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_constant250);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->addChild(new IDNode((char *)((id1->getText(id1))->chars)));
            }


             MATCHT(22, &FOLLOW_22_in_constant260);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            FOLLOWPUSH(FOLLOW_type_in_constant265);
            type8=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->setType(type8
                ); 
            }


             MATCHT(23, &FOLLOW_23_in_constant277);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_constant282);
            expression9=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }


            {
                 node->setExpression(expression9
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end constant */

/**
 * $ANTLR start type
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:88:1: type returns [ quint64 type] : ( 'Integer' | 'Boolean' | 'String' | 'Real' );
 */
static quint64
type(pilwisscriptParser ctx)
{
    quint64 type;


    /* Initialize rule variables
     */

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:89:2: ( 'Integer' | 'Boolean' | 'String' | 'Real' )

            ANTLR3_UINT32 alt5;

            alt5=4;

            switch ( LA(1) )
            {
            case 31:
            	{
            		alt5=1;
            	}
                break;
            case 30:
            	{
            		alt5=2;
            	}
                break;
            case 33:
            	{
            		alt5=3;
            	}
                break;
            case 32:
            	{
            		alt5=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruletypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:89:4: 'Integer'
        	    {
        	         MATCHT(31, &FOLLOW_31_in_type305);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type= itINT32; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:90:4: 'Boolean'
        	    {
        	         MATCHT(30, &FOLLOW_30_in_type316);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type =  itBOOL; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:91:4: 'String'
        	    {
        	         MATCHT(33, &FOLLOW_33_in_type327);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type=  itSTRING;
        	        }


        	    }
        	    break;
        	case 4:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:92:4: 'Real'
        	    {
        	         MATCHT(32, &FOLLOW_32_in_type338);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             type= itDOUBLE; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return type;
}
/* $ANTLR end type */

/**
 * $ANTLR start statement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:95:1: statement returns [ ASTNode *node] : ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | formatModifier );
 */
static ASTNode *
statement(pilwisscriptParser ctx)
{
    ASTNode * node;


    AssignmentNode * assignmentStatement10;
    #undef	RETURN_TYPE_assignmentStatement10
    #define	RETURN_TYPE_assignmentStatement10 AssignmentNode *

    ASTNode * ifStatement11;
    #undef	RETURN_TYPE_ifStatement11
    #define	RETURN_TYPE_ifStatement11 ASTNode *

    WhileNode * whileStatement12;
    #undef	RETURN_TYPE_whileStatement12
    #define	RETURN_TYPE_whileStatement12 WhileNode *

    FunctionStatementNode * functionStatement13;
    #undef	RETURN_TYPE_functionStatement13
    #define	RETURN_TYPE_functionStatement13 FunctionStatementNode *

    CommandNode * commandStatement14;
    #undef	RETURN_TYPE_commandStatement14
    #define	RETURN_TYPE_commandStatement14 CommandNode *

    FormatNode * formatModifier15;
    #undef	RETURN_TYPE_formatModifier15
    #define	RETURN_TYPE_formatModifier15 FormatNode *

    /* Initialize rule variables
     */

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:96:2: ( assignmentStatement | ifStatement | whileStatement | functionStatement | commandStatement | formatModifier )

            ANTLR3_UINT32 alt6;

            alt6=6;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 23:
            		case 27:
            		case 64:
            			{
            				alt6=1;
            			}
            		    break;
            		case 14:
            			{
            				alt6=4;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case 13:
            		case 24:
            		case 42:
            		case 43:
            		case 45:
            		case 47:
            		case 50:
            		case 62:
            			{
            				alt6=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 6;
            		    EXCEPTION->state        = 1;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case 50:
            	{
            		alt6=2;
            	}
                break;
            case 62:
            	{
            		alt6=3;
            	}
                break;
            case 47:
            	{
            		alt6=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:96:4: assignmentStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentStatement_in_statement362);
        	        assignmentStatement10=assignmentStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = assignmentStatement10
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:97:4: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement372);
        	        ifStatement11=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = ifStatement11
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:98:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_statement383);
        	        whileStatement12=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = whileStatement12
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:99:4: functionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_functionStatement_in_statement394);
        	        functionStatement13=functionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = functionStatement13
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:100:4: commandStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_commandStatement_in_statement404);
        	        commandStatement14=commandStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = commandStatement14
        	            ; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:101:4: formatModifier
        	    {
        	        FOLLOWPUSH(FOLLOW_formatModifier_in_statement414);
        	        formatModifier15=formatModifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	        {
        	             node = formatModifier15
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end statement */

/**
 * $ANTLR start assignmentStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:104:1: assignmentStatement returns [ AssignmentNode *node] : ID ( typeModifierPart )? ( ':=' | '=' ) expression ;
 */
static AssignmentNode *
assignmentStatement(pilwisscriptParser ctx)
{
    AssignmentNode * node;


    pANTLR3_COMMON_TOKEN    ID16;
    ModifierPart * typeModifierPart17;
    #undef	RETURN_TYPE_typeModifierPart17
    #define	RETURN_TYPE_typeModifierPart17 ModifierPart *

    ExpressionNode * expression18;
    #undef	RETURN_TYPE_expression18
    #define	RETURN_TYPE_expression18 ExpressionNode *

    /* Initialize rule variables
     */


    	node= new AssignmentNode();

    ID16       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:108:2: ( ID ( typeModifierPart )? ( ':=' | '=' ) expression )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:108:4: ID ( typeModifierPart )? ( ':=' | '=' ) expression
        {
            ID16 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_assignmentStatement440);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }


            {
                 node->setResult(new IDNode((char *)((ID16->getText(ID16))->chars))); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:109:3: ( typeModifierPart )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case 64:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:109:4: typeModifierPart
            	    {
            	        FOLLOWPUSH(FOLLOW_typeModifierPart_in_assignmentStatement453);
            	        typeModifierPart17=typeModifierPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentStatementEx;
            	        }


            	        {
            	             node->setTypeModifierPart(typeModifierPart17
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

            if ( LA(1) == 23 || LA(1) == 27 )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleassignmentStatementEx;
            }


            {
                 node->setDefintion(true); 
            }


            FOLLOWPUSH(FOLLOW_expression_in_assignmentStatement485);
            expression18=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }


            {
                 node->setExpression(expression18
                );
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleassignmentStatementEx; /* Prevent compiler warnings */
    ruleassignmentStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end assignmentStatement */

/**
 * $ANTLR start actualParameters
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:115:1: actualParameters returns [ ParametersNode *node] : expr1= expression ( ',' expr2= expression )* ;
 */
static ParametersNode *
actualParameters(pilwisscriptParser ctx)
{
    ParametersNode * node;


    ExpressionNode * expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 ExpressionNode *

    ExpressionNode * expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ParametersNode();

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:119:2: (expr1= expression ( ',' expr2= expression )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:119:4: expr1= expression ( ',' expr2= expression )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_actualParameters516);
            expr1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleactualParametersEx;
            }


            {
                 node->addChild(expr1
                ); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:120:3: ( ',' expr2= expression )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:121:3: ',' expr2= expression
            	    {
            	         MATCHT(18, &FOLLOW_18_in_actualParameters530);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_actualParameters539);
            	        expr2=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleactualParametersEx;
            	        }


            	        {
            	             node->addChild(expr2
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleactualParametersEx; /* Prevent compiler warnings */
    ruleactualParametersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end actualParameters */

/**
 * $ANTLR start function
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:126:1: function returns [ FunctionNode *node] : 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction' ;
 */
static FunctionNode *
function(pilwisscriptParser ctx)
{
    FunctionNode * node;


    pANTLR3_COMMON_TOKEN    ID19;
    VariableNode * var1;
    #undef	RETURN_TYPE_var1
    #define	RETURN_TYPE_var1 VariableNode *

    VariableNode * var2;
    #undef	RETURN_TYPE_var2
    #define	RETURN_TYPE_var2 VariableNode *

    ASTNode * statement20;
    #undef	RETURN_TYPE_statement20
    #define	RETURN_TYPE_statement20 ASTNode *

    ReturnNode * returnStatement21;
    #undef	RETURN_TYPE_returnStatement21
    #define	RETURN_TYPE_returnStatement21 ReturnNode *

    /* Initialize rule variables
     */

    ID19       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:127:2: ( 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:127:4: 'function' ID '(' (var1= variable )? ( ',' var2= variable )* ')' EOL 'begin' EOL ( statement EOL )* ( returnStatement )? 'endfunction'
        {
             MATCHT(48, &FOLLOW_48_in_function565);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            ID19 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function567);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            {
                 node = new FunctionNode((char *)((ID19->getText(ID19))->chars));
            }


             MATCHT(14, &FOLLOW_14_in_function577);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:128:7: (var1= variable )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case 40:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:128:8: var1= variable
            	    {
            	        FOLLOWPUSH(FOLLOW_variable_in_function582);
            	        var1=variable(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addParameter(var1); 
            	        }


            	    }
            	    break;

                }
            }

            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:130:3: ( ',' var2= variable )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case 18:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:130:4: ',' var2= variable
            	    {
            	         MATCHT(18, &FOLLOW_18_in_function598);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_variable_in_function602);
            	        var2=variable(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addParameter(var2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


             MATCHT(15, &FOLLOW_15_in_function617);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(EOL, &FOLLOW_EOL_in_function619);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(37, &FOLLOW_37_in_function626);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


             MATCHT(EOL, &FOLLOW_EOL_in_function628);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:134:3: ( statement EOL )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case ID:
                case 47:
                case 50:
                case 62:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:134:4: statement EOL
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_function633);
            	        statement20=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->addChild(statement20
            	            ); 
            	        }


            	         MATCHT(EOL, &FOLLOW_EOL_in_function644);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:136:3: ( returnStatement )?
            {
                int alt12=2;
                switch ( LA(1) )
                {
                    case 57:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:136:5: returnStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_returnStatement_in_function652);
            	        returnStatement21=returnStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }


            	        {
            	             node->setReturn(returnStatement21
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(44, &FOLLOW_44_in_function667);
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end function */

/**
 * $ANTLR start term
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:141:1: term returns [ TermNode *node] : ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters )? ')' |id2= ID (id3= rangeDef )+ |id2= ID );
 */
static TermNode *
term(pilwisscriptParser ctx)
{
    TermNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    INT23;
    pANTLR3_COMMON_TOKEN    FLOAT24;
    pANTLR3_COMMON_TOKEN    STRING25;
    RangeDefinitionNode * id3;
    #undef	RETURN_TYPE_id3
    #define	RETURN_TYPE_id3 RangeDefinitionNode *

    ExpressionNode * expression22;
    #undef	RETURN_TYPE_expression22
    #define	RETURN_TYPE_expression22 ExpressionNode *

    ParametersNode * actualParameters26;
    #undef	RETURN_TYPE_actualParameters26
    #define	RETURN_TYPE_actualParameters26 ParametersNode *

    /* Initialize rule variables
     */


    	node = new TermNode();

    id1       = NULL;
    id2       = NULL;
    INT23       = NULL;
    FLOAT24       = NULL;
    STRING25       = NULL;

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:145:2: ( '(' expression ')' | INT | FLOAT | STRING |id1= ID '(' ( actualParameters )? ')' |id2= ID (id3= rangeDef )+ |id2= ID )

            ANTLR3_UINT32 alt15;

            alt15=7;

            switch ( LA(1) )
            {
            case 14:
            	{
            		alt15=1;
            	}
                break;
            case INT:
            	{
            		alt15=2;
            	}
                break;
            case FLOAT:
            	{
            		alt15=3;
            	}
                break;
            case STRING:
            	{
            		alt15=4;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 14:
            			{
            				alt15=5;
            			}
            		    break;
            		case 34:
            			{
            				alt15=6;
            			}
            		    break;
            		case EOL:
            		case ID:
            		case 13:
            		case 15:
            		case 16:
            		case 17:
            		case 18:
            		case 19:
            		case 20:
            		case 21:
            		case 24:
            		case 25:
            		case 26:
            		case 27:
            		case 28:
            		case 29:
            		case 36:
            		case 42:
            		case 43:
            		case 44:
            		case 45:
            		case 47:
            		case 50:
            		case 52:
            		case 54:
            		case 59:
            		case 62:
            		case 63:
            			{
            				alt15=7;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 15;
            		    EXCEPTION->state        = 5;


            		    goto ruletermEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 15;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt15)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:145:4: '(' expression ')'
        	    {
        	         MATCHT(14, &FOLLOW_14_in_term689);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_term691);
        	        expression22=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(15, &FOLLOW_15_in_term693);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setExpression(expression22
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:146:4: INT
        	    {
        	        INT23 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_term704);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((INT23->getText(INT23))->chars)); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:147:4: FLOAT
        	    {
        	        FLOAT24 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_term716);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setNumerical((char *)((FLOAT24->getText(FLOAT24))->chars)); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:148:4: STRING
        	    {
        	        STRING25 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_term728);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setString((char *)((STRING25->getText(STRING25))->chars)); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:149:4: id1= ID '(' ( actualParameters )? ')'
        	    {
        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term744);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	         MATCHT(14, &FOLLOW_14_in_term746);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id1->getText(id1))->chars))); 
        	        }


        	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:150:3: ( actualParameters )?
        	        {
        	            int alt13=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT:
        	                case ID:
        	                case INT:
        	                case STRING:
        	                case 14:
        	                case 17:
        	                case 19:
        	                case 53:
        	                	{
        	                		alt13=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt13)
        	            {
        	        	case 1:
        	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:150:4: actualParameters
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_actualParameters_in_term758);
        	        	        actualParameters26=actualParameters(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruletermEx;
        	        	        }


        	        	        {
        	        	               node->setParameters(actualParameters26
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(15, &FOLLOW_15_in_term770);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:152:4: id2= ID (id3= rangeDef )+
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term785);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:152:13: (id3= rangeDef )+
        	        {
        	            int cnt14=0;

        	            for (;;)
        	            {
        	                int alt14=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case 34:
        	        		{
        	        			alt14=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt14)
        	        	{
        	        	    case 1:
        	        	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:152:14: id3= rangeDef
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_rangeDef_in_term790);
        	        	            id3=rangeDef(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruletermEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt14 >= 1 )
        	        		{
        	        		    goto loop14;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruletermEx;
        	        	}
        	        	cnt14++;
        	            }
        	            loop14: ;	/* Jump to here if this rule does not match */
        	        }

        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));node->addRange(
        	            id3
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:153:4: id2= ID
        	    {
        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_term805);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {
        	             node->setId(new IDNode((char *)((id2->getText(id2))->chars)));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end term */

/**
 * $ANTLR start rangeDef
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:156:1: rangeDef returns [ RangeDefinitionNode *node] : ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' ID ']' | '[' INT ']' );
 */
static RangeDefinitionNode *
rangeDef(pilwisscriptParser ctx)
{
    RangeDefinitionNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    id3;
    pANTLR3_COMMON_TOKEN    id4;
    pANTLR3_COMMON_TOKEN    ID27;
    pANTLR3_COMMON_TOKEN    INT28;

    /* Initialize rule variables
     */


    	node = new RangeDefinitionNode("rangedefinitionnode");

    id1       = NULL;
    id2       = NULL;
    id3       = NULL;
    id4       = NULL;
    ID27       = NULL;
    INT28       = NULL;

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:160:2: ( '[' id1= INT id2= INT ',' id3= INT id4= INT ']' | '[' ID ']' | '[' INT ']' )

            ANTLR3_UINT32 alt16;

            alt16=3;

            switch ( LA(1) )
            {
            case 34:
            	{
            		switch ( LA(2) )
            		{
            		case INT:
            			{
            				switch ( LA(3) )
            				{
            				case INT:
            					{
            						alt16=1;
            					}
            				    break;
            				case 35:
            					{
            						alt16=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 16;
            				    EXCEPTION->state        = 2;


            				    goto rulerangeDefEx;

            				}

            			}
            		    break;
            		case ID:
            			{
            				alt16=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 16;
            		    EXCEPTION->state        = 1;


            		    goto rulerangeDefEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto rulerangeDefEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:160:4: '[' id1= INT id2= INT ',' id3= INT id4= INT ']'
        	    {
        	         MATCHT(34, &FOLLOW_34_in_rangeDef830);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_rangeDef834);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_rangeDef838);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	         MATCHT(18, &FOLLOW_18_in_rangeDef840);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        id3 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_rangeDef844);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        id4 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_rangeDef848);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	         MATCHT(35, &FOLLOW_35_in_rangeDef850);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        {
        	             node->setRangeType("box"); node->setBounds((char *)((id1->getText(id1))->chars),
        	            										(char *)((id2->getText(id2))->chars),
        	            										(char *)((id3->getText(id3))->chars),
        	            										(char *)((id4->getText(id4))->chars)); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:164:4: '[' ID ']'
        	    {
        	         MATCHT(34, &FOLLOW_34_in_rangeDef858);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        ID27 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_rangeDef860);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	         MATCHT(35, &FOLLOW_35_in_rangeDef862);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        {
        	             node->setRangeType("var"); node->setVariable((char *)((ID27->getText(ID27))->chars));
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:165:4: '[' INT ']'
        	    {
        	         MATCHT(34, &FOLLOW_34_in_rangeDef874);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        INT28 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_rangeDef876);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	         MATCHT(35, &FOLLOW_35_in_rangeDef878);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerangeDefEx;
        	        }


        	        {
        	             node->setRangeType("index"); node->setVariable((char *)((INT28->getText(INT28))->chars));
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulerangeDefEx; /* Prevent compiler warnings */
    rulerangeDefEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end rangeDef */

/**
 * $ANTLR start negation
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:168:1: negation returns [ TermNode *node] : ( 'not' )* term ;
 */
static TermNode *
negation(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * term29;
    #undef	RETURN_TYPE_term29
    #define	RETURN_TYPE_term29 TermNode *

    /* Initialize rule variables
     */


    	bool negated = false;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:172:2: ( ( 'not' )* term )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:172:4: ( 'not' )* term
        {
            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:172:4: ( 'not' )*

            for (;;)
            {
                int alt17=2;
                switch ( LA(1) )
                {
                case 53:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:172:5: 'not'
            	    {
            	         MATCHT(53, &FOLLOW_53_in_negation906);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenegationEx;
            	        }


            	        {
            	             negated = !negated; 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


            FOLLOWPUSH(FOLLOW_term_in_negation922);
            term29=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenegationEx;
            }


            {
                 term29
                ->setLogicalNegation(negated); node = term29
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenegationEx; /* Prevent compiler warnings */
    rulenegationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end negation */

/**
 * $ANTLR start unary
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:177:1: unary returns [ TermNode *node] : ( '+' | '-' )? negation ;
 */
static TermNode *
unary(pilwisscriptParser ctx)
{
    TermNode * node;


    TermNode * negation30;
    #undef	RETURN_TYPE_negation30
    #define	RETURN_TYPE_negation30 TermNode *

    /* Initialize rule variables
     */


    	bool isnegated = false;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:182:2: ( ( '+' | '-' )? negation )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:182:4: ( '+' | '-' )? negation
        {
            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:182:4: ( '+' | '-' )?
            {
                int alt18=3;
                switch ( LA(1) )
                {
                    case 17:
                    	{
                    		alt18=1;
                    	}
                        break;
                    case 19:
                    	{
                    		alt18=2;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:182:5: '+'
            	    {
            	         MATCHT(17, &FOLLOW_17_in_unary950);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:183:5: '-'
            	    {
            	         MATCHT(19, &FOLLOW_19_in_unary962);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunaryEx;
            	        }


            	        {
            	             isnegated = !isnegated; 
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_negation_in_unary978);
            negation30=negation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunaryEx;
            }


            {
                 negation30
                ->setNumericalNegation(isnegated); node = negation30
                ; 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunaryEx; /* Prevent compiler warnings */
    ruleunaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end unary */

/**
 * $ANTLR start mult
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:187:1: mult returns [ MultiplicationNode *node] : un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* ;
 */
static MultiplicationNode *
mult(pilwisscriptParser ctx)
{
    MultiplicationNode * node;


    TermNode * un1;
    #undef	RETURN_TYPE_un1
    #define	RETURN_TYPE_un1 TermNode *

    TermNode * un2;
    #undef	RETURN_TYPE_un2
    #define	RETURN_TYPE_un2 TermNode *

    /* Initialize rule variables
     */


    	node = new MultiplicationNode();
    	OperationNode::Operators op;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:192:2: (un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:192:4: un1= unary ( ( '*' | '/' | 'mod' ) un2= unary )*
        {
            FOLLOWPUSH(FOLLOW_unary_in_mult1004);
            un1=unary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultEx;
            }


            {
                 node->setLeftTerm(un1); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:193:3: ( ( '*' | '/' | 'mod' ) un2= unary )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) )
                {
                case 16:
                case 20:
                case 52:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:194:3: ( '*' | '/' | 'mod' ) un2= unary
            	    {
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:194:3: ( '*' | '/' | 'mod' )
            	        {
            	            int alt19=3;
            	            switch ( LA(1) )
            	            {
            	            case 16:
            	            	{
            	            		alt19=1;
            	            	}
            	                break;
            	            case 20:
            	            	{
            	            		alt19=2;
            	            	}
            	                break;
            	            case 52:
            	            	{
            	            		alt19=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 19;
            	                EXCEPTION->state        = 0;


            	                goto rulemultEx;

            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:194:4: '*'
            	        	    {
            	        	         MATCHT(16, &FOLLOW_16_in_mult1019);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oTIMES; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:195:5: '/'
            	        	    {
            	        	         MATCHT(20, &FOLLOW_20_in_mult1032);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oDIVIDED; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:196:5: 'mod'
            	        	    {
            	        	         MATCHT(52, &FOLLOW_52_in_mult1044);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oMOD; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_in_mult1061);
            	        un2=unary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultEx;
            	        }


            	        {
            	             node->addRightTerm(op, un2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemultEx; /* Prevent compiler warnings */
    rulemultEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end mult */

/**
 * $ANTLR start add
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:202:1: add returns [ AddNode *node] : mul1= mult ( ( '+' | '-' ) mul2= mult )* ;
 */
static AddNode *
add(pilwisscriptParser ctx)
{
    AddNode * node;


    MultiplicationNode * mul1;
    #undef	RETURN_TYPE_mul1
    #define	RETURN_TYPE_mul1 MultiplicationNode *

    MultiplicationNode * mul2;
    #undef	RETURN_TYPE_mul2
    #define	RETURN_TYPE_mul2 MultiplicationNode *

    /* Initialize rule variables
     */


    	node = new AddNode();
    	OperationNode::Operators op;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:207:2: (mul1= mult ( ( '+' | '-' ) mul2= mult )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:207:4: mul1= mult ( ( '+' | '-' ) mul2= mult )*
        {
            FOLLOWPUSH(FOLLOW_mult_in_add1096);
            mul1=mult(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaddEx;
            }


            {
                 node->setLeftTerm(mul1); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:208:3: ( ( '+' | '-' ) mul2= mult )*

            for (;;)
            {
                int alt22=2;
                switch ( LA(1) )
                {
                case 17:
                case 19:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:209:3: ( '+' | '-' ) mul2= mult
            	    {
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:209:3: ( '+' | '-' )
            	        {
            	            int alt21=2;
            	            switch ( LA(1) )
            	            {
            	            case 17:
            	            	{
            	            		alt21=1;
            	            	}
            	                break;
            	            case 19:
            	            	{
            	            		alt21=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 21;
            	                EXCEPTION->state        = 0;


            	                goto ruleaddEx;

            	            }

            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:209:4: '+'
            	        	    {
            	        	         MATCHT(17, &FOLLOW_17_in_add1111);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oADD; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:211:3: '-'
            	        	    {
            	        	         MATCHT(19, &FOLLOW_19_in_add1127);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleaddEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oSUBSTRACT; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_mult_in_add1147);
            	        mul2=mult(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaddEx;
            	        }


            	        {
            	             node->addRightTerm(op, mul2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleaddEx; /* Prevent compiler warnings */
    ruleaddEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end add */

/**
 * $ANTLR start relation
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:217:1: relation returns [ RelationNode *node] : add1= add ( ( '=' | '/=' | '<' | '<=' | '>=' | '>' ) add2= add )* ;
 */
static RelationNode *
relation(pilwisscriptParser ctx)
{
    RelationNode * node;


    AddNode * add1;
    #undef	RETURN_TYPE_add1
    #define	RETURN_TYPE_add1 AddNode *

    AddNode * add2;
    #undef	RETURN_TYPE_add2
    #define	RETURN_TYPE_add2 AddNode *

    /* Initialize rule variables
     */


    	node = new RelationNode();
    	OperationNode::Operators op;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:222:2: (add1= add ( ( '=' | '/=' | '<' | '<=' | '>=' | '>' ) add2= add )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:222:4: add1= add ( ( '=' | '/=' | '<' | '<=' | '>=' | '>' ) add2= add )*
        {
            FOLLOWPUSH(FOLLOW_add_in_relation1180);
            add1=add(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }


            {
                 node->setLeftTerm(add1); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:223:3: ( ( '=' | '/=' | '<' | '<=' | '>=' | '>' ) add2= add )*

            for (;;)
            {
                int alt24=2;
                switch ( LA(1) )
                {
                case 21:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:224:3: ( '=' | '/=' | '<' | '<=' | '>=' | '>' ) add2= add
            	    {
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:224:3: ( '=' | '/=' | '<' | '<=' | '>=' | '>' )
            	        {
            	            int alt23=6;
            	            switch ( LA(1) )
            	            {
            	            case 27:
            	            	{
            	            		alt23=1;
            	            	}
            	                break;
            	            case 21:
            	            	{
            	            		alt23=2;
            	            	}
            	                break;
            	            case 25:
            	            	{
            	            		alt23=3;
            	            	}
            	                break;
            	            case 26:
            	            	{
            	            		alt23=4;
            	            	}
            	                break;
            	            case 29:
            	            	{
            	            		alt23=5;
            	            	}
            	                break;
            	            case 28:
            	            	{
            	            		alt23=6;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 23;
            	                EXCEPTION->state        = 0;


            	                goto rulerelationEx;

            	            }

            	            switch (alt23)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:225:3: '='
            	        	    {
            	        	         MATCHT(27, &FOLLOW_27_in_relation1198);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:226:5: '/='
            	        	    {
            	        	         MATCHT(21, &FOLLOW_21_in_relation1212);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oNEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:227:5: '<'
            	        	    {
            	        	         MATCHT(25, &FOLLOW_25_in_relation1226);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oLESS; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:228:5: '<='
            	        	    {
            	        	         MATCHT(26, &FOLLOW_26_in_relation1240);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oLESSEQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:229:5: '>='
            	        	    {
            	        	         MATCHT(29, &FOLLOW_29_in_relation1254);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oGREATEREQ; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:230:5: '>'
            	        	    {
            	        	         MATCHT(28, &FOLLOW_28_in_relation1268);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oGREATER; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_add_in_relation1286);
            	        add2=add(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }


            	        {
            	             node->addRightTerm(op, add2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end relation */

/**
 * $ANTLR start expression
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:236:1: expression returns [ ExpressionNode *node] : rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* ;
 */
static ExpressionNode *
expression(pilwisscriptParser ctx)
{
    ExpressionNode * node;


    RelationNode * rel1;
    #undef	RETURN_TYPE_rel1
    #define	RETURN_TYPE_rel1 RelationNode *

    RelationNode * rel2;
    #undef	RETURN_TYPE_rel2
    #define	RETURN_TYPE_rel2 RelationNode *

    /* Initialize rule variables
     */


    	node = new ExpressionNode();
    	OperationNode::Operators op;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:241:2: (rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:241:4: rel1= relation ( ( 'and' | 'or' | 'xor' ) rel2= relation )*
        {
            FOLLOWPUSH(FOLLOW_relation_in_expression1320);
            rel1=relation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }


            {
                 node->setLeftTerm(rel1); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:242:3: ( ( 'and' | 'or' | 'xor' ) rel2= relation )*

            for (;;)
            {
                int alt26=2;
                switch ( LA(1) )
                {
                case 36:
                case 54:
                case 63:
                	{
                		alt26=1;
                	}
                    break;

                }

                switch (alt26)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:243:3: ( 'and' | 'or' | 'xor' ) rel2= relation
            	    {
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:243:3: ( 'and' | 'or' | 'xor' )
            	        {
            	            int alt25=3;
            	            switch ( LA(1) )
            	            {
            	            case 36:
            	            	{
            	            		alt25=1;
            	            	}
            	                break;
            	            case 54:
            	            	{
            	            		alt25=2;
            	            	}
            	                break;
            	            case 63:
            	            	{
            	            		alt25=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 25;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpressionEx;

            	            }

            	            switch (alt25)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:243:5: 'and'
            	        	    {
            	        	         MATCHT(36, &FOLLOW_36_in_expression1340);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oAND; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:244:5: 'or'
            	        	    {
            	        	         MATCHT(54, &FOLLOW_54_in_expression1354);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oOR; 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:245:5: 'xor'
            	        	    {
            	        	         MATCHT(63, &FOLLOW_63_in_expression1368);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }


            	        	        {
            	        	             op = OperationNode::oXOR; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_relation_in_expression1385);
            	        rel2=relation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	        {
            	             node->addRightTerm(op, rel2); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop26;	/* break out of the loop */
            	    break;
                }
            }
            loop26: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end expression */

/**
 * $ANTLR start commandStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:250:1: commandStatement returns [ CommandNode *node] : id1= ID ( ' -' id2= ID ( '=' expression )? )* ;
 */
static CommandNode *
commandStatement(pilwisscriptParser ctx)
{
    CommandNode * node;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    ExpressionNode * expression31;
    #undef	RETURN_TYPE_expression31
    #define	RETURN_TYPE_expression31 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new CommandNode();
    	QString flag;
    	ExpressionNode *expr;

    id1       = NULL;
    id2       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:256:2: (id1= ID ( ' -' id2= ID ( '=' expression )? )* )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:257:2: id1= ID ( ' -' id2= ID ( '=' expression )? )*
        {
            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1422);
            if  (HASEXCEPTION())
            {
                goto rulecommandStatementEx;
            }


            {
                 node->setCommand((char *)((id1->getText(id1))->chars)); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:258:2: ( ' -' id2= ID ( '=' expression )? )*

            for (;;)
            {
                int alt28=2;
                switch ( LA(1) )
                {
                case 13:
                	{
                		alt28=1;
                	}
                    break;

                }

                switch (alt28)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:259:2: ' -' id2= ID ( '=' expression )?
            	    {
            	         MATCHT(13, &FOLLOW_13_in_commandStatement1441);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_commandStatement1449);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecommandStatementEx;
            	        }


            	        {
            	             flag = QString((char *)((id2->getText(id2))->chars));
            	        }


            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:261:2: ( '=' expression )?
            	        {
            	            int alt27=2;
            	            switch ( LA(1) )
            	            {
            	                case 27:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt27)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:261:3: '=' expression
            	        	    {
            	        	         MATCHT(27, &FOLLOW_27_in_commandStatement1460);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_expression_in_commandStatement1463);
            	        	        expression31=expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecommandStatementEx;
            	        	        }


            	        	        {
            	        	             expr = expression31
            	        	            ; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {
            	             node->addOption(flag, expr); expr = 0;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecommandStatementEx; /* Prevent compiler warnings */
    rulecommandStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end commandStatement */

/**
 * $ANTLR start functionStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:267:1: functionStatement returns [ FunctionStatementNode *node] : ID '(' ( actualParameters )? ')' ;
 */
static FunctionStatementNode *
functionStatement(pilwisscriptParser ctx)
{
    FunctionStatementNode * node;


    pANTLR3_COMMON_TOKEN    ID32;
    ParametersNode * actualParameters33;
    #undef	RETURN_TYPE_actualParameters33
    #define	RETURN_TYPE_actualParameters33 ParametersNode *

    /* Initialize rule variables
     */

    ID32       = NULL;

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:268:2: ( ID '(' ( actualParameters )? ')' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:268:4: ID '(' ( actualParameters )? ')'
        {
            ID32 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_functionStatement1502);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            {
                 node = new FunctionStatementNode((char *)((ID32->getText(ID32))->chars)); 
            }


             MATCHT(14, &FOLLOW_14_in_functionStatement1512);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:269:6: ( actualParameters )?
            {
                int alt29=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 53:
                    	{
                    		alt29=1;
                    	}
                        break;
                }

                switch (alt29)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:269:6: actualParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_actualParameters_in_functionStatement1514);
            	        actualParameters33=actualParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                 node->setParameters(actualParameters33
                ); 
            }


             MATCHT(15, &FOLLOW_15_in_functionStatement1524);
            if  (HASEXCEPTION())
            {
                goto rulefunctionStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunctionStatementEx; /* Prevent compiler warnings */
    rulefunctionStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end functionStatement */

/**
 * $ANTLR start whileStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:273:1: whileStatement returns [ WhileNode *node] : 'while' expression EOL ( ( statement | breakStatement ) EOL )* 'endwhile' ;
 */
static WhileNode *
whileStatement(pilwisscriptParser ctx)
{
    WhileNode * node;


    ExpressionNode * expression34;
    #undef	RETURN_TYPE_expression34
    #define	RETURN_TYPE_expression34 ExpressionNode *

    ASTNode * statement35;
    #undef	RETURN_TYPE_statement35
    #define	RETURN_TYPE_statement35 ASTNode *

    BreakNode * breakStatement36;
    #undef	RETURN_TYPE_breakStatement36
    #define	RETURN_TYPE_breakStatement36 BreakNode *

    /* Initialize rule variables
     */


    	node = new WhileNode();

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:277:2: ( 'while' expression EOL ( ( statement | breakStatement ) EOL )* 'endwhile' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:277:4: 'while' expression EOL ( ( statement | breakStatement ) EOL )* 'endwhile'
        {
             MATCHT(62, &FOLLOW_62_in_whileStatement1546);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1548);
            expression34=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


             MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1550);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


            {
                 node->setCondition(expression34
                ); 
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:278:3: ( ( statement | breakStatement ) EOL )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) )
                {
                case ID:
                case 38:
                case 47:
                case 50:
                case 62:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:278:5: ( statement | breakStatement ) EOL
            	    {
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:278:5: ( statement | breakStatement )
            	        {
            	            int alt30=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            case 47:
            	            case 50:
            	            case 62:
            	            	{
            	            		alt30=1;
            	            	}
            	                break;
            	            case 38:
            	            	{
            	            		alt30=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 30;
            	                EXCEPTION->state        = 0;


            	                goto rulewhileStatementEx;

            	            }

            	            switch (alt30)
            	            {
            	        	case 1:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:278:6: statement
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_statement_in_whileStatement1561);
            	        	        statement35=statement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:278:20: breakStatement
            	        	    {
            	        	        {
            	        	             node->addChild(statement35
            	        	            ); 
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_breakStatement_in_whileStatement1571);
            	        	        breakStatement36=breakStatement(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhileStatementEx;
            	        	        }


            	        	        {
            	        	             node->addChild(breakStatement36
            	        	            ); 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(EOL, &FOLLOW_EOL_in_whileStatement1582);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


             MATCHT(46, &FOLLOW_46_in_whileStatement1591);
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end whileStatement */

/**
 * $ANTLR start breakStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:285:1: breakStatement returns [ BreakNode *node] : 'break' 'when' expression ;
 */
static BreakNode *
breakStatement(pilwisscriptParser ctx)
{
    BreakNode * node;


    ExpressionNode * expression37;
    #undef	RETURN_TYPE_expression37
    #define	RETURN_TYPE_expression37 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new BreakNode();

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:289:2: ( 'break' 'when' expression )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:289:4: 'break' 'when' expression
        {
             MATCHT(38, &FOLLOW_38_in_breakStatement1612);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


             MATCHT(61, &FOLLOW_61_in_breakStatement1614);
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_breakStatement1616);
            expression37=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }


            {
                 node->addChild(expression37
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end breakStatement */

/**
 * $ANTLR start typeModifierPart
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:292:1: typeModifierPart returns [ ModifierPart *node] : '{' modifierPart '}' ;
 */
static ModifierPart *
typeModifierPart(pilwisscriptParser ctx)
{
    ModifierPart * node;


    ModifierPart * modifierPart38;
    #undef	RETURN_TYPE_modifierPart38
    #define	RETURN_TYPE_modifierPart38 ModifierPart *

    /* Initialize rule variables
     */



    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:295:2: ( '{' modifierPart '}' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:295:4: '{' modifierPart '}'
        {
             MATCHT(64, &FOLLOW_64_in_typeModifierPart1641);
            if  (HASEXCEPTION())
            {
                goto ruletypeModifierPartEx;
            }


            FOLLOWPUSH(FOLLOW_modifierPart_in_typeModifierPart1643);
            modifierPart38=modifierPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeModifierPartEx;
            }


             MATCHT(65, &FOLLOW_65_in_typeModifierPart1644);
            if  (HASEXCEPTION())
            {
                goto ruletypeModifierPartEx;
            }


            {
                 node=modifierPart38
                ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletypeModifierPartEx; /* Prevent compiler warnings */
    ruletypeModifierPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end typeModifierPart */

/**
 * $ANTLR start modifierPart
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:298:1: modifierPart returns [ ModifierPart *node] : ( formatModifier | domPart | formatModifier ';' domPart );
 */
static ModifierPart *
modifierPart(pilwisscriptParser ctx)
{
    ModifierPart * node;


    FormatNode * formatModifier39;
    #undef	RETURN_TYPE_formatModifier39
    #define	RETURN_TYPE_formatModifier39 FormatNode *

    DomPartNode * domPart40;
    #undef	RETURN_TYPE_domPart40
    #define	RETURN_TYPE_domPart40 DomPartNode *

    FormatNode * formatModifier41;
    #undef	RETURN_TYPE_formatModifier41
    #define	RETURN_TYPE_formatModifier41 FormatNode *

    DomPartNode * domPart42;
    #undef	RETURN_TYPE_domPart42
    #define	RETURN_TYPE_domPart42 DomPartNode *

    /* Initialize rule variables
     */


    	node = new ModifierPart();

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:302:2: ( formatModifier | domPart | formatModifier ';' domPart )

            ANTLR3_UINT32 alt32;

            alt32=3;

            switch ( LA(1) )
            {
            case 47:
            	{
            		switch ( LA(2) )
            		{
            		case 27:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 22:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 22:
            											{
            												switch ( LA(7) )
            												{
            												case 49:
            													{
            														switch ( LA(8) )
            														{
            														case 65:
            															{
            																alt32=1;
            															}
            														    break;
            														case 24:
            															{
            																alt32=3;
            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 32;
            														    EXCEPTION->state        = 11;


            														    goto rulemodifierPartEx;

            														}

            													}
            												    break;
            												case 56:
            													{
            														switch ( LA(8) )
            														{
            														case 65:
            															{
            																alt32=1;
            															}
            														    break;
            														case 24:
            															{
            																alt32=3;
            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 32;
            														    EXCEPTION->state        = 12;


            														    goto rulemodifierPartEx;

            														}

            													}
            												    break;
            												case 51:
            													{
            														switch ( LA(8) )
            														{
            														case 65:
            															{
            																alt32=1;
            															}
            														    break;
            														case 24:
            															{
            																alt32=3;
            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 32;
            														    EXCEPTION->state        = 13;


            														    goto rulemodifierPartEx;

            														}

            													}
            												    break;
            												case 55:
            													{
            														switch ( LA(8) )
            														{
            														case 65:
            															{
            																alt32=1;
            															}
            														    break;
            														case 24:
            															{
            																alt32=3;
            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 32;
            														    EXCEPTION->state        = 14;


            														    goto rulemodifierPartEx;

            														}

            													}
            												    break;
            												case 58:
            													{
            														switch ( LA(8) )
            														{
            														case 65:
            															{
            																alt32=1;
            															}
            														    break;
            														case 24:
            															{
            																alt32=3;
            															}
            														    break;

            														default:
            														    CONSTRUCTEX();
            														    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            														    EXCEPTION->message      = (void *)"";
            														    EXCEPTION->decisionNum  = 32;
            														    EXCEPTION->state        = 15;


            														    goto rulemodifierPartEx;

            														}

            													}
            												    break;

            												default:
            												    CONSTRUCTEX();
            												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            												    EXCEPTION->message      = (void *)"";
            												    EXCEPTION->decisionNum  = 32;
            												    EXCEPTION->state        = 10;


            												    goto rulemodifierPartEx;

            												}

            											}
            										    break;
            										case 65:
            											{
            												alt32=1;
            											}
            										    break;
            										case 24:
            											{
            												alt32=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 32;
            										    EXCEPTION->state        = 9;


            										    goto rulemodifierPartEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 32;
            								    EXCEPTION->state        = 6;


            								    goto rulemodifierPartEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 32;
            						    EXCEPTION->state        = 4;


            						    goto rulemodifierPartEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( LA(4) )
            						{
            						case 65:
            							{
            								alt32=1;
            							}
            						    break;
            						case 24:
            							{
            								alt32=3;
            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 32;
            						    EXCEPTION->state        = 5;


            						    goto rulemodifierPartEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 32;
            				    EXCEPTION->state        = 3;


            				    goto rulemodifierPartEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 32;
            		    EXCEPTION->state        = 1;


            		    goto rulemodifierPartEx;

            		}

            	}
                break;
            case 41:
            	{
            		alt32=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state        = 0;


                goto rulemodifierPartEx;

            }

            switch (alt32)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:302:4: formatModifier
        	    {
        	        FOLLOWPUSH(FOLLOW_formatModifier_in_modifierPart1669);
        	        formatModifier39=formatModifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemodifierPartEx;
        	        }


        	        {
        	             node->addChild(formatModifier39
        	            );
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:303:4: domPart
        	    {
        	        FOLLOWPUSH(FOLLOW_domPart_in_modifierPart1679);
        	        domPart40=domPart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemodifierPartEx;
        	        }


        	        {
        	             node->addChild(domPart40
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:304:4: formatModifier ';' domPart
        	    {
        	        FOLLOWPUSH(FOLLOW_formatModifier_in_modifierPart1690);
        	        formatModifier41=formatModifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemodifierPartEx;
        	        }


        	         MATCHT(24, &FOLLOW_24_in_modifierPart1692);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemodifierPartEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_domPart_in_modifierPart1694);
        	        domPart42=domPart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemodifierPartEx;
        	        }


        	        {
        	             node->addChild(formatModifier41
        	            );node->addChild(domPart42
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulemodifierPartEx; /* Prevent compiler warnings */
    rulemodifierPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end modifierPart */

/**
 * $ANTLR start formatModifier
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:307:1: formatModifier returns [ FormatNode *node] : ( 'format' '=' ID ':' STRING ':' id1= datatype | 'format' '=' ID ':' STRING | 'format' '=' STRING );
 */
static FormatNode *
formatModifier(pilwisscriptParser ctx)
{
    FormatNode * node;


    pANTLR3_COMMON_TOKEN    ID43;
    pANTLR3_COMMON_TOKEN    STRING44;
    pANTLR3_COMMON_TOKEN    ID45;
    pANTLR3_COMMON_TOKEN    STRING46;
    pANTLR3_COMMON_TOKEN    STRING47;
    QString id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 QString

    /* Initialize rule variables
     */


    	node = new FormatNode();

    ID43       = NULL;
    STRING44       = NULL;
    ID45       = NULL;
    STRING46       = NULL;
    STRING47       = NULL;

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:311:2: ( 'format' '=' ID ':' STRING ':' id1= datatype | 'format' '=' ID ':' STRING | 'format' '=' STRING )

            ANTLR3_UINT32 alt33;

            alt33=3;

            switch ( LA(1) )
            {
            case 47:
            	{
            		switch ( LA(2) )
            		{
            		case 27:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						switch ( LA(4) )
            						{
            						case 22:
            							{
            								switch ( LA(5) )
            								{
            								case STRING:
            									{
            										switch ( LA(6) )
            										{
            										case 22:
            											{
            												alt33=1;
            											}
            										    break;
            										case EOL:
            										case ID:
            										case 24:
            										case 42:
            										case 43:
            										case 45:
            										case 47:
            										case 50:
            										case 62:
            										case 65:
            											{
            												alt33=2;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 33;
            										    EXCEPTION->state        = 6;


            										    goto ruleformatModifierEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 33;
            								    EXCEPTION->state        = 5;


            								    goto ruleformatModifierEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 33;
            						    EXCEPTION->state        = 3;


            						    goto ruleformatModifierEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						alt33=3;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 33;
            				    EXCEPTION->state        = 2;


            				    goto ruleformatModifierEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 33;
            		    EXCEPTION->state        = 1;


            		    goto ruleformatModifierEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto ruleformatModifierEx;

            }

            switch (alt33)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:311:4: 'format' '=' ID ':' STRING ':' id1= datatype
        	    {
        	         MATCHT(47, &FOLLOW_47_in_formatModifier1718);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_formatModifier1720);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        ID43 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_formatModifier1722);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatModifier1724);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        STRING44 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_formatModifier1726);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatModifier1728);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_datatype_in_formatModifier1732);
        	        id1=datatype(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        {
        	             node->setDataType(id1
        	            );
        	            							  node->setFormatNameSpace(new IDNode((char *)((ID43->getText(ID43))->chars)));
        	            							  node->setFormat((char *)((STRING44->getText(STRING44))->chars));
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:314:4: 'format' '=' ID ':' STRING
        	    {
        	         MATCHT(47, &FOLLOW_47_in_formatModifier1741);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_formatModifier1743);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        ID45 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_formatModifier1745);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(22, &FOLLOW_22_in_formatModifier1747);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        STRING46 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_formatModifier1749);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        {
        	             node->setFormatNameSpace(new IDNode((char *)((ID45->getText(ID45))->chars)));
        	            							  node->setFormat((char *)((STRING46->getText(STRING46))->chars));
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:316:4: 'format' '=' STRING
        	    {
        	         MATCHT(47, &FOLLOW_47_in_formatModifier1758);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_formatModifier1760);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        STRING47 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_formatModifier1762);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleformatModifierEx;
        	        }


        	        {
        	             node->setFormat((char *)((STRING47->getText(STRING47))->chars)); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleformatModifierEx; /* Prevent compiler warnings */
    ruleformatModifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end formatModifier */

/**
 * $ANTLR start datatype
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:319:1: datatype returns [ QString typeName] : ( 'gridcoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'table' );
 */
static QString
datatype(pilwisscriptParser ctx)
{
    QString typeName;


    /* Initialize rule variables
     */

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:320:2: ( 'gridcoverage' | 'polygoncoverage' | 'linecoverage' | 'pointcoverage' | 'table' )

            ANTLR3_UINT32 alt34;

            alt34=5;

            switch ( LA(1) )
            {
            case 49:
            	{
            		alt34=1;
            	}
                break;
            case 56:
            	{
            		alt34=2;
            	}
                break;
            case 51:
            	{
            		alt34=3;
            	}
                break;
            case 55:
            	{
            		alt34=4;
            	}
                break;
            case 58:
            	{
            		alt34=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto ruledatatypeEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:320:4: 'gridcoverage'
        	    {
        	         MATCHT(49, &FOLLOW_49_in_datatype1782);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "gridcoverage"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:321:4: 'polygoncoverage'
        	    {
        	         MATCHT(56, &FOLLOW_56_in_datatype1792);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "polygoncoverage"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:322:4: 'linecoverage'
        	    {
        	         MATCHT(51, &FOLLOW_51_in_datatype1802);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "linecoverage";
        	        }


        	    }
        	    break;
        	case 4:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:323:4: 'pointcoverage'
        	    {
        	         MATCHT(55, &FOLLOW_55_in_datatype1812);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "pointcoverage"; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:324:4: 'table'
        	    {
        	         MATCHT(58, &FOLLOW_58_in_datatype1822);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledatatypeEx;
        	        }


        	        {
        	             typeName = "table"; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledatatypeEx; /* Prevent compiler warnings */
    ruledatatypeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return typeName;
}
/* $ANTLR end datatype */

/**
 * $ANTLR start domPart
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:327:1: domPart returns [ DomPartNode *node] : ( 'dom' '=' ID | 'dom' '=' valrangePart );
 */
static DomPartNode *
domPart(pilwisscriptParser ctx)
{
    DomPartNode * node;


    pANTLR3_COMMON_TOKEN    ID48;
    ValueRangeNode * valrangePart49;
    #undef	RETURN_TYPE_valrangePart49
    #define	RETURN_TYPE_valrangePart49 ValueRangeNode *

    /* Initialize rule variables
     */


    	node = new DomPartNode();

    ID48       = NULL;

    {
        {
            //  H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:331:2: ( 'dom' '=' ID | 'dom' '=' valrangePart )

            ANTLR3_UINT32 alt35;

            alt35=2;

            switch ( LA(1) )
            {
            case 41:
            	{
            		switch ( LA(2) )
            		{
            		case 27:
            			{
            				switch ( LA(3) )
            				{
            				case ID:
            					{
            						alt35=1;
            					}
            				    break;
            				case 60:
            					{
            						alt35=2;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 35;
            				    EXCEPTION->state        = 2;


            				    goto ruledomPartEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 35;
            		    EXCEPTION->state        = 1;


            		    goto ruledomPartEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 35;
                EXCEPTION->state        = 0;


                goto ruledomPartEx;

            }

            switch (alt35)
            {
        	case 1:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:331:4: 'dom' '=' ID
        	    {
        	         MATCHT(41, &FOLLOW_41_in_domPart1849);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_domPart1851);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	        ID48 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_domPart1853);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	        {
        	             node->setDomainId(new IDNode((char *)((ID48->getText(ID48))->chars)));
        	        }


        	    }
        	    break;
        	case 2:
        	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:332:4: 'dom' '=' valrangePart
        	    {
        	         MATCHT(41, &FOLLOW_41_in_domPart1863);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	         MATCHT(27, &FOLLOW_27_in_domPart1865);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_valrangePart_in_domPart1867);
        	        valrangePart49=valrangePart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomPartEx;
        	        }


        	        {
        	             node->setValueRange(valrangePart49
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledomPartEx; /* Prevent compiler warnings */
    ruledomPartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end domPart */

/**
 * $ANTLR start valrangePart
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:335:1: valrangePart returns [ ValueRangeNode *node] : 'vr' '=' ;
 */
static ValueRangeNode *
valrangePart(pilwisscriptParser ctx)
{
    ValueRangeNode * node;


    /* Initialize rule variables
     */

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:336:2: ( 'vr' '=' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:336:4: 'vr' '='
        {
             MATCHT(60, &FOLLOW_60_in_valrangePart1887);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


             MATCHT(27, &FOLLOW_27_in_valrangePart1889);
            if  (HASEXCEPTION())
            {
                goto rulevalrangePartEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalrangePartEx; /* Prevent compiler warnings */
    rulevalrangePartEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end valrangePart */

/**
 * $ANTLR start ifStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:339:1: ifStatement returns [ ASTNode *node] : 'if' expression 'then' ( statement )+ ( 'elsif' expression 'then' ( statement )+ )* ( 'else' ( statement )+ )? 'endif' ;
 */
static ASTNode *
ifStatement(pilwisscriptParser ctx)
{
    ASTNode * node;


    /* Initialize rule variables
     */

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:340:2: ( 'if' expression 'then' ( statement )+ ( 'elsif' expression 'then' ( statement )+ )* ( 'else' ( statement )+ )? 'endif' )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:340:4: 'if' expression 'then' ( statement )+ ( 'elsif' expression 'then' ( statement )+ )* ( 'else' ( statement )+ )? 'endif'
        {
             MATCHT(50, &FOLLOW_50_in_ifStatement1907);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1909);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


             MATCHT(59, &FOLLOW_59_in_ifStatement1911);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:340:27: ( statement )+
            {
                int cnt36=0;

                for (;;)
                {
                    int alt36=2;
            	switch ( LA(1) )
            	{
            	case ID:
            	case 47:
            	case 50:
            	case 62:
            		{
            			alt36=1;
            		}
            	    break;

            	}

            	switch (alt36)
            	{
            	    case 1:
            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:340:27: statement
            	        {
            	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1913);
            	            statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleifStatementEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt36 >= 1 )
            		{
            		    goto loop36;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleifStatementEx;
            	}
            	cnt36++;
                }
                loop36: ;	/* Jump to here if this rule does not match */
            }

            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:341:3: ( 'elsif' expression 'then' ( statement )+ )*

            for (;;)
            {
                int alt38=2;
                switch ( LA(1) )
                {
                case 43:
                	{
                		alt38=1;
                	}
                    break;

                }

                switch (alt38)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:341:4: 'elsif' expression 'then' ( statement )+
            	    {
            	         MATCHT(43, &FOLLOW_43_in_ifStatement1919);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_ifStatement1921);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	         MATCHT(59, &FOLLOW_59_in_ifStatement1923);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:341:30: ( statement )+
            	        {
            	            int cnt37=0;

            	            for (;;)
            	            {
            	                int alt37=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case ID:
            	        	case 47:
            	        	case 50:
            	        	case 62:
            	        		{
            	        			alt37=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt37)
            	        	{
            	        	    case 1:
            	        	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:341:30: statement
            	        	        {
            	        	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1925);
            	        	            statement(ctx);

            	        	            FOLLOWPOP();
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleifStatementEx;
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt37 >= 1 )
            	        		{
            	        		    goto loop37;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleifStatementEx;
            	        	}
            	        	cnt37++;
            	            }
            	            loop37: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:342:3: ( 'else' ( statement )+ )?
            {
                int alt40=2;
                switch ( LA(1) )
                {
                    case 42:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:342:4: 'else' ( statement )+
            	    {
            	         MATCHT(42, &FOLLOW_42_in_ifStatement1933);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }


            	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:342:11: ( statement )+
            	        {
            	            int cnt39=0;

            	            for (;;)
            	            {
            	                int alt39=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case ID:
            	        	case 47:
            	        	case 50:
            	        	case 62:
            	        		{
            	        			alt39=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt39)
            	        	{
            	        	    case 1:
            	        	        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:342:11: statement
            	        	        {
            	        	            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1935);
            	        	            statement(ctx);

            	        	            FOLLOWPOP();
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleifStatementEx;
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt39 >= 1 )
            	        		{
            	        		    goto loop39;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleifStatementEx;
            	        	}
            	        	cnt39++;
            	            }
            	            loop39: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

             MATCHT(45, &FOLLOW_45_in_ifStatement1942);
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end ifStatement */

/**
 * $ANTLR start returnStatement
 * H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:345:1: returnStatement returns [ ReturnNode *node] : 'return' ( expression )? ;
 */
static ReturnNode *
returnStatement(pilwisscriptParser ctx)
{
    ReturnNode * node;


    ExpressionNode * expression50;
    #undef	RETURN_TYPE_expression50
    #define	RETURN_TYPE_expression50 ExpressionNode *

    /* Initialize rule variables
     */


    	node = new ReturnNode();

    {
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:349:2: ( 'return' ( expression )? )
        // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:349:4: 'return' ( expression )?
        {
             MATCHT(57, &FOLLOW_57_in_returnStatement1961);
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }


            // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:349:13: ( expression )?
            {
                int alt41=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case INT:
                    case STRING:
                    case 14:
                    case 17:
                    case 19:
                    case 53:
                    	{
                    		alt41=1;
                    	}
                        break;
                }

                switch (alt41)
                {
            	case 1:
            	    // H:\\projects\\Ilwis4\\projects\\sources\\ilwisscript\\parserlexer\\ilwisscript.g:349:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement1963);
            	        expression50=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                node->addChild(expression50
                ); 
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return node;
}
/* $ANTLR end returnStatement */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
