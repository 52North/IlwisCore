#include <QString>
#include <QSqlQuery>
#include <QSqlRecord>
#include <QSqlField>
#include <QSqlError>
#include <QSettings>
#include <QUrlQuery>

#include "kernel.h"
#include "angle.h"
#include "point.h"
#include "box.h"
#include "factory.h"
#include "abstractfactory.h"
#include "connectorinterface.h"
#include "connectorfactory.h"
#include "ilwisobjectfactory.h"
#include "ilwisdata.h"
#include "numericrange.h"
#include "domain.h"
#include "numericdomain.h"
#include "itemdomain.h"
#include "domainitem.h"
#include "identifieritem.h"
#include "thematicitem.h"
#include "resource.h"
#include "internalobjectfactory.h"
#include "ellipsoid.h"
#include "geodeticdatum.h"
#include "projection.h"
#include "projectionimplementation.h"
#include "projectionfactory.h"
#include "nullprojection.h"
#include "coordinatesystem.h"
#include "valuedefiner.h"
#include "column.h"
#include "table.h"
#include "coverage.h"
#include "georeference.h"
#include "boost/numeric/ublas/matrix.hpp"
#include "boostext.h"
#include "simpelgeoreference.h"
#include "cornersgeoreference.h"
#include "grid.h"
#include "grid2d.h"
#include "gridcoverage.h"
#include "gridcoveragelist.h"
#include "ilwisobjectconnector.h"
#include "gridcoverageconnector.h"
#include "column.h"
#include "table.h"
#include "conventionalcoordinatesystem.h"


using namespace Ilwis;

InternalObjectFactory::InternalObjectFactory() : IlwisObjectFactory("IlwisObjectFactory", "internal", "")
{
}

Ilwis::IlwisObject *InternalObjectFactory::create(const Resource& item) const
{
    if ( item.url().scheme()!="ilwis")
        return 0;


    if ( item.ilwisType() & itELLIPSOID) {
        return createEllipsoid(item);
    } else if ( item.ilwisType() & itPROJECTION) {
        return createProjection(item) ;
    } else if ( item.ilwisType() & itGEODETICDATUM) {
        return createDatum(item);
    } else if ( item.ilwisType() & itDOMAIN) {
        return createDomain(item);
    } else if ( item.ilwisType() & itCOORDSYSTEM) {
        return createCsyFromCode(item);
    } else if ( item.ilwisType() & itGRIDCOVERAGE) {
        return createGridCoverage(item);
    }
    return 0;
}

IlwisObject *InternalObjectFactory::create(IlwisTypes type, const QString& subtype) const
{
    switch(type) {
    case itITEMDOMAIN:
    {
        QString sub = subtype.toLower();
        if (  sub == "thematic")
            return new ItemDomain<ThematicItem>();
        if ( sub == "identifier")
            return new ItemDomain<NamedIdentifier>();
        if ( sub == "indexed")
            return new ItemDomain<IndexedIdentifier>();
    }
    case itGRIDCOVERAGE:
        return new GridCoverage();
    case itTABLE:
        return new Table();
    case itCORNERSGEOREF:
        return new CornersGeoReference();
    case itCONVENTIONALCOORDSYSTEM:
        return new ConventionalCoordinateSystem();
    case itNUMERICDOMAIN:
        return new NumericDomain();
    case itPROJECTION:
        return new Projection();
    case itELLIPSOID:
        return new Ellipsoid();
    case itGEODETICDATUM:
        return new GeodeticDatum();
    case itGRIDCOVERAGELIST:
        return new GridCoverageList();


    }
    return 0;
}

bool InternalObjectFactory::canUse(const Resource& item) const
{
    if ( item.url().scheme()!="ilwis")
        return false;

    if ( item.ilwisType() & itELLIPSOID) {
        return true;
    } else if ( item.ilwisType() & itPROJECTION) {
        return true;
    } else if ( item.ilwisType() & itGEODETICDATUM) {
        return true;
    } else if ( item.ilwisType() & itDOMAIN) {
        return true;
    } else if ( item.ilwisType() & itCOORDSYSTEM) {
        return true;
    } else if ( item.ilwisType() & itGRIDCOVERAGE) {
        return true;
    }

    return false;
}

IlwisObject *InternalObjectFactory::createGridCoverage(const Resource& item) const {
    if ( !item.isValid()) {
        ERROR1(ERR_NO_INITIALIZED_1,"resource");
        return 0;
    }
    GridCoverage *gcoverage = new GridCoverage(item);
    gcoverage->prepare();
    gcoverage->setName(QString("internal_%1").arg(gcoverage->id()));
    Resource resource = property2Resource(item["georeference"], itGEOREF);
    if ( resource.isValid()) {
        IGeoReference grf;
        grf.prepare(resource);
        if ( grf.isValid())
            gcoverage->setGeoreference(grf);
    }
    resource = property2Resource(item["coordinatesystem"], itCOORDSYSTEM);
    if ( resource.isValid()) {
        ICoordinateSystem csy;
        csy.prepare(resource);
        if ( csy.isValid())
            gcoverage->setCoordinateSystem(csy);
    }
    resource = property2Resource(item["domain"], itDOMAIN);
    if ( resource.isValid()) {
        IDomain dom;
        dom.prepare(resource);
        if ( dom.isValid())
            gcoverage->setDomain(dom);
    }
    QString ssz = item["size"];
    if (ssz != "") {
        QStringList vals = ssz.split(" ");
        QSize sz(vals[0].toInt(), vals[1].toInt());
        gcoverage->setSize(sz);
    }
    GridCoverageConnector *connector = ConnectorFactory::screate<GridCoverageConnector>(item, "internal");
    gcoverage->setConnector(connector);



    return gcoverage;
}

Resource InternalObjectFactory::property2Resource(const QString& property, IlwisTypes type) const{
    if ( property == sUNDEF )
        return Resource();
    return mastercatalog()->name2Resource(property, type);
}

IlwisObject *InternalObjectFactory::createDomain(const Resource& item) const{
    QString code = item.code();
    if ( code != "") {
        QSqlQuery db(kernel()->database());
        QString query = QString("Select linkedtable from codes where code = '%1'").arg(code);
        if (db.exec(query)) {
            if ( db.next()){
                QString table = db.value(0).toString();
                if ( table == "numericdomain"){
                    query = QString("Select * from numericdomain where code='%1'").arg(code);
                    if (db.exec(query)) {
                        if ( db.next()){
                            QSqlRecord rec = db.record();
                            NumericDomain *dv = new NumericDomain(item);

                            dv->fromInternal(rec);
                            double vmin = rec.field("minv").value().toDouble();
                            double vmax = rec.field("maxv").value().toDouble();
                            double step = rec.field("resolution").value().toDouble();
                            int range_strict = rec.field("range_strict").value().toInt();
                            // TODO, implement unit stuff
                            //QString unit = rec.field("unit").value().toString();
                            if ( fmod(step,1.0) == 0)
                                dv->setRange(new NumericRange<qint32>(vmin, vmax));
                            else
                                dv->setRange(new NumericRange<double>(vmin, vmax));

                            dv->setStrict(range_strict ? true : false);
                            QString parent = rec.field("parent").value().toString();
                            if ( parent != "" && parent !=  code) { // no parenting to itself
                                IDomain dom;
                                dom.prepare(parent);
                                if ( dom.isValid()) {
                                    dv->setParent(dom);
                                }
                            }
                            return dv;
                        }else {
                            kernel()->issues()->log(TR(ERR_FIND_SYSTEM_OBJECT_1).arg(code));
                        }
                    }

                } else if (table == "thematicdomain"){
                    //TODO internal thematic domains
                }

            }
        }else {
            kernel()->issues()->log(TR(ERR_FIND_SYSTEM_OBJECT_1).arg(code));
        }
    }else {
        kernel()->issues()->log(TR(ERR_MISSING_CODE_FOR_SYSTEM_OBJECT));
    }

    return 0;
}

IlwisObject *InternalObjectFactory::createCsyFromCode(const Resource& item) const {
    QString code = item.code();
    QString query = QString("select * from projectedcsy where code='%1'").arg(code);
    QSqlQuery db(kernel()->database());
    if ( db.exec(query)) {
        if (db.next()) {
            QSqlRecord rec = db.record();
            QString projParms = rec.value("proj_params").toString();
            ConventionalCoordinateSystem *csy = new ConventionalCoordinateSystem(item);
            csy->setName(item.name());
            csy->setCode(item.code());
            csy->prepare("proj4=" + projParms);
            return csy;

        } else {
            kernel()->issues()->log(TR(ERR_COULDNT_CREATE_OBJECT_FOR_2).arg("coordinatesystem", item.name()));
        }
    }
    return 0;

}


IlwisObject *InternalObjectFactory::createProjection(const Resource& item) const {
    QString query;
    QString code = item.code();
    if ( code != "") {
        QSqlQuery db(kernel()->database());
        query = QString("Select * from projection where code = '%1'").arg(code);
        if ( db.exec(query)) {
            if (db.next()) {
                QSqlRecord rec = db.record();
                if ( code == "longlat") // special case
                    return new NullProjection(item);
                const ProjectionFactory *factory =  kernel()->factory<ProjectionFactory>("ProjectionFactory",item);
                if ( factory) {
                    ProjectionImplementation *projimpl = static_cast<ProjectionImplementation *>(factory->create(item));
                    if (!projimpl) {
                        kernel()->issues()->log(TR(ERR_COULDNT_CREATE_OBJECT_FOR_2).arg("projection", item.name()));
                        return 0;
                    }
                    Projection *proj = new Projection();
                    proj->setImplementation(projimpl);
                    proj->fromInternal(rec);
                    proj->setAuthority(rec.field("authority").value().toString());
                    proj->setWkt(rec.field("wkt").value().toString());
                    return proj;
                } else {
                    kernel()->issues()->log(TR(ERR_COULDNT_CREATE_OBJECT_FOR_2).arg("ProjectionFactory",item.name()));
                }
            } else {
                kernel()->issues()->log(TR(ERR_FIND_SYSTEM_OBJECT_1).arg(code));
            }
        } else{
            kernel()->issues()->logSql(db.lastError());
        }
    } else {
        kernel()->issues()->log(TR(ERR_MISSING_CODE_FOR_SYSTEM_OBJECT));
    }
    return 0;
}

IlwisObject *InternalObjectFactory::createDatum(const Resource& item) const {
    QString query;
    if ( item.code() != sUNDEF) {
        QString code = item.code();
        if ( code != "") {
            query = QString("Select * from datum where code = '%1'").arg(code);
        }
    }
    if ( item["area"] != sUNDEF) {
        QString name = item.name();
        QString area = item["area"];
        query = QString("Select * from datum where name='%1' and area='%1'").arg(name, area);
    }

    if ( query == "")
        return 0;

    QSqlQuery db(kernel()->database());
    if (db.exec(query) && db.next()) {
        GeodeticDatum *datum = new GeodeticDatum(item);
        QSqlRecord rec = db.record();
        datum->fromInternal(rec);
        datum->setAuthority(rec.field("authority").value().toString());
        datum->setArea(rec.field("area").value().toString());
        datum->setCode(rec.field("code").value().toString());
        datum->set3TransformationParameters(rec.field("dx").value().toDouble(),
                                            rec.field("dy").value().toDouble(),
                                            rec.field("dz").value().toDouble());

        QString ellipsoid = rec.field("ellipsoid").value().toString();
        QString ell(QString("ilwis://localhost/tables/ellipsoid?code=%1").arg(ellipsoid));
        IEllipsoid spheroid;
        spheroid.prepare(ell);
        datum->setEllipsoid(spheroid);
        return datum;
    }

    return 0;
}

IlwisObject *InternalObjectFactory::createEllipsoid(const Resource& item) const {
    QString query    ;
    QString code = item.code();

    if ( code != sUNDEF) {
        query = QString("Select * from ellipsoid where code = '%1'").arg(code);

    }else {
        QUrlQuery queryItem(item.url());
        if ( queryItem.hasQueryItem("wkt")) {

            QString wkt = queryItem.queryItemValue("wkt");
            if ( wkt != "") {
                query = QString("Select * from ellipsoid where wkt = '%1'").arg(wkt);
            }

        }
    }
    return createEllipsoidFromQuery(query, item);
}

IlwisObject *InternalObjectFactory::createEllipsoidFromQuery(const QString &query, const Resource& resource) const {
    if ( query == "") {
        kernel()->issues()->log(TR("No valid ellipsoid query could be made"));
        return 0;
    }

    QSqlQuery db(kernel()->database());
    if (db.exec(query) && db.next()) {
        Ellipsoid *ellipsoid = new Ellipsoid(resource);
        ellipsoid->fromInternal(db.record());
        double ma = db.record().field("majoraxis").value().toDouble();
        double rf = db.record().field("invflattening").value().toDouble();
        ellipsoid->setEllipsoid(ma,rf);
        ellipsoid->setAuthority(db.record().field("authority").value().toString());
        return ellipsoid;
    }
    return 0;
}

