#include <QString>
#include "geos.h"
#include "kernel.h"
#include "ilwis.h"
#include "latlon.h"
#include "ilwisobject.h"
#include "ilwisdata.h"
#include "ellipsoid.h"
#include "geodeticdatum.h"
#include "projection.h"
#include "domain.h"
#include "coordinatesystem.h"
#include "vialatloncoordinatesystem.h"
#include "projectedcoordinatesystem.h"

using namespace Ilwis;

ProjectedCoordinateSystem::ProjectedCoordinateSystem()
{
}

LatLon ProjectedCoordinateSystem::convertCoordinate(const Coordinate &crdSource) const
{
    if (prj.fValid() && !crd.fUndef()) {
      XY xy;
      xy.x = (crd.x - prj->x0) / prj->ell.a * rUnitSize;
      xy.y = (crd.y - prj->y0) / prj->ell.a * rUnitSize;
      PhiLam pl = prj->plConv(xy);
      if (pl.fUndef())
        return LatLon();
      if (abs(pl.Phi) > M_PI_2)
        return LatLon();
      pl.Lam += prj->lam0;
      pl.AdjustLon();
      LatLon ll;
      ll.Phi(pl.Phi);
      ll.Lambda(pl.Lam);
      return ll;
    }
    else
      return LatLon();
}

Coordinate ProjectedCoordinateSystem::convertLatLon(const LatLon &ll) const
{
    return Coordinate();
}
