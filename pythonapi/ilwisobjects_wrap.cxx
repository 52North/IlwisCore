/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

   #include <cmath>



#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Ilwis__ContainerStatisticsT_double_t swig_types[0]
#define SWIGTYPE_p_Ilwis__DomainItem swig_types[1]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t swig_types[2]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__Coverage_t swig_types[3]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__Domain_t swig_types[4]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t swig_types[5]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__GeoReference_t swig_types[6]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t swig_types[7]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t swig_types[8]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t swig_types[9]
#define SWIGTYPE_p_Ilwis__IlwisDataT_Ilwis__Table_t swig_types[10]
#define SWIGTYPE_p_Ilwis__NumericRange swig_types[11]
#define SWIGTYPE_p_Ilwis__PixelIterator swig_types[12]
#define SWIGTYPE_p_QSharedPointerT_Ilwis__DomainItem_t swig_types[13]
#define SWIGTYPE_p__object swig_types[14]
#define SWIGTYPE_p_bufferinfo swig_types[15]
#define SWIGTYPE_p_char swig_types[16]
#define SWIGTYPE_p_geos__geom__Geometry swig_types[17]
#define SWIGTYPE_p_int swig_types[18]
#define SWIGTYPE_p_long_long swig_types[19]
#define SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t swig_types[20]
#define SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t swig_types[21]
#define SWIGTYPE_p_pythonapi__Catalog swig_types[22]
#define SWIGTYPE_p_pythonapi__Collection swig_types[23]
#define SWIGTYPE_p_pythonapi__Color swig_types[24]
#define SWIGTYPE_p_pythonapi__ColorDomain swig_types[25]
#define SWIGTYPE_p_pythonapi__ColorModelNS swig_types[26]
#define SWIGTYPE_p_pythonapi__ColorModelNS__Value swig_types[27]
#define SWIGTYPE_p_pythonapi__ColorPalette swig_types[28]
#define SWIGTYPE_p_pythonapi__ColorRange swig_types[29]
#define SWIGTYPE_p_pythonapi__ColumnDefinition swig_types[30]
#define SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t swig_types[31]
#define SWIGTYPE_p_pythonapi__ContinuousColorRange swig_types[32]
#define SWIGTYPE_p_pythonapi__Coordinate swig_types[33]
#define SWIGTYPE_p_pythonapi__CoordinateSystem swig_types[34]
#define SWIGTYPE_p_pythonapi__Coverage swig_types[35]
#define SWIGTYPE_p_pythonapi__DataDefinition swig_types[36]
#define SWIGTYPE_p_pythonapi__Domain swig_types[37]
#define SWIGTYPE_p_pythonapi__DomainItem swig_types[38]
#define SWIGTYPE_p_pythonapi__Engine swig_types[39]
#define SWIGTYPE_p_pythonapi__Feature swig_types[40]
#define SWIGTYPE_p_pythonapi__FeatureCoverage swig_types[41]
#define SWIGTYPE_p_pythonapi__FeatureIterator swig_types[42]
#define SWIGTYPE_p_pythonapi__FlowVal swig_types[43]
#define SWIGTYPE_p_pythonapi__FlowVal__Value swig_types[44]
#define SWIGTYPE_p_pythonapi__GeoReference swig_types[45]
#define SWIGTYPE_p_pythonapi__Geometry swig_types[46]
#define SWIGTYPE_p_pythonapi__IOOptions swig_types[47]
#define SWIGTYPE_p_pythonapi__IlwisObject swig_types[48]
#define SWIGTYPE_p_pythonapi__IndexedIdentifier swig_types[49]
#define SWIGTYPE_p_pythonapi__IndexedItemRange swig_types[50]
#define SWIGTYPE_p_pythonapi__Interval swig_types[51]
#define SWIGTYPE_p_pythonapi__ItemDomain swig_types[52]
#define SWIGTYPE_p_pythonapi__ItemRange swig_types[53]
#define SWIGTYPE_p_pythonapi__NamedIdentifier swig_types[54]
#define SWIGTYPE_p_pythonapi__NamedItemRange swig_types[55]
#define SWIGTYPE_p_pythonapi__NumericDomain swig_types[56]
#define SWIGTYPE_p_pythonapi__NumericItemRange swig_types[57]
#define SWIGTYPE_p_pythonapi__NumericRange swig_types[58]
#define SWIGTYPE_p_pythonapi__Object swig_types[59]
#define SWIGTYPE_p_pythonapi__PixelIterator swig_types[60]
#define SWIGTYPE_p_pythonapi__PixelTemplateT_double_t swig_types[61]
#define SWIGTYPE_p_pythonapi__PixelTemplateT_int_t swig_types[62]
#define SWIGTYPE_p_pythonapi__Properties swig_types[63]
#define SWIGTYPE_p_pythonapi__Properties__Values swig_types[64]
#define SWIGTYPE_p_pythonapi__Range swig_types[65]
#define SWIGTYPE_p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t swig_types[66]
#define SWIGTYPE_p_pythonapi__RasterCoverage swig_types[67]
#define SWIGTYPE_p_pythonapi__SizeTemplateT_double_t swig_types[68]
#define SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t swig_types[69]
#define SWIGTYPE_p_pythonapi__Table swig_types[70]
#define SWIGTYPE_p_pythonapi__TextDomain swig_types[71]
#define SWIGTYPE_p_pythonapi__ThematicItem swig_types[72]
#define SWIGTYPE_p_pythonapi__ThematicRange swig_types[73]
#define SWIGTYPE_p_pythonapi__TimeDomain swig_types[74]
#define SWIGTYPE_p_pythonapi__TimeInterval swig_types[75]
#define SWIGTYPE_p_pythonapi__VertexIterator swig_types[76]
#define SWIGTYPE_p_pythonapi__it swig_types[77]
#define SWIGTYPE_p_short swig_types[78]
#define SWIGTYPE_p_signed_char swig_types[79]
#define SWIGTYPE_p_std__string swig_types[80]
#define SWIGTYPE_p_unsigned_char swig_types[81]
#define SWIGTYPE_p_unsigned_int swig_types[82]
#define SWIGTYPE_p_unsigned_long_long swig_types[83]
#define SWIGTYPE_p_unsigned_short swig_types[84]
static swig_type_info *swig_types[86];
static swig_module_info swig_module = {swig_types, 85, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _ilwisobjects.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__ilwisobjects

#else
#  define SWIG_init    init_ilwisobjects

#endif
#define SWIG_name    "_ilwisobjects"

#define SWIGVERSION 0x030008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include "kernel.h"
#include "ilwisdata.h"
#include "util/range.h"
#include "itemrange.h"
#include "catalog.h"

#include "pythonapi_pyobject.h"
#include "pythonapi_error.h"
#include "pythonapi_extension.h"
#include "pythonapi_object.h"
#include "pythonapi_engine.h"
#include "pythonapi_collection.h"
#include "pythonapi_ilwisobject.h"
#include "pythonapi_coordinatesystem.h"
#include "pythonapi_table.h"
#include "pythonapi_coverage.h"
#include "pythonapi_object.h"
#include "pythonapi_util.h"
#include "pythonapi_geometry.h"
#include "pythonapi_feature.h"
#include "pythonapi_featureiterator.h"
#include "pythonapi_featurecoverage.h"
#include "pythonapi_pixeliterator.h"
#include "pythonapi_georeference.h"
#include "pythonapi_rastercoverage.h"
#include "pythonapi_range.h"
#include "pythonapi_catalog.h"
#include "pythonapi_domain.h"
#include "pythonapi_datadefinition.h"
#include "pythonapi_columndefinition.h"
#include "pythonapi_domainitem.h"
#include "pythonapi_rangeiterator.h"
#include "pythonapi_vertexiterator.h"


void exitPython()
{
    pythonapi::_exitIlwisObjects();
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	#if PY_VERSION_HEX>=0x03000000
	assert(0); /* Should never reach here in Python 3 */
	#endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


  #define SWIG_From_long   PyLong_FromLong 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap__initIlwisObjects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_initIlwisObjects",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_initIlwisObjects" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (bool)pythonapi::_initIlwisObjects((char const *)arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap__exitIlwisObjects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":_exitIlwisObjects")) SWIG_fail;
  {
    try {
      pythonapi::_exitIlwisObjects();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disconnectIssueLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":disconnectIssueLogger")) SWIG_fail;
  {
    try {
      pythonapi::disconnectIssueLogger();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connectIssueLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":connectIssueLogger")) SWIG_fail;
  {
    try {
      pythonapi::connectIssueLogger();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_it(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::it *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_it")) SWIG_fail;
  {
    try {
      result = (pythonapi::it *)new pythonapi::it();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__it, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_it(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::it *arg1 = (pythonapi::it *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_it",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__it, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_it" "', argument " "1"" of type '" "pythonapi::it *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::it * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *it_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__it, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Object" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object___bool__" "', argument " "1"" of type '" "pythonapi::Object const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Object const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object___str__" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_ilwisType" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Engine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Engine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Engine")) SWIG_fail;
  {
    try {
      result = (pythonapi::Engine *)new pythonapi::Engine();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Engine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  std::string arg10 ;
  std::string arg11 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj9, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "10"" of type '" "std::string""'"); 
    }
    arg10 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj10, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "11"" of type '" "std::string""'"); 
    }
    arg11 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  std::string arg10 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj9, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "10"" of type '" "std::string""'"); 
    }
    arg10 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5,arg6);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4,arg5);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Engine__do2",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Engine__do2",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  qint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine__do2",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do2" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (qint64)pythonapi::Engine::_do2(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine__do2__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Engine__do2__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Engine__do2__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Engine__do2__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Engine__do2__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Engine__do2__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Engine__do2__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Engine__do2__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_AsPtr_std_string(argv[9], (std::string**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_Engine__do2__SWIG_1(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_AsPtr_std_string(argv[9], (std::string**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_AsPtr_std_string(argv[10], (std::string**)(0));
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_Engine__do2__SWIG_0(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine__do2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do2(std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  std::string arg10 ;
  std::string arg11 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj9, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "10"" of type '" "std::string""'"); 
    }
    arg10 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj10, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "11"" of type '" "std::string""'"); 
    }
    arg11 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  std::string arg10 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj9, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "10"" of type '" "std::string""'"); 
    }
    arg10 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "9"" of type '" "std::string""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "8"" of type '" "std::string""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5,arg6);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Engine__do",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4,arg5);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Engine__do",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Engine__do",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine__do",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Engine__do" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Object *)pythonapi::Engine::_do(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine__do(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine__do__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Engine__do__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Engine__do__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Engine__do__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Engine__do__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Engine__do__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Engine__do__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Engine__do__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_AsPtr_std_string(argv[9], (std::string**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_Engine__do__SWIG_1(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_AsPtr_std_string(argv[8], (std::string**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_AsPtr_std_string(argv[9], (std::string**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_AsPtr_std_string(argv[10], (std::string**)(0));
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_Engine__do__SWIG_0(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine__do'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string,std::string)\n"
    "    pythonapi::Engine::_do(std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Engine_setWorkingCatalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_setWorkingCatalog",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_setWorkingCatalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_setWorkingCatalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      pythonapi::Engine::setWorkingCatalog((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_getLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine_getLocation")) SWIG_fail;
  {
    try {
      result = pythonapi::Engine::getLocation();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_operations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine_operations")) SWIG_fail;
  {
    try {
      result = (PyObject *)pythonapi::Engine::operations();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_operationMetaData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Engine_operationMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_operationMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_operationMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Engine_operationMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_operationMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = pythonapi::Engine::operationMetaData((std::string const &)*arg1,(std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_operationMetaData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Engine_operationMetaData",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Engine_operationMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Engine_operationMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = pythonapi::Engine::operationMetaData((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Engine_operationMetaData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Engine_operationMetaData__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Engine_operationMetaData__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Engine_operationMetaData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Engine::operationMetaData(std::string const &,std::string const &)\n"
    "    pythonapi::Engine::operationMetaData(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Engine__catalogItems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":Engine__catalogItems")) SWIG_fail;
  {
    try {
      result = (PyObject *)pythonapi::Engine::_catalogItems();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Engine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Engine *arg1 = (pythonapi::Engine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Engine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Engine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Engine" "', argument " "1"" of type '" "pythonapi::Engine *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Engine * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Engine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Engine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Collection___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Collection___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection___bool__" "', argument " "1"" of type '" "pythonapi::Collection const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Collection const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Collection___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Collection___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection___str__" "', argument " "1"" of type '" "pythonapi::Collection *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Collection_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Collection_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection_ilwisType" "', argument " "1"" of type '" "pythonapi::Collection *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Collection___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Collection___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection___len__" "', argument " "1"" of type '" "pythonapi::Collection *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  {
    try {
      result = (int)(arg1)->__len__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Collection__getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Collection__getitem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection__getitem" "', argument " "1"" of type '" "pythonapi::Collection *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Collection__getitem" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (pythonapi::Object *)(arg1)->_getitem(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Collection_toCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Collection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Collection_toCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Collection_toCollection" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::Collection *)pythonapi::Collection::toCollection(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Collection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Collection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Collection *arg1 = (pythonapi::Collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Collection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Collection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Collection" "', argument " "1"" of type '" "pythonapi::Collection *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Collection * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Collection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Collection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IlwisObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IlwisObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IlwisObject" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_open__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  pythonapi::IOOptions *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IlwisObject_open",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_open" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IlwisObject_open" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_pythonapi__IOOptions,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IlwisObject_open" "', argument " "5"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "5"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  arg5 = reinterpret_cast< pythonapi::IOOptions * >(argp5);
  {
    try {
      (arg1)->open((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(pythonapi::IOOptions const &)*arg5);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_open__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IlwisObject_open",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_open" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IlwisObject_open" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->open((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_open__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IlwisObject_open",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_open" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->open((std::string const &)*arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_open__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_open" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->open((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_open(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IlwisObject_open__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IlwisObject_open__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IlwisObject_open__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_pythonapi__IOOptions, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IlwisObject_open__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IlwisObject_open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::IlwisObject::open(std::string const &,std::string const &,std::string const &,pythonapi::IOOptions const &)\n"
    "    pythonapi::IlwisObject::open(std::string const &,std::string const &,std::string const &)\n"
    "    pythonapi::IlwisObject::open(std::string const &,std::string const &)\n"
    "    pythonapi::IlwisObject::open(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IlwisObject_store__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  pythonapi::IOOptions *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IlwisObject_store",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_store" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IlwisObject_store" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_pythonapi__IOOptions,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IlwisObject_store" "', argument " "5"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "5"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  arg5 = reinterpret_cast< pythonapi::IOOptions * >(argp5);
  {
    try {
      (arg1)->store((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(pythonapi::IOOptions const &)*arg5);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_store__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IlwisObject_store",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_store" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IlwisObject_store" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->store((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_store__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IlwisObject_store",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_store" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->store((std::string const &)*arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_store__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject_store",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_store" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IlwisObject_store" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->store((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_store(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IlwisObject_store__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IlwisObject_store__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IlwisObject_store__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_pythonapi__IOOptions, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IlwisObject_store__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IlwisObject_store'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::IlwisObject::store(std::string const &,std::string const &,std::string const &,pythonapi::IOOptions const &)\n"
    "    pythonapi::IlwisObject::store(std::string const &,std::string const &,std::string const &)\n"
    "    pythonapi::IlwisObject::store(std::string const &,std::string const &)\n"
    "    pythonapi::IlwisObject::store(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IlwisObject___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject___bool__" "', argument " "1"" of type '" "pythonapi::IlwisObject const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (bool)((pythonapi::IlwisObject const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject___str__" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject___add__" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IlwisObject___add__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->__add__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject___radd__" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IlwisObject___radd__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->__radd__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_name__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_name" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (arg1)->name();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_name__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject_name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_name" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IlwisObject_name" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->name(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_name(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IlwisObject_name__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__IlwisObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IlwisObject_name__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IlwisObject_name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::IlwisObject::name()\n"
    "    pythonapi::IlwisObject::name(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IlwisObject_isInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject_isInternal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_isInternal" "', argument " "1"" of type '" "pythonapi::IlwisObject const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (bool)((pythonapi::IlwisObject const *)arg1)->isInternal();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_type" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (arg1)->type();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_type2Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  IlwisTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IlwisObject_type2Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_type2Name" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IlwisObject_type2Name" "', argument " "2"" of type '" "IlwisTypes""'");
  } 
  arg2 = static_cast< IlwisTypes >(val2);
  {
    try {
      result = (arg1)->type2Name(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_ilwisID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject_ilwisID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_ilwisID" "', argument " "1"" of type '" "pythonapi::IlwisObject const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (quint64)((pythonapi::IlwisObject const *)arg1)->ilwisID();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IlwisObject_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IlwisObject *arg1 = (pythonapi::IlwisObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IlwisObject_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IlwisObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IlwisObject_ilwisType" "', argument " "1"" of type '" "pythonapi::IlwisObject *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IlwisObject * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IlwisObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__IlwisObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::CoordinateSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CoordinateSystem",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoordinateSystem" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoordinateSystem" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::CoordinateSystem *)new pythonapi::CoordinateSystem((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoordinateSystem_envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_envelope" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  {
    try {
      result = (arg1)->envelope();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_setEnvelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  pythonapi::Envelope *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoordinateSystem_setEnvelope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_setEnvelope" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateSystem_setEnvelope" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem_setEnvelope" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Envelope * >(argp2);
  {
    try {
      (arg1)->setEnvelope((pythonapi::Envelope const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoordinateSystem___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem___eq__" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateSystem___eq__" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem___eq__" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CoordinateSystem___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem___ne__" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateSystem___ne__" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem___ne__" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_toWKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoordinateSystem_toWKT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_toWKT" "', argument " "1"" of type '" "pythonapi::CoordinateSystem const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  {
    try {
      result = ((pythonapi::CoordinateSystem const *)arg1)->toWKT();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_toProj4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoordinateSystem_toProj4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_toProj4" "', argument " "1"" of type '" "pythonapi::CoordinateSystem const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  {
    try {
      result = ((pythonapi::CoordinateSystem const *)arg1)->toProj4();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_convertEnvelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  pythonapi::Envelope *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CoordinateSystem_convertEnvelope",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_convertEnvelope" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateSystem_convertEnvelope" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem_convertEnvelope" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CoordinateSystem_convertEnvelope" "', argument " "3"" of type '" "pythonapi::Envelope const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem_convertEnvelope" "', argument " "3"" of type '" "pythonapi::Envelope const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::Envelope * >(argp3);
  {
    try {
      result = (arg1)->convertEnvelope((pythonapi::CoordinateSystem const &)*arg2,(pythonapi::Envelope const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_coord2coord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  pythonapi::Coordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CoordinateSystem_coord2coord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_coord2coord" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateSystem_coord2coord" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem_coord2coord" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CoordinateSystem_coord2coord" "', argument " "3"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateSystem_coord2coord" "', argument " "3"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::Coordinate * >(argp3);
  {
    try {
      result = (arg1)->coord2coord((pythonapi::CoordinateSystem const &)*arg2,(pythonapi::Coordinate const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoordinateSystem_toCoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::CoordinateSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CoordinateSystem_toCoordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateSystem_toCoordinateSystem" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::CoordinateSystem *)pythonapi::CoordinateSystem::toCoordinateSystem(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__CoordinateSystem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::CoordinateSystem *arg1 = (pythonapi::CoordinateSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CoordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CoordinateSystem" "', argument " "1"" of type '" "pythonapi::CoordinateSystem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CoordinateSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Coordinate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Coordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Coordinate",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Coordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Coordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::Coordinate *)new pythonapi::Coordinate(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Coordinate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Coordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Coordinate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Coordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Coordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Coordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (pythonapi::Coordinate *)new pythonapi::Coordinate(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Coordinate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Coordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Coordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Coordinate" "', argument " "1"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Coordinate" "', argument " "1"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (pythonapi::Coordinate *)new pythonapi::Coordinate((pythonapi::Coordinate const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Coordinate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Coordinate__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Coordinate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Coordinate__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Coordinate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Coordinate::Coordinate(double,double)\n"
    "    pythonapi::Coordinate::Coordinate(double,double,double)\n"
    "    pythonapi::Coordinate::Coordinate(pythonapi::Coordinate const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Coordinate_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_x" "', argument " "1"" of type '" "pythonapi::Coordinate const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (double)((pythonapi::Coordinate const *)arg1)->x();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_y" "', argument " "1"" of type '" "pythonapi::Coordinate const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (double)((pythonapi::Coordinate const *)arg1)->y();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_z" "', argument " "1"" of type '" "pythonapi::Coordinate const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (double)((pythonapi::Coordinate const *)arg1)->z();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate_setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_setX" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinate_setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setX(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate_setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_setY" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinate_setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setY(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate_setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_setZ" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinate_setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate_is3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate_is3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate_is3D" "', argument " "1"" of type '" "pythonapi::Coordinate const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Coordinate const *)arg1)->is3D();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Coordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___imul__" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinate___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::Coordinate *)(arg1)->operator *=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Coordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate___itruediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___itruediv__" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinate___itruediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::Coordinate *)(arg1)->__itruediv__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___eq__" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinate___eq__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinate___eq__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinate___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___ne__" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinate___ne__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinate___ne__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___str__" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinate___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinate___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinate___bool__" "', argument " "1"" of type '" "pythonapi::Coordinate const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Coordinate const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Coordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = (pythonapi::Coordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Coordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coordinate" "', argument " "1"" of type '" "pythonapi::Coordinate *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Coordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PropertySets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Properties *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PropertySets")) SWIG_fail;
  {
    try {
      result = (pythonapi::Properties *)new pythonapi::Properties();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Properties, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PropertySets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Properties *arg1 = (pythonapi::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PropertySets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Properties, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropertySets" "', argument " "1"" of type '" "pythonapi::Properties *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Properties * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PropertySets_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Properties, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IOOptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOOptions")) SWIG_fail;
  {
    try {
      result = (pythonapi::IOOptions *)new pythonapi::IOOptions();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IOOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOOptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::IOOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IOOptions",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOOptions" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOOptions" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  arg2 = obj1;
  {
    try {
      result = (pythonapi::IOOptions *)new pythonapi::IOOptions((std::string const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IOOptions, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOOptions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOOptions__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_new_IOOptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IOOptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::IOOptions::IOOptions()\n"
    "    pythonapi::IOOptions::IOOptions(std::string const &,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOOptions_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *arg1 = (pythonapi::IOOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOOptions_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IOOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOOptions_contains" "', argument " "1"" of type '" "pythonapi::IOOptions *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IOOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOOptions_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOOptions_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->contains((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOOptions_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *arg1 = (pythonapi::IOOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOOptions_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IOOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOOptions_size" "', argument " "1"" of type '" "pythonapi::IOOptions *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IOOptions * >(argp1);
  {
    try {
      result = (quint32)(arg1)->size();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOOptions___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *arg1 = (pythonapi::IOOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOOptions___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IOOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOOptions___getitem__" "', argument " "1"" of type '" "pythonapi::IOOptions *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IOOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOOptions___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOOptions___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->__getitem__((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOOptions_addOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *arg1 = (pythonapi::IOOptions *) 0 ;
  std::string *arg2 = 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::IOOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOOptions_addOption",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IOOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOOptions_addOption" "', argument " "1"" of type '" "pythonapi::IOOptions *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IOOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOOptions_addOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOOptions_addOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  arg3 = obj2;
  {
    try {
      result = (pythonapi::IOOptions *) &(arg1)->addOption((std::string const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IOOptions, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IOOptions *arg1 = (pythonapi::IOOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IOOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOOptions" "', argument " "1"" of type '" "pythonapi::IOOptions *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IOOptions * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__IOOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColorModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorModelNS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColorModel")) SWIG_fail;
  {
    try {
      result = (pythonapi::ColorModelNS *)new pythonapi::ColorModelNS();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorModelNS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ColorModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorModelNS *arg1 = (pythonapi::ColorModelNS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorModelNS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorModel" "', argument " "1"" of type '" "pythonapi::ColorModelNS *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorModelNS * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ColorModelNS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Color__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Color")) SWIG_fail;
  {
    try {
      result = (pythonapi::Color *)new pythonapi::Color();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorModel arg1 ;
  PyObject *arg2 = (PyObject *) 0 ;
  std::string *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Color",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "pythonapi::ColorModel""'");
  } 
  arg1 = static_cast< pythonapi::ColorModel >(val1);
  arg2 = obj1;
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Color" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (pythonapi::Color *)new pythonapi::Color(arg1,arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorModel arg1 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Color",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "pythonapi::ColorModel""'");
  } 
  arg1 = static_cast< pythonapi::ColorModel >(val1);
  arg2 = obj1;
  {
    try {
      result = (pythonapi::Color *)new pythonapi::Color(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Color",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  arg2 = obj1;
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Color" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (pythonapi::Color *)new pythonapi::Color((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Color",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  arg2 = obj1;
  {
    try {
      result = (pythonapi::Color *)new pythonapi::Color((std::string const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_new_Color__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_new_Color__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Color__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Color__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Color'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Color::Color()\n"
    "    pythonapi::Color::Color(pythonapi::ColorModel,PyObject *,std::string const &)\n"
    "    pythonapi::Color::Color(pythonapi::ColorModel,PyObject *)\n"
    "    pythonapi::Color::Color(std::string const &,PyObject *,std::string const &)\n"
    "    pythonapi::Color::Color(std::string const &,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Color_getItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_getItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_getItem" "', argument " "1"" of type '" "pythonapi::Color const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Color_getItem" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (double)((pythonapi::Color const *)arg1)->getItem(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_setName" "', argument " "1"" of type '" "pythonapi::Color *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_getName" "', argument " "1"" of type '" "pythonapi::Color *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    try {
      result = (arg1)->getName();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_getColorModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ColorModel result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_getColorModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_getColorModel" "', argument " "1"" of type '" "pythonapi::Color const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    try {
      result = (pythonapi::ColorModel)((pythonapi::Color const *)arg1)->getColorModel();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_toString" "', argument " "1"" of type '" "pythonapi::Color const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    try {
      result = ((pythonapi::Color const *)arg1)->toString();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___str__" "', argument " "1"" of type '" "pythonapi::Color *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Color(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = (pythonapi::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Color",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Color" "', argument " "1"" of type '" "pythonapi::Color *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Color_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Color, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelTemplate< qint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Pixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pixel" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pixel" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (pythonapi::PixelTemplate< qint32 > *)new pythonapi::PixelTemplate< qint32 >((pythonapi::PixelTemplate< qint32 > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelTemplate< qint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Pixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pixel" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pixel" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (pythonapi::PixelTemplate< qint32 > *)new pythonapi::PixelTemplate< qint32 >((pythonapi::PixelTemplate< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< qint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Pixel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< qint32 > *)new pythonapi::PixelTemplate< qint32 >(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::PixelTemplate< qint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pixel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (pythonapi::PixelTemplate< qint32 > *)new pythonapi::PixelTemplate< qint32 >(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pixel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pixel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Pixel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pixel__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Pixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::PixelTemplate< qint32 >::PixelTemplate(pythonapi::PixelTemplate< qint32 > const &)\n"
    "    pythonapi::PixelTemplate< qint32 >::PixelTemplate(pythonapi::PixelTemplate< double > const &)\n"
    "    pythonapi::PixelTemplate< qint32 >::PixelTemplate(int,int)\n"
    "    pythonapi::PixelTemplate< qint32 >::PixelTemplate(int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Pixel_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_x" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (int)((pythonapi::PixelTemplate< qint32 > const *)arg1)->x();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_y" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (int)((pythonapi::PixelTemplate< qint32 > const *)arg1)->y();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_z" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (int)((pythonapi::PixelTemplate< qint32 > const *)arg1)->z();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_setX" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_setX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setX(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_setY" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_setY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setY(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_setZ" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_setZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_is3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_is3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_is3D" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::PixelTemplate< qint32 > const *)arg1)->is3D();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___imul__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel___imul__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< int > *)(arg1)->operator *=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___itruediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___itruediv__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel___itruediv__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< int > *)(arg1)->__itruediv__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  pythonapi::PixelTemplate< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___eq__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel___eq__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel___eq__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::PixelTemplate< int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  pythonapi::PixelTemplate< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___ne__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel___ne__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel___ne__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::PixelTemplate< int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___str__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___bool__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::PixelTemplate< qint32 > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Pixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = (pythonapi::PixelTemplate< qint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Pixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pixel" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PixelD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelD" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelD" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)new pythonapi::PixelTemplate< double >((pythonapi::PixelTemplate< qint32 > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelD" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelD" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)new pythonapi::PixelTemplate< double >((pythonapi::PixelTemplate< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelD__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PixelD",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PixelD" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PixelD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)new pythonapi::PixelTemplate< double >(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelD__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PixelD",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PixelD" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PixelD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PixelD" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)new pythonapi::PixelTemplate< double >(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelD(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelD__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelD__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PixelD__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PixelD__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PixelD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::PixelTemplate< double >::PixelTemplate(pythonapi::PixelTemplate< qint32 > const &)\n"
    "    pythonapi::PixelTemplate< double >::PixelTemplate(pythonapi::PixelTemplate< double > const &)\n"
    "    pythonapi::PixelTemplate< double >::PixelTemplate(double,double)\n"
    "    pythonapi::PixelTemplate< double >::PixelTemplate(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PixelD_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_x" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::PixelTemplate< double > const *)arg1)->x();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_y" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::PixelTemplate< double > const *)arg1)->y();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_z" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::PixelTemplate< double > const *)arg1)->z();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD_setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_setX" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelD_setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setX(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD_setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_setY" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelD_setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setY(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD_setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_setZ" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelD_setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD_is3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD_is3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD_is3D" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::PixelTemplate< double > const *)arg1)->is3D();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___imul__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelD___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)(arg1)->operator *=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD___itruediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___itruediv__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelD___itruediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::PixelTemplate< double > *)(arg1)->__itruediv__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  pythonapi::PixelTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___eq__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelD___eq__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelD___eq__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::PixelTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  pythonapi::PixelTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelD___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___ne__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelD___ne__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelD___ne__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::PixelTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___str__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelD___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelD___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelD___bool__" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::PixelTemplate< double > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PixelD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< double > *arg1 = (pythonapi::PixelTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelD" "', argument " "1"" of type '" "pythonapi::PixelTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PixelD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Size__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::SizeTemplate< quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Size",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Size" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Size" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (pythonapi::SizeTemplate< quint32 > *)new pythonapi::SizeTemplate< quint32 >(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Size__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Size",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Size" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (pythonapi::SizeTemplate< quint32 > *)new pythonapi::SizeTemplate< quint32 >(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Size__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::SizeTemplate< quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Size" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Size" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (pythonapi::SizeTemplate< quint32 > *)new pythonapi::SizeTemplate< quint32 >((pythonapi::SizeTemplate< quint32 > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Size__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::SizeTemplate< quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Size" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Size" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (pythonapi::SizeTemplate< quint32 > *)new pythonapi::SizeTemplate< quint32 >((pythonapi::SizeTemplate< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Size(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Size__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Size__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Size__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Size__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Size'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::SizeTemplate< quint32 >::SizeTemplate(unsigned int,unsigned int,unsigned int)\n"
    "    pythonapi::SizeTemplate< quint32 >::SizeTemplate(unsigned int,unsigned int)\n"
    "    pythonapi::SizeTemplate< quint32 >::SizeTemplate(pythonapi::SizeTemplate< quint32 > const &)\n"
    "    pythonapi::SizeTemplate< quint32 >::SizeTemplate(pythonapi::SizeTemplate< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Size_xsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size_xsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_xsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (unsigned int)((pythonapi::SizeTemplate< quint32 > const *)arg1)->xsize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_ysize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size_ysize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_ysize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (unsigned int)((pythonapi::SizeTemplate< quint32 > const *)arg1)->ysize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_zsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size_zsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_zsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (unsigned int)((pythonapi::SizeTemplate< quint32 > const *)arg1)->zsize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_setXsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size_setXsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_setXsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size_setXsize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->setXsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_setYsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size_setYsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_setYsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size_setYsize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->setYsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_setZsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size_setZsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_setZsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size_setZsize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->setZsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size_linearSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size_linearSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_linearSize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (quint64)((pythonapi::SizeTemplate< quint32 > const *)arg1)->linearSize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::SizeTemplate< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___iadd__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___iadd__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___iadd__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< unsigned int > * >(argp2);
  {
    try {
      result = (pythonapi::SizeTemplate< unsigned int > *)(arg1)->operator +=((pythonapi::SizeTemplate< unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::SizeTemplate< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___isub__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___isub__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___isub__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< unsigned int > * >(argp2);
  {
    try {
      result = (pythonapi::SizeTemplate< unsigned int > *)(arg1)->operator -=((pythonapi::SizeTemplate< unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___imul__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::SizeTemplate< unsigned int > *)(arg1)->operator *=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::SizeTemplate< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___eq__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___eq__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___eq__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< unsigned int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::SizeTemplate< unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::SizeTemplate< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___ne__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___ne__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___ne__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< unsigned int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::SizeTemplate< unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___contains____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< quint32 > const *)arg1)->__contains__((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___contains____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::PixelTemplate< qint32 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< quint32 > const *)arg1)->__contains__((pythonapi::PixelTemplate< qint32 > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___contains____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  pythonapi::PixelTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Size___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< quint32 > const *)arg1)->__contains__((pythonapi::PixelTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___contains__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Size___contains____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Size___contains____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Size___contains____SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Size___contains__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::SizeTemplate< quint32 >::__contains__(pythonapi::Coordinate const &) const\n"
    "    pythonapi::SizeTemplate< quint32 >::__contains__(pythonapi::PixelTemplate< qint32 > const &) const\n"
    "    pythonapi::SizeTemplate< quint32 >::__contains__(pythonapi::PixelTemplate< double > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Size___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___str__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size___bool__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< quint32 > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = (pythonapi::SizeTemplate< quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Size" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Size_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SizeD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SizeD",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SizeD" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SizeD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SizeD" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)new pythonapi::SizeTemplate< double >(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SizeD",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SizeD" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SizeD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)new pythonapi::SizeTemplate< double >(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeD__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< quint32 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SizeD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SizeD" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SizeD" "', argument " "1"" of type '" "pythonapi::SizeTemplate< quint32 > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< quint32 > * >(argp1);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)new pythonapi::SizeTemplate< double >((pythonapi::SizeTemplate< quint32 > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeD__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SizeD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SizeD" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SizeD" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)new pythonapi::SizeTemplate< double >((pythonapi::SizeTemplate< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeD(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SizeD__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SizeD__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SizeD__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SizeD__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SizeD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::SizeTemplate< double >::SizeTemplate(double,double,double)\n"
    "    pythonapi::SizeTemplate< double >::SizeTemplate(double,double)\n"
    "    pythonapi::SizeTemplate< double >::SizeTemplate(pythonapi::SizeTemplate< quint32 > const &)\n"
    "    pythonapi::SizeTemplate< double >::SizeTemplate(pythonapi::SizeTemplate< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SizeD_xsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD_xsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_xsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::SizeTemplate< double > const *)arg1)->xsize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_ysize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD_ysize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_ysize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::SizeTemplate< double > const *)arg1)->ysize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_zsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD_zsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_zsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (double)((pythonapi::SizeTemplate< double > const *)arg1)->zsize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_setXsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD_setXsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_setXsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SizeD_setXsize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setXsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_setYsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD_setYsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_setYsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SizeD_setYsize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setYsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_setZsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD_setZsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_setZsize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SizeD_setZsize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZsize(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD_linearSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD_linearSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD_linearSize" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (quint64)((pythonapi::SizeTemplate< double > const *)arg1)->linearSize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::SizeTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___iadd__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___iadd__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___iadd__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp2);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)(arg1)->operator +=((pythonapi::SizeTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::SizeTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___isub__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___isub__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___isub__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp2);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)(arg1)->operator -=((pythonapi::SizeTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::SizeTemplate< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___imul__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SizeD___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::SizeTemplate< double > *)(arg1)->operator *=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::SizeTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___eq__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___eq__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___eq__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::SizeTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::SizeTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___ne__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___ne__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___ne__" "', argument " "2"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::SizeTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___contains____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< double > const *)arg1)->__contains__((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___contains____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::PixelTemplate< qint32 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< double > const *)arg1)->__contains__((pythonapi::PixelTemplate< qint32 > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___contains____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  pythonapi::PixelTemplate< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SizeD___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___contains__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SizeD___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< double > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< double > const *)arg1)->__contains__((pythonapi::PixelTemplate< double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___contains__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SizeD___contains____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SizeD___contains____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SizeD___contains____SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SizeD___contains__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::SizeTemplate< double >::__contains__(pythonapi::Coordinate const &) const\n"
    "    pythonapi::SizeTemplate< double >::__contains__(pythonapi::PixelTemplate< qint32 > const &) const\n"
    "    pythonapi::SizeTemplate< double >::__contains__(pythonapi::PixelTemplate< double > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SizeD___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___str__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SizeD___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SizeD___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SizeD___bool__" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::SizeTemplate< double > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SizeD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = (pythonapi::SizeTemplate< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SizeD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SizeD" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SizeD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Box__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Box")) SWIG_fail;
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *)new pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Box",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *)new pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelTemplate< qint32 > *arg1 = 0 ;
  pythonapi::PixelTemplate< qint32 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box" "', argument " "1"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Box" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp2);
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *)new pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >((pythonapi::PixelTemplate< qint32 > const &)*arg1,(pythonapi::PixelTemplate< qint32 > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< unsigned int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Box" "', argument " "1"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Box" "', argument " "1"" of type '" "pythonapi::SizeTemplate< unsigned int > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< unsigned int > * >(argp1);
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *)new pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >((pythonapi::SizeTemplate< unsigned int > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Box(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Box__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Box__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Box__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Box__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Box'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::BoxTemplate()\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::BoxTemplate(std::string const &)\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::BoxTemplate(pythonapi::PixelTemplate< qint32 > const &,pythonapi::PixelTemplate< qint32 > const &)\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::BoxTemplate(pythonapi::SizeTemplate< unsigned int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Box_minCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelTemplate< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box_minCorner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_minCorner" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (arg1)->minCorner();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelTemplate< qint32 >(static_cast< const pythonapi::PixelTemplate< qint32 >& >(result))), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box_maxCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelTemplate< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box_maxCorner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_maxCorner" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (arg1)->maxCorner();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelTemplate< qint32 >(static_cast< const pythonapi::PixelTemplate< qint32 >& >(result))), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::SizeTemplate< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_size" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (arg1)->size();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::SizeTemplate< unsigned int >(static_cast< const pythonapi::SizeTemplate< unsigned int >& >(result))), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box_is3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box_is3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_is3D" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *)arg1)->is3D();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___contains____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  pythonapi::PixelTemplate< qint32 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___contains__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box___contains__" "', argument " "2"" of type '" "pythonapi::PixelTemplate< qint32 > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelTemplate< qint32 > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *)arg1)->__contains__((pythonapi::PixelTemplate< qint32 > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___contains____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___contains__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box___contains__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box___contains__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *)arg1)->__contains__((pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___contains__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box___contains____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Box___contains____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Box___contains__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::__contains__(pythonapi::PixelTemplate< qint32 > const &) const\n"
    "    pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 >::__contains__(pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Box___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___eq__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box___eq__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box___eq__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Box___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___ne__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box___ne__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box___ne__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___str__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box___bool__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *arg1 = (pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Box" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Box_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Envelope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Envelope")) SWIG_fail;
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *)new pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Envelope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Envelope",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Envelope" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Envelope" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *)new pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Envelope__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coordinate *arg1 = 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Envelope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Envelope" "', argument " "1"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Envelope" "', argument " "1"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Envelope" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Envelope" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *)new pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >((pythonapi::Coordinate const &)*arg1,(pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Envelope__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::SizeTemplate< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Envelope" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Envelope" "', argument " "1"" of type '" "pythonapi::SizeTemplate< double > const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::SizeTemplate< double > * >(argp1);
  {
    try {
      result = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *)new pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >((pythonapi::SizeTemplate< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Envelope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Envelope__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Envelope__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Envelope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Envelope__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Envelope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::BoxTemplate()\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::BoxTemplate(std::string const &)\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::BoxTemplate(pythonapi::Coordinate const &,pythonapi::Coordinate const &)\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::BoxTemplate(pythonapi::SizeTemplate< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Envelope_minCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope_minCorner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_minCorner" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (arg1)->minCorner();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope_maxCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope_maxCorner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_maxCorner" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (arg1)->maxCorner();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::SizeTemplate< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_size" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (arg1)->size();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::SizeTemplate< double >(static_cast< const pythonapi::SizeTemplate< double >& >(result))), SWIGTYPE_p_pythonapi__SizeTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope_is3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope_is3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_is3D" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *)arg1)->is3D();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___contains____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Envelope___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___contains__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope___contains__" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *)arg1)->__contains__((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___contains____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Envelope___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___contains__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope___contains__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope___contains__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp2);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *)arg1)->__contains__((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___contains__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Coordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Envelope___contains____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Envelope___contains____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Envelope___contains__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::__contains__(pythonapi::Coordinate const &) const\n"
    "    pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double >::__contains__(pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Envelope___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Envelope___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___eq__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope___eq__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope___eq__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Envelope___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___ne__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope___ne__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope___ne__" "', argument " "2"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___str__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Envelope___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Envelope___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope___bool__" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *arg1 = (pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Envelope" "', argument " "1"" of type '" "pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Envelope_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NumericStatistics__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NumericStatistics")) SWIG_fail;
  {
    try {
      result = (pythonapi::ContainerStatistics< double > *)new pythonapi::ContainerStatistics< double >();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericStatistics__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::ContainerStatistics< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ContainerStatistics< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NumericStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Ilwis__ContainerStatisticsT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericStatistics" "', argument " "1"" of type '" "Ilwis::ContainerStatistics< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericStatistics" "', argument " "1"" of type '" "Ilwis::ContainerStatistics< double > const &""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::ContainerStatistics< double > * >(argp1);
  {
    try {
      result = (pythonapi::ContainerStatistics< double > *)new pythonapi::ContainerStatistics< double >((Ilwis::ContainerStatistics< double > const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericStatistics(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NumericStatistics__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Ilwis__ContainerStatisticsT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NumericStatistics__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NumericStatistics'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContainerStatistics< double >::ContainerStatistics()\n"
    "    pythonapi::ContainerStatistics< double >::ContainerStatistics(Ilwis::ContainerStatistics< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_significantDigits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint16 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericStatistics_significantDigits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_significantDigits" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  {
    try {
      result = (quint16)((pythonapi::ContainerStatistics< double > const *)arg1)->significantDigits();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_findSignificantDigits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericStatistics_findSignificantDigits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_findSignificantDigits" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics_findSignificantDigits" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->findSignificantDigits(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_binCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericStatistics_binCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_binCount" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics_binCount" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      (arg1)->binCount(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericStatistics___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics___bool__" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  {
    try {
      result = (bool)((pythonapi::ContainerStatistics< double > const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_stretchLinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NumericStatistics_stretchLinear",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_stretchLinear" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics_stretchLinear" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericStatistics_stretchLinear" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((pythonapi::ContainerStatistics< double > const *)arg1)->stretchLinear(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_stretchLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericStatistics_stretchLimits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_stretchLimits" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics_stretchLimits" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (PyObject *)((pythonapi::ContainerStatistics< double > const *)arg1)->stretchLimits(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  pythonapi::PropertySets arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericStatistics___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics___getitem__" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics___getitem__" "', argument " "2"" of type '" "pythonapi::PropertySets""'");
  } 
  arg2 = static_cast< pythonapi::PropertySets >(val2);
  {
    try {
      result = (double)(arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_prop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  pythonapi::PropertySets arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericStatistics_prop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_prop" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericStatistics_prop" "', argument " "2"" of type '" "pythonapi::PropertySets""'");
  } 
  arg2 = static_cast< pythonapi::PropertySets >(val2);
  {
    try {
      result = (double)(arg1)->prop(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericStatistics_histogram(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericStatistics_histogram",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericStatistics_histogram" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->histogram();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumericStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContainerStatistics< double > *arg1 = (pythonapi::ContainerStatistics< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NumericStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericStatistics" "', argument " "1"" of type '" "pythonapi::ContainerStatistics< double > *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContainerStatistics< double > * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Table__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Table")) SWIG_fail;
  {
    try {
      result = (pythonapi::Table *)new pythonapi::Table();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Table, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pythonapi::IOOptions *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Table *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Table",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__IOOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Table" "', argument " "2"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "2"" of type '" "pythonapi::IOOptions const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::IOOptions * >(argp2);
  {
    try {
      result = (pythonapi::Table *)new pythonapi::Table(arg1,(pythonapi::IOOptions const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Table, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  pythonapi::Table *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Table",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::Table *)new pythonapi::Table(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Table, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Table__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Table__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__IOOptions, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Table__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Table'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::Table()\n"
    "    pythonapi::Table::Table(std::string,pythonapi::IOOptions const &)\n"
    "    pythonapi::Table::Table(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_columnCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Table_columnCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_columnCount" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::Table const *)arg1)->columnCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_columns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Table_columns",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_columns" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    try {
      result = (PyObject *)((pythonapi::Table const *)arg1)->columns();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_addColumn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Table_addColumn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_addColumn" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_addColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_addColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Table_addColumn" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_addColumn" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addColumn((std::string const &)*arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_addColumn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  pythonapi::ColumnDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_addColumn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_addColumn" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__ColumnDefinition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_addColumn" "', argument " "2"" of type '" "pythonapi::ColumnDefinition &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_addColumn" "', argument " "2"" of type '" "pythonapi::ColumnDefinition &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp2);
  {
    try {
      (arg1)->addColumn(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_addColumn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Table_addColumn__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Table_addColumn__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_addColumn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::addColumn(std::string const &,std::string const &)\n"
    "    pythonapi::Table::addColumn(pythonapi::ColumnDefinition &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_columnIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  qint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_columnIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_columnIndex" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_columnIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_columnIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (qint32)((pythonapi::Table const *)arg1)->columnIndex((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_column__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_column",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_column" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_column" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_column" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)((pythonapi::Table const *)arg1)->column((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_column__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_column",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_column" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_column" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (PyObject *)((pythonapi::Table const *)arg1)->column(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_column(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Table_column__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Table_column__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_column'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::column(std::string const &) const\n"
    "    pythonapi::Table::column(quint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_recordCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Table_recordCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_recordCount" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::Table const *)arg1)->recordCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_select(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_select",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_select" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_select" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_select" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)((pythonapi::Table const *)arg1)->select((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_record(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_record",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_record" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_record" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (PyObject *)((pythonapi::Table const *)arg1)->record(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_cell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  quint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Table_cell",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_cell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_cell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_cell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_cell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    try {
      result = (PyObject *)(arg1)->cell((std::string const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_cell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  quint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Table_cell",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_cell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_cell" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_cell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    try {
      result = (PyObject *)(arg1)->cell(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_cell(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Table_cell__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Table_cell__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_cell'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::cell(std::string const &,quint32)\n"
    "    pythonapi::Table::cell(quint32,quint32)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  quint32 arg3 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  arg4 = obj3;
  {
    try {
      (arg1)->setCell((std::string const &)*arg2,arg3,(PyObject const *)arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  quint32 arg3 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_setCell" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  arg4 = obj3;
  {
    try {
      (arg1)->setCell(arg2,arg3,(PyObject const *)arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  quint32 arg3 ;
  qint64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  ecode4 = SWIG_AsVal_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Table_setCell" "', argument " "4"" of type '" "qint64""'");
  } 
  arg4 = static_cast< qint64 >(val4);
  {
    try {
      (arg1)->setCell((std::string const &)*arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  quint32 arg3 ;
  qint64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_setCell" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  ecode4 = SWIG_AsVal_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Table_setCell" "', argument " "4"" of type '" "qint64""'");
  } 
  arg4 = static_cast< qint64 >(val4);
  {
    try {
      (arg1)->setCell(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  quint32 arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Table_setCell" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setCell((std::string const &)*arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  quint32 arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_setCell" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Table_setCell" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setCell(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  quint32 arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setCell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Table_setCell" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setCell((std::string const &)*arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  quint32 arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Table_setCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setCell" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_setCell" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_setCell" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Table_setCell" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setCell(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setCell(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Table_setCell__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Table_setCell__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Table_setCell__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          _v = (argv[3] != 0);
          if (_v) {
            return _wrap_Table_setCell__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Table_setCell__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Table_setCell__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Table_setCell__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          _v = (argv[3] != 0);
          if (_v) {
            return _wrap_Table_setCell__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_setCell'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::setCell(std::string const &,quint32,PyObject const *)\n"
    "    pythonapi::Table::setCell(quint32,quint32,PyObject const *)\n"
    "    pythonapi::Table::setCell(std::string const &,quint32,qint64)\n"
    "    pythonapi::Table::setCell(quint32,quint32,qint64)\n"
    "    pythonapi::Table::setCell(std::string const &,quint32,std::string)\n"
    "    pythonapi::Table::setCell(quint32,quint32,std::string)\n"
    "    pythonapi::Table::setCell(std::string const &,quint32,double)\n"
    "    pythonapi::Table::setCell(quint32,quint32,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_toTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Table *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Table_toTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_toTable" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::Table *)pythonapi::Table::toTable(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_columnDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_columnDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_columnDefinition" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_columnDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_columnDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((pythonapi::Table const *)arg1)->columnDefinition((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_columnDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_columnDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_columnDefinition" "', argument " "1"" of type '" "pythonapi::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_columnDefinition" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::Table const *)arg1)->columnDefinition(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_columnDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Table_columnDefinition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Table_columnDefinition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_columnDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::columnDefinition(std::string const &) const\n"
    "    pythonapi::Table::columnDefinition(quint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Table_setColumnDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  pythonapi::ColumnDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Table_setColumnDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setColumnDefinition" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__ColumnDefinition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setColumnDefinition" "', argument " "2"" of type '" "pythonapi::ColumnDefinition &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setColumnDefinition" "', argument " "2"" of type '" "pythonapi::ColumnDefinition &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp2);
  {
    try {
      (arg1)->setColumnDefinition(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setColumnDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  std::string *arg2 = 0 ;
  pythonapi::ColumnDefinition *arg3 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Table_setColumnDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setColumnDefinition" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Table_setColumnDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Table_setColumnDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Table_setColumnDefinition" "', argument " "3"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp3);
  {
    try {
      (arg1)->setColumnDefinition((std::string const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setColumnDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  quint32 arg2 ;
  pythonapi::ColumnDefinition *arg3 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Table_setColumnDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_setColumnDefinition" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_setColumnDefinition" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Table_setColumnDefinition" "', argument " "3"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp3);
  {
    try {
      (arg1)->setColumnDefinition(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_setColumnDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Table_setColumnDefinition__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Table_setColumnDefinition__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Table_setColumnDefinition__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Table_setColumnDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Table::setColumnDefinition(pythonapi::ColumnDefinition &)\n"
    "    pythonapi::Table::setColumnDefinition(std::string const &,pythonapi::ColumnDefinition *)\n"
    "    pythonapi::Table::setColumnDefinition(quint32,pythonapi::ColumnDefinition *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Table(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Table *arg1 = (pythonapi::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Table",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Table, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Table" "', argument " "1"" of type '" "pythonapi::Table *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Table * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Table_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Table, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Coverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coverage *arg1 = (pythonapi::Coverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Coverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coverage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coverage" "', argument " "1"" of type '" "pythonapi::Coverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coverage * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coverage_coordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coverage *arg1 = (pythonapi::Coverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::CoordinateSystem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coverage_coordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coverage_coordinateSystem" "', argument " "1"" of type '" "pythonapi::Coverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coverage * >(argp1);
  {
    try {
      result = (arg1)->coordinateSystem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::CoordinateSystem(static_cast< const pythonapi::CoordinateSystem& >(result))), SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coverage_envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coverage *arg1 = (pythonapi::Coverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coverage_envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coverage_envelope" "', argument " "1"" of type '" "pythonapi::Coverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coverage * >(argp1);
  {
    try {
      result = (arg1)->envelope();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coverage_setEnvelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Coverage *arg1 = (pythonapi::Coverage *) 0 ;
  pythonapi::Envelope *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coverage_setEnvelope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Coverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coverage_setEnvelope" "', argument " "1"" of type '" "pythonapi::Coverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Coverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coverage_setEnvelope" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coverage_setEnvelope" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Envelope * >(argp2);
  {
    try {
      (arg1)->setEnvelope((pythonapi::Envelope const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coverage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Coverage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Geometry",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Geometry" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)new pythonapi::Geometry(arg1,(pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Geometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (pythonapi::Geometry *)new pythonapi::Geometry(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Geometry__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__CoordinateSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Geometry__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Geometry::Geometry(std::string,pythonapi::CoordinateSystem const &)\n"
    "    pythonapi::Geometry::Geometry(pythonapi::Feature *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Geometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Geometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Geometry" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___bool__" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___str__" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_ilwisType" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_fromWKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_fromWKT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_fromWKT" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_fromWKT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_fromWKT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->fromWKT((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_fromWKTReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  geos::geom::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_fromWKTReader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_fromWKTReader" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_fromWKTReader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_fromWKTReader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (geos::geom::Geometry *)(arg1)->fromWKTReader((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_geos__geom__Geometry, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_toWKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_toWKT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_toWKT" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (arg1)->toWKT();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_coordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::CoordinateSystem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_coordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_coordinateSystem" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (arg1)->coordinateSystem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::CoordinateSystem(static_cast< const pythonapi::CoordinateSystem& >(result))), SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_setCoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_setCoordinateSystem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_setCoordinateSystem" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      (arg1)->setCoordinateSystem((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_transform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_transform" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_transform" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_transform" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)(arg1)->transform((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_envelope" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (arg1)->envelope();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___iter__" "', argument " "1"" of type '" "pythonapi::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_isSimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_isSimple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_isSimple" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->isSimple();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_within(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_within",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_within" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_within" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_within" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->within((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_contains" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_contains" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_contains" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->contains((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_disjoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_disjoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_disjoint" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_disjoint" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_disjoint" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->disjoint((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_touches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_touches",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_touches" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_touches" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_touches" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->touches((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_intersects" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_intersects" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_intersects" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->intersects((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_crosses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_crosses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_crosses" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_crosses" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_crosses" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->crosses((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_overlaps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_overlaps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_overlaps" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_overlaps" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_overlaps" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->overlaps((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_equals",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_equals" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_equals" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_equals" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->equals((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_equalsExact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Geometry_equalsExact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_equalsExact" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_equalsExact" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_equalsExact" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_equalsExact" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->equalsExact((pythonapi::Geometry const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_equalsExact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_equalsExact",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_equalsExact" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_equalsExact" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_equalsExact" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->equalsExact((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_equalsExact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Geometry_equalsExact__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Geometry_equalsExact__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Geometry_equalsExact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Geometry::equalsExact(pythonapi::Geometry const &,double) const\n"
    "    pythonapi::Geometry::equalsExact(pythonapi::Geometry const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Geometry_covers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_covers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_covers" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_covers" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_covers" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->covers((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_coveredBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_coveredBy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_coveredBy" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_coveredBy" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_coveredBy" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->coveredBy((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_relate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Geometry_relate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_relate" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_relate" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_relate" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Geometry_relate" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_relate" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->relate((pythonapi::Geometry const &)*arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_distance" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_distance" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_distance" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (double)((pythonapi::Geometry const *)arg1)->distance((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getArea" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (double)((pythonapi::Geometry const *)arg1)->getArea();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getLength" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (double)((pythonapi::Geometry const *)arg1)->getLength();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_isWithinDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Geometry_isWithinDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_isWithinDistance" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_isWithinDistance" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_isWithinDistance" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_isWithinDistance" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)((pythonapi::Geometry const *)arg1)->isWithinDistance((pythonapi::Geometry const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_buffer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_buffer" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_buffer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->buffer(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_convexHull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_convexHull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_convexHull" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->convexHull();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_intersection" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_intersection" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_intersection" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->intersection((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_Union(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_Union",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_Union" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_Union" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_Union" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->Union((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_difference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_difference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_difference" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_difference" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_difference" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->difference((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_symDifference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = (pythonapi::Geometry *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geometry_symDifference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_symDifference" "', argument " "1"" of type '" "pythonapi::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_symDifference" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_symDifference" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (pythonapi::Geometry *)((pythonapi::Geometry const *)arg1)->symDifference((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Geometry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Geometry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_COVERAGEATRIB_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COVERAGEATRIB is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COVERAGEATRIB_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(pythonapi::COVERAGEATRIB));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Feature___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___bool__" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Feature const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___str__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___iter__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_createSubFeature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  pythonapi::Geometry *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_createSubFeature",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_createSubFeature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  arg2 = obj1;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Feature_createSubFeature" "', argument " "3"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_createSubFeature" "', argument " "3"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::Geometry * >(argp3);
  {
    try {
      result = (arg1)->createSubFeature(arg2,(pythonapi::Geometry const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___getitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___getitem__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___getitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Feature___getitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (PyObject *)(arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Feature___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Feature___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::__getitem__(std::string)\n"
    "    pythonapi::Feature::__getitem__(quint32)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_attribute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  qint64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_attribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_attribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature_attribute" "', argument " "3"" of type '" "qint64""'");
  } 
  arg3 = static_cast< qint64 >(val3);
  {
    try {
      result = (PyObject *)(arg1)->attribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attribute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_attribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_attribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature_attribute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (PyObject *)(arg1)->attribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attribute__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_attribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_attribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_attribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->attribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attribute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature_attribute__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature_attribute__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Feature_attribute__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_attribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::attribute(std::string,qint64)\n"
    "    pythonapi::Feature::attribute(std::string,double)\n"
    "    pythonapi::Feature::attribute(std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___setitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___setitem__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      (arg1)->__setitem__(arg2,(PyObject const *)arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setAttribute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setAttribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_setAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      (arg1)->setAttribute(arg2,(PyObject const *)arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  qint64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___setitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___setitem__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature___setitem__" "', argument " "3"" of type '" "qint64""'");
  } 
  arg3 = static_cast< qint64 >(val3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setAttribute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  qint64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setAttribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_setAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature_setAttribute" "', argument " "3"" of type '" "qint64""'");
  } 
  arg3 = static_cast< qint64 >(val3);
  {
    try {
      (arg1)->setAttribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___setitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___setitem__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setAttribute__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setAttribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_setAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature_setAttribute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setAttribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___setitem____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature___setitem__" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___setitem__" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature___setitem__" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Feature___setitem____SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Feature___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::__setitem__(std::string,PyObject const *)\n"
    "    pythonapi::Feature::__setitem__(std::string,qint64)\n"
    "    pythonapi::Feature::__setitem__(std::string,double)\n"
    "    pythonapi::Feature::__setitem__(std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_setAttribute__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setAttribute" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_setAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Feature_setAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setAttribute(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setAttribute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature_setAttribute__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature_setAttribute__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Feature_setAttribute__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Feature_setAttribute__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_setAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::setAttribute(std::string,PyObject const *)\n"
    "    pythonapi::Feature::setAttribute(std::string,qint64)\n"
    "    pythonapi::Feature::setAttribute(std::string,double)\n"
    "    pythonapi::Feature::setAttribute(std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_ilwisType" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_geometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_geometry" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (pythonapi::Geometry *)(arg1)->geometry();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_geometry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_geometry" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Feature_geometry" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_geometry" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      (arg1)->geometry((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Feature_geometry__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Feature_geometry__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::geometry()\n"
    "    pythonapi::Feature::geometry(pythonapi::Geometry const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_geometryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_geometryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_geometryType" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->geometryType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_featureId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_featureId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_featureId" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (quint64)((pythonapi::Feature const *)arg1)->featureId();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attributeDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_attributeDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attributeDefinition" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Feature_attributeDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_attributeDefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((pythonapi::Feature const *)arg1)->attributeDefinition((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attributeDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_attributeDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attributeDefinition" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Feature_attributeDefinition" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::Feature const *)arg1)->attributeDefinition(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_attributeDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Feature_attributeDefinition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Feature_attributeDefinition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_attributeDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::attributeDefinition(std::string const &) const\n"
    "    pythonapi::Feature::attributeDefinition(quint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_attributeColumnCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_attributeColumnCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_attributeColumnCount" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::Feature const *)arg1)->attributeColumnCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_removeSubFeature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_removeSubFeature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_removeSubFeature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Feature_removeSubFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_removeSubFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeSubFeature((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setSubFeature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< pythonapi::Feature > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setSubFeature",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setSubFeature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Feature_setSubFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_setSubFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__Feature,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Feature_setSubFeature" "', argument " "3"" of type '" "pythonapi::Feature""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_setSubFeature" "', argument " "3"" of type '" "pythonapi::Feature""'");
    } else {
      pythonapi::Feature * temp = reinterpret_cast< pythonapi::Feature * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setSubFeature((std::string const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_removeSubFeature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_removeSubFeature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_removeSubFeature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Feature_removeSubFeature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->removeSubFeature(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_removeSubFeature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Feature_removeSubFeature__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Feature_removeSubFeature__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_removeSubFeature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::removeSubFeature(std::string const &)\n"
    "    pythonapi::Feature::removeSubFeature(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_setSubFeature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  double arg2 ;
  SwigValueWrapper< pythonapi::Feature > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setSubFeature",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setSubFeature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Feature_setSubFeature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__Feature,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Feature_setSubFeature" "', argument " "3"" of type '" "pythonapi::Feature""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Feature_setSubFeature" "', argument " "3"" of type '" "pythonapi::Feature""'");
    } else {
      pythonapi::Feature * temp = reinterpret_cast< pythonapi::Feature * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setSubFeature(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setSubFeature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_pythonapi__Feature, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Feature_setSubFeature__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_pythonapi__Feature, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Feature_setSubFeature__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_setSubFeature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::setSubFeature(std::string const &,pythonapi::Feature)\n"
    "    pythonapi::Feature::setSubFeature(double,pythonapi::Feature)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_subFeatureCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_subFeatureCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_subFeatureCount" "', argument " "1"" of type '" "pythonapi::Feature const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::Feature const *)arg1)->subFeatureCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setRecord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  quint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Feature_setRecord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setRecord" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Feature_setRecord" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    try {
      (arg1)->setRecord(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setRecord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Feature_setRecord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_setRecord" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setRecord(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_setRecord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Feature_setRecord__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Feature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Feature_setRecord__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Feature_setRecord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Feature::setRecord(PyObject *,quint32)\n"
    "    pythonapi::Feature::setRecord(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Feature_record(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_record",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_record" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->record();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_begin" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Feature_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Feature_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Feature_end" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      result = (arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Feature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Feature *arg1 = (pythonapi::Feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Feature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Feature" "', argument " "1"" of type '" "pythonapi::Feature *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Feature * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Feature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Feature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FeatureIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FeatureIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FeatureIterator" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (pythonapi::FeatureIterator *)new pythonapi::FeatureIterator(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FeatureIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__FeatureIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FeatureIterator" "', argument " "1"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FeatureIterator" "', argument " "1"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (pythonapi::FeatureIterator *)new pythonapi::FeatureIterator((pythonapi::FeatureIterator const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureIterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FeatureIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__FeatureIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FeatureIterator__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FeatureIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureIterator::FeatureIterator(pythonapi::FeatureCoverage *)\n"
    "    pythonapi::FeatureIterator::FeatureIterator(pythonapi::FeatureIterator const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___next__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (arg1)->__next__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureIterator_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator_current" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (arg1)->current();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___getitem__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureIterator___getitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureIterator___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___iter__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (pythonapi::FeatureIterator *)(arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureIterator___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___str__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureIterator___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___bool__" "', argument " "1"" of type '" "pythonapi::FeatureIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      result = (bool)((pythonapi::FeatureIterator const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  pythonapi::FeatureIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___eq__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__FeatureIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureIterator___eq__" "', argument " "2"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureIterator___eq__" "', argument " "2"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::FeatureIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::FeatureIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  pythonapi::FeatureIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___ne__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__FeatureIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureIterator___ne__" "', argument " "2"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureIterator___ne__" "', argument " "2"" of type '" "pythonapi::FeatureIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::FeatureIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::FeatureIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::FeatureIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___add__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureIterator___add__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->operator +(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::FeatureIterator(static_cast< const pythonapi::FeatureIterator& >(result))), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::FeatureIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___radd__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureIterator___radd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->__radd__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::FeatureIterator(static_cast< const pythonapi::FeatureIterator& >(result))), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureIterator___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::FeatureIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureIterator___sub__" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureIterator___sub__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->operator -(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::FeatureIterator(static_cast< const pythonapi::FeatureIterator& >(result))), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FeatureIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureIterator *arg1 = (pythonapi::FeatureIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FeatureIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FeatureIterator" "', argument " "1"" of type '" "pythonapi::FeatureIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureIterator * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FeatureIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FeatureCoverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FeatureCoverage")) SWIG_fail;
  {
    try {
      result = (pythonapi::FeatureCoverage *)new pythonapi::FeatureCoverage();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureCoverage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureCoverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FeatureCoverage",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FeatureCoverage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FeatureCoverage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::FeatureCoverage *)new pythonapi::FeatureCoverage((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureCoverage, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureCoverage(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FeatureCoverage__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FeatureCoverage__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FeatureCoverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::FeatureCoverage()\n"
    "    pythonapi::FeatureCoverage::FeatureCoverage(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::FeatureIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage___iter__" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::FeatureIterator(static_cast< const pythonapi::FeatureIterator& >(result))), SWIGTYPE_p_pythonapi__FeatureIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_featureTypes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_featureTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_featureTypes" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (IlwisTypes)((pythonapi::FeatureCoverage const *)arg1)->featureTypes();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_featureTypes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  IlwisTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_featureTypes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_featureTypes" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage_featureTypes" "', argument " "2"" of type '" "IlwisTypes""'");
  } 
  arg2 = static_cast< IlwisTypes >(val2);
  {
    try {
      (arg1)->featureTypes(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_featureTypes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FeatureCoverage_featureTypes__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FeatureCoverage_featureTypes__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureCoverage_featureTypes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::featureTypes() const\n"
    "    pythonapi::FeatureCoverage::featureTypes(IlwisTypes)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_featureCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_featureCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_featureCount" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (unsigned int)((pythonapi::FeatureCoverage const *)arg1)->featureCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_setFeatureCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  IlwisTypes arg2 ;
  quint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_setFeatureCount",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_setFeatureCount" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage_setFeatureCount" "', argument " "2"" of type '" "IlwisTypes""'");
  } 
  arg2 = static_cast< IlwisTypes >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FeatureCoverage_setFeatureCount" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    try {
      (arg1)->setFeatureCount(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_newFeature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  pythonapi::CoordinateSystem *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FeatureCoverage_newFeature",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_newFeature" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FeatureCoverage_newFeature" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeature" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FeatureCoverage_newFeature" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (arg1)->newFeature((std::string const &)*arg2,(pythonapi::CoordinateSystem const &)*arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_newFeature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  pythonapi::CoordinateSystem *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_newFeature",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_newFeature" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FeatureCoverage_newFeature" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeature" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp3);
  {
    try {
      result = (arg1)->newFeature((std::string const &)*arg2,(pythonapi::CoordinateSystem const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_newFeature__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_newFeature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_newFeature" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeature" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (arg1)->newFeature((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_newFeature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureCoverage_newFeature__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_pythonapi__CoordinateSystem, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FeatureCoverage_newFeature__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_pythonapi__CoordinateSystem, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FeatureCoverage_newFeature__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureCoverage_newFeature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::newFeature(std::string const &,pythonapi::CoordinateSystem const &,bool)\n"
    "    pythonapi::FeatureCoverage::newFeature(std::string const &,pythonapi::CoordinateSystem const &)\n"
    "    pythonapi::FeatureCoverage::newFeature(pythonapi::Geometry const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_newFeatureFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::Feature *arg2 = 0 ;
  pythonapi::CoordinateSystem *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< pythonapi::Feature > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_newFeatureFrom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_newFeatureFrom" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Feature,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_newFeatureFrom" "', argument " "2"" of type '" "pythonapi::Feature const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeatureFrom" "', argument " "2"" of type '" "pythonapi::Feature const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Feature * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FeatureCoverage_newFeatureFrom" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_newFeatureFrom" "', argument " "3"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp3);
  {
    try {
      result = (arg1)->newFeatureFrom((pythonapi::Feature const &)*arg2,(pythonapi::CoordinateSystem const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Feature(static_cast< const pythonapi::Feature& >(result))), SWIGTYPE_p_pythonapi__Feature, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_reprojectFeatures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_reprojectFeatures",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_reprojectFeatures" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_reprojectFeatures" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_reprojectFeatures" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      (arg1)->reprojectFeatures((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_attributeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Table result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_attributeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_attributeTable" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (arg1)->attributeTable();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Table(static_cast< const pythonapi::Table& >(result))), SWIGTYPE_p_pythonapi__Table, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_attributesFromTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::Table *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_attributesFromTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_attributesFromTable" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Table,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_attributesFromTable" "', argument " "2"" of type '" "pythonapi::Table const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_attributesFromTable" "', argument " "2"" of type '" "pythonapi::Table const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Table * >(argp2);
  {
    try {
      (arg1)->attributesFromTable((pythonapi::Table const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_addColumn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::ColumnDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_addColumn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_addColumn" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__ColumnDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_addColumn" "', argument " "2"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_addColumn" "', argument " "2"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp2);
  {
    try {
      (arg1)->addColumn((pythonapi::ColumnDefinition const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_addColumn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_addColumn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_addColumn" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_addColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_addColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FeatureCoverage_addColumn" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_addColumn" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addColumn((std::string const &)*arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_addColumn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureCoverage_addColumn__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FeatureCoverage_addColumn__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureCoverage_addColumn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::addColumn(pythonapi::ColumnDefinition const &)\n"
    "    pythonapi::FeatureCoverage::addColumn(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_columndefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_columndefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_columndefinition" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_columndefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_columndefinition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((pythonapi::FeatureCoverage const *)arg1)->columndefinition((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_columndefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_columndefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_columndefinition" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage_columndefinition" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::FeatureCoverage const *)arg1)->columndefinition(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_columndefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FeatureCoverage_columndefinition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureCoverage_columndefinition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureCoverage_columndefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::columndefinition(std::string const &) const\n"
    "    pythonapi::FeatureCoverage::columndefinition(quint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_setColumndefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::ColumnDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_setColumndefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_setColumndefinition" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__ColumnDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_setColumndefinition" "', argument " "2"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_setColumndefinition" "', argument " "2"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp2);
  {
    try {
      (arg1)->setColumndefinition((pythonapi::ColumnDefinition const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_columnIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_columnIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_columnIndex" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_columnIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_columnIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->columnIndex((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage___getitem__" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage___getitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::ColumnDefinition(static_cast< const pythonapi::ColumnDefinition& >(result))), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_checkInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  quint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_checkInput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_checkInput" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FeatureCoverage_checkInput" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    try {
      result = (PyObject *)((pythonapi::FeatureCoverage const *)arg1)->checkInput(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_definitionCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_definitionCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_definitionCount" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->definitionCount();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_setStackDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FeatureCoverage_setStackDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_setStackDefinition" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_setStackDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_setStackDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  arg3 = obj2;
  {
    try {
      (arg1)->setStackDefinition((pythonapi::Domain const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_indexOf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_indexOf" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_indexOf" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->indexOf((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_indexOf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage_indexOf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->indexOf(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_indexOf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->indexOf(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_indexOf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FeatureCoverage_indexOf__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureCoverage_indexOf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__FeatureCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_FeatureCoverage_indexOf__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureCoverage_indexOf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::FeatureCoverage::indexOf(std::string const &) const\n"
    "    pythonapi::FeatureCoverage::indexOf(double) const\n"
    "    pythonapi::FeatureCoverage::indexOf(PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_atIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_atIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_atIndex" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FeatureCoverage_atIndex" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::FeatureCoverage const *)arg1)->atIndex(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_indexes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_indexes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_indexes" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (PyObject *)((pythonapi::FeatureCoverage const *)arg1)->indexes();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_countStackDomainItems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_countStackDomainItems",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_countStackDomainItems" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::FeatureCoverage const *)arg1)->countStackDomainItems();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_stackDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Domain > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_stackDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_stackDomain" "', argument " "1"" of type '" "pythonapi::FeatureCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = ((pythonapi::FeatureCoverage const *)arg1)->stackDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Domain(static_cast< const pythonapi::Domain& >(result))), SWIGTYPE_p_pythonapi__Domain, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_clear" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      (arg1)->clear();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_toFeatureCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_toFeatureCoverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_toFeatureCoverage" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::FeatureCoverage *)pythonapi::FeatureCoverage::toFeatureCoverage(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_select(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_select",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_select" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_select" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_select" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->select((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::FeatureCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureCoverage_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_clone" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      result = (pythonapi::FeatureCoverage *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_geometryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_geometryType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_geometryType" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_geometryType" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_geometryType" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (IlwisTypes)(arg1)->geometryType((pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureCoverage_setCoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureCoverage_setCoordinateSystem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureCoverage_setCoordinateSystem" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureCoverage_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureCoverage_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      (arg1)->setCoordinateSystem((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FeatureCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FeatureCoverage *arg1 = (pythonapi::FeatureCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FeatureCoverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FeatureCoverage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FeatureCoverage" "', argument " "1"" of type '" "pythonapi::FeatureCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FeatureCoverage * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FeatureCoverage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__FeatureCoverage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Flow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FlowVal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Flow")) SWIG_fail;
  {
    try {
      result = (pythonapi::FlowVal *)new pythonapi::FlowVal();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__FlowVal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Flow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::FlowVal *arg1 = (pythonapi::FlowVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Flow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__FlowVal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Flow" "', argument " "1"" of type '" "pythonapi::FlowVal *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::FlowVal * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Flow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__FlowVal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PixelIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelIterator" "', argument " "1"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelIterator" "', argument " "1"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (pythonapi::PixelIterator *)new pythonapi::PixelIterator((pythonapi::PixelIterator const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Box *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PixelIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelIterator" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PixelIterator" "', argument " "2"" of type '" "pythonapi::Box const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelIterator" "', argument " "2"" of type '" "pythonapi::Box const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Box * >(argp2);
  {
    try {
      result = (pythonapi::PixelIterator *)new pythonapi::PixelIterator(arg1,(pythonapi::Box const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelIterator" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (pythonapi::PixelIterator *)new pythonapi::PixelIterator(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PixelIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelIterator" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PixelIterator" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelIterator" "', argument " "2"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (pythonapi::PixelIterator *)new pythonapi::PixelIterator(arg1,(pythonapi::Geometry const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelIterator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::PixelIterator *arg1 = (Ilwis::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelIterator" "', argument " "1"" of type '" "Ilwis::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::PixelIterator * >(argp1);
  {
    try {
      result = (pythonapi::PixelIterator *)new pythonapi::PixelIterator(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelIterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__PixelIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelIterator__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__PixelIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelIterator__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PixelIterator__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PixelIterator__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PixelIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::PixelIterator::PixelIterator(pythonapi::PixelIterator const &)\n"
    "    pythonapi::PixelIterator::PixelIterator(pythonapi::RasterCoverage *,pythonapi::Box const &)\n"
    "    pythonapi::PixelIterator::PixelIterator(pythonapi::RasterCoverage *)\n"
    "    pythonapi::PixelIterator::PixelIterator(pythonapi::RasterCoverage *,pythonapi::Geometry const &)\n"
    "    pythonapi::PixelIterator::PixelIterator(Ilwis::PixelIterator *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PixelIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelIterator" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___iter__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (pythonapi::PixelIterator *)(arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___next__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (double)(arg1)->__next__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___bool__" "', argument " "1"" of type '" "pythonapi::PixelIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (bool)((pythonapi::PixelIterator const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___str__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___float__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___float__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___float__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (double)(arg1)->__float__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___int__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator___int__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___int__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (quint64)(arg1)->__int__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___contains__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___contains__" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___contains__" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Pixel * >(argp2);
  {
    try {
      result = (bool)(arg1)->__contains__((pythonapi::Pixel const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Box result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_box" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (arg1)->box();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Box(static_cast< const pythonapi::Box& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelTemplate< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_position" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (arg1)->position();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Pixel(static_cast< const pythonapi::Pixel& >(result))), SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_setFlow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::Flow arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator_setFlow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_setFlow" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator_setFlow" "', argument " "2"" of type '" "pythonapi::Flow""'");
  } 
  arg2 = static_cast< pythonapi::Flow >(val2);
  {
    try {
      (arg1)->setFlow(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_xChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_xChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_xChanged" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (bool)(arg1)->xChanged();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_yChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_yChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_yChanged" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (bool)(arg1)->yChanged();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_zChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_zChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_zChanged" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (bool)(arg1)->zChanged();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___set__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___set__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___set__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (pythonapi::PixelIterator *)(arg1)->__set__((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___getitem__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___getitem__" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___getitem__" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Pixel * >(argp2);
  {
    try {
      result = (pythonapi::PixelIterator *) &(arg1)->__getitem__((pythonapi::Pixel const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___getitem__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator___getitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (double)(arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__PixelIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PixelIterator___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__PixelIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PixelIterator___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PixelIterator___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::PixelIterator::__getitem__(pythonapi::Pixel const &)\n"
    "    pythonapi::PixelIterator::__getitem__(quint32)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PixelIterator___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  quint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelIterator___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___setitem__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator___setitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PixelIterator___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___add__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator___add__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->operator +(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___radd__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator___radd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->__radd__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::PixelIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___iadd__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelIterator___iadd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::PixelIterator *)(arg1)->operator +=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___eq__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___eq__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___eq__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___ne__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___ne__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___ne__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___le__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___le__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___le__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator <=((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___lt__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___lt__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___lt__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator <((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___ge__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___ge__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___ge__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator >=((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  pythonapi::PixelIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelIterator___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator___gt__" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelIterator___gt__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelIterator___gt__" "', argument " "2"" of type '" "pythonapi::PixelIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator >((pythonapi::PixelIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_end" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_asBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Py_buffer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_asBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_asBuffer" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (Py_buffer *)(arg1)->asBuffer();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  {
    resultobj = PyMemoryView_FromBuffer(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelIterator_raster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::PixelIterator *arg1 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelIterator_raster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelIterator_raster" "', argument " "1"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::PixelIterator * >(argp1);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->raster();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PixelIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__PixelIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GeoReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::GeoReference *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GeoReference",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::GeoReference *)new pythonapi::GeoReference((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__GeoReference, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_toGeoReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::GeoReference *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_toGeoReference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_toGeoReference" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::GeoReference *)pythonapi::GeoReference::toGeoReference(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_coordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::CoordinateSystem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_coordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_coordinateSystem" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->coordinateSystem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::CoordinateSystem(static_cast< const pythonapi::CoordinateSystem& >(result))), SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_setCoordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::CoordinateSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_setCoordinateSystem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_setCoordinateSystem" "', argument " "1"" of type '" "pythonapi::GeoReference *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__CoordinateSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_setCoordinateSystem" "', argument " "2"" of type '" "pythonapi::CoordinateSystem const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::CoordinateSystem * >(argp2);
  {
    try {
      (arg1)->setCoordinateSystem((pythonapi::CoordinateSystem const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_pixel2Coord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::PixelD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_pixel2Coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_pixel2Coord" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_pixel2Coord" "', argument " "2"" of type '" "pythonapi::PixelD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_pixel2Coord" "', argument " "2"" of type '" "pythonapi::PixelD const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelD * >(argp2);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->pixel2Coord((pythonapi::PixelD const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_pixel2Coord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_pixel2Coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_pixel2Coord" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_pixel2Coord" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_pixel2Coord" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Pixel * >(argp2);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->pixel2Coord((pythonapi::Pixel const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_pixel2Coord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__GeoReference, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeoReference_pixel2Coord__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__GeoReference, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeoReference_pixel2Coord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GeoReference_pixel2Coord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::GeoReference::pixel2Coord(pythonapi::PixelD const &) const\n"
    "    pythonapi::GeoReference::pixel2Coord(pythonapi::Pixel const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeoReference_coord2Pixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::PixelTemplate< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_coord2Pixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_coord2Pixel" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_coord2Pixel" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_coord2Pixel" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->coord2Pixel((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelD(static_cast< const pythonapi::PixelD& >(result))), SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_box2Envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::Box *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_box2Envelope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_box2Envelope" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_box2Envelope" "', argument " "2"" of type '" "pythonapi::Box const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_box2Envelope" "', argument " "2"" of type '" "pythonapi::Box const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Box * >(argp2);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->box2Envelope((pythonapi::Box const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_envelope2Box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::Envelope *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Box result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_envelope2Box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_envelope2Box" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_envelope2Box" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_envelope2Box" "', argument " "2"" of type '" "pythonapi::Envelope const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Envelope * >(argp2);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->envelope2Box((pythonapi::Envelope const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Box(static_cast< const pythonapi::Box& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_pixelSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_pixelSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_pixelSize" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = (double)((pythonapi::GeoReference const *)arg1)->pixelSize();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::SizeTemplate< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_size" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = ((pythonapi::GeoReference const *)arg1)->size();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Size(static_cast< const pythonapi::Size& >(result))), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::Size *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_setSize" "', argument " "1"" of type '" "pythonapi::GeoReference *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_setSize" "', argument " "2"" of type '" "pythonapi::Size const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_setSize" "', argument " "2"" of type '" "pythonapi::Size const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Size * >(argp2);
  {
    try {
      (arg1)->setSize((pythonapi::Size const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_centerOfPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_centerOfPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_centerOfPixel" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = (bool)((pythonapi::GeoReference const *)arg1)->centerOfPixel();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_setCenterOfPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_setCenterOfPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_setCenterOfPixel" "', argument " "1"" of type '" "pythonapi::GeoReference *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoReference_setCenterOfPixel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setCenterOfPixel(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_isCompatible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  pythonapi::GeoReference *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoReference_isCompatible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_isCompatible" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__GeoReference,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoReference_isCompatible" "', argument " "2"" of type '" "pythonapi::GeoReference const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoReference_isCompatible" "', argument " "2"" of type '" "pythonapi::GeoReference const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::GeoReference * >(argp2);
  {
    try {
      result = (bool)((pythonapi::GeoReference const *)arg1)->isCompatible((pythonapi::GeoReference const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_compute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_compute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_compute" "', argument " "1"" of type '" "pythonapi::GeoReference *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = (bool)(arg1)->compute();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoReference_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoReference_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoReference_ilwisType" "', argument " "1"" of type '" "pythonapi::GeoReference const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      result = (IlwisTypes)((pythonapi::GeoReference const *)arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeoReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::GeoReference *arg1 = (pythonapi::GeoReference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeoReference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__GeoReference, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoReference" "', argument " "1"" of type '" "pythonapi::GeoReference *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::GeoReference * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeoReference_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__GeoReference, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RasterCoverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RasterCoverage")) SWIG_fail;
  {
    try {
      result = (pythonapi::RasterCoverage *)new pythonapi::RasterCoverage();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RasterCoverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RasterCoverage",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RasterCoverage" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::RasterCoverage *)new pythonapi::RasterCoverage(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RasterCoverage(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RasterCoverage__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RasterCoverage__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RasterCoverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::RasterCoverage()\n"
    "    pythonapi::RasterCoverage::RasterCoverage(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RasterCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RasterCoverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RasterCoverage" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___add__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___add__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___add__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator +(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___add__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator +(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___radd__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___radd__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__radd__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___sub__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___sub__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___sub__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator -(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___sub__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator -(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___rsub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___rsub__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___rsub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__rsub__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___mul__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___mul__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___mul__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator *(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___mul__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator *(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___rmul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___rmul__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__rmul__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___truediv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___truediv__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___truediv__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___truediv__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__truediv__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___truediv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___truediv__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__truediv__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___truediv__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___truediv____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___truediv____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage___truediv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::__truediv__(pythonapi::RasterCoverage &)\n"
    "    pythonapi::RasterCoverage::__truediv__(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___rtruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___rtruediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___rtruediv__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___rtruediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__rtruediv__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___gt__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___gt__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator >(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___lt__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___lt__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator <(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___gt__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___gt__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___gt__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator >(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___gt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___gt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___gt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___lt__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___lt__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___lt__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator <(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___lt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___lt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___lt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ge____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___ge__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___ge__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator >=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___le____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___le__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___le__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator <=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ge____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___ge__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___ge__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___ge__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator >=(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ge__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___ge____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___ge____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___le____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___le__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___le__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___le__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->operator <=(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___le__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___le____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___le____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___and____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___and__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___and__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__and__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___or____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___or__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___or__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___or__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__or__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___xor____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___xor__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___xor__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___xor__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__xor__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___rand__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___rand__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___rand__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___rand__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__rand__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ror__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___ror__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___ror__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___ror__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__ror__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___rxor__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___rxor__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___rxor__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___rxor__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__rxor__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___and____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___and__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___and__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___and__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__and__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___and__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___and____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___and____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___or____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___or__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___or__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___or__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___or__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__or__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___or__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___or____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___or____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___xor____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___xor__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___xor__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___xor__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___xor__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__xor__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___xor__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___xor____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___xor____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___eq__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___eq__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__eq__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___ne__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage___ne__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__ne__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___eq__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___eq__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___eq__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__eq__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___eq____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___ne__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage___ne__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage___ne__" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->__ne__(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage___ne____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage___ne____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_min__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_min" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_min" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_min" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_min" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::min(*arg1,*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_min__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_min" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_min" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_min" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::min(*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_min__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_min",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RasterCoverage_min" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_min" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_min" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::min(arg1,*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_min(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_min__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage_min__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_min__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_min'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::min(pythonapi::RasterCoverage &,pythonapi::RasterCoverage &)\n"
    "    pythonapi::RasterCoverage::min(pythonapi::RasterCoverage &,double)\n"
    "    pythonapi::RasterCoverage::min(double,pythonapi::RasterCoverage &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = 0 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_max" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_max" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_max" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_max" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::max(*arg1,*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_max" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_max" "', argument " "1"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_max" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::max(*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_max__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  pythonapi::RasterCoverage *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_max",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RasterCoverage_max" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__RasterCoverage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_max" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_max" "', argument " "2"" of type '" "pythonapi::RasterCoverage &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::RasterCoverage * >(argp2);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::max(arg1,*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_max(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_max__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage_max__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_max__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::max(pythonapi::RasterCoverage &,pythonapi::RasterCoverage &)\n"
    "    pythonapi::RasterCoverage::max(pythonapi::RasterCoverage &,double)\n"
    "    pythonapi::RasterCoverage::max(double,pythonapi::RasterCoverage &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage___iter__" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_coord2value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_coord2value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_coord2value" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Coordinate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_coord2value" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_coord2value" "', argument " "2"" of type '" "pythonapi::Coordinate const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Coordinate * >(argp2);
  {
    try {
      result = (double)(arg1)->coord2value((pythonapi::Coordinate const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_pix2value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_pix2value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_pix2value" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_pix2value" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_pix2value" "', argument " "2"" of type '" "pythonapi::Pixel const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Pixel * >(argp2);
  {
    try {
      result = (double)(arg1)->pix2value((pythonapi::Pixel const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_pix2value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::PixelD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_pix2value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_pix2value" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_pix2value" "', argument " "2"" of type '" "pythonapi::PixelD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_pix2value" "', argument " "2"" of type '" "pythonapi::PixelD const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::PixelD * >(argp2);
  {
    try {
      result = (double)(arg1)->pix2value((pythonapi::PixelD const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_pix2value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_pix2value__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__PixelTemplateT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_pix2value__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_pix2value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::pix2value(pythonapi::Pixel const &)\n"
    "    pythonapi::RasterCoverage::pix2value(pythonapi::PixelD const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::SizeTemplate< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_size" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->size();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Size(static_cast< const pythonapi::Size& >(result))), SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Size *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setSize" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__SizeTemplateT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_setSize" "', argument " "2"" of type '" "pythonapi::Size const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_setSize" "', argument " "2"" of type '" "pythonapi::Size const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Size * >(argp2);
  {
    try {
      (arg1)->setSize((pythonapi::Size const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_unload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_unload",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_unload" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      (arg1)->unload();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_coordinateSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::CoordinateSystem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_coordinateSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_coordinateSystem" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->coordinateSystem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::CoordinateSystem(static_cast< const pythonapi::CoordinateSystem& >(result))), SWIGTYPE_p_pythonapi__CoordinateSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_geoReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::GeoReference > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_geoReference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_geoReference" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->geoReference();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::GeoReference(static_cast< const pythonapi::GeoReference& >(result))), SWIGTYPE_p_pythonapi__GeoReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setGeoReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::GeoReference *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_setGeoReference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setGeoReference" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__GeoReference,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_setGeoReference" "', argument " "2"" of type '" "pythonapi::GeoReference const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_setGeoReference" "', argument " "2"" of type '" "pythonapi::GeoReference const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::GeoReference * >(argp2);
  {
    try {
      (arg1)->setGeoReference((pythonapi::GeoReference const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_datadef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_datadef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_datadef" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (pythonapi::DataDefinition *) &((pythonapi::RasterCoverage const *)arg1)->datadef();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setDataDef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::DataDefinition *arg2 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_setDataDef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setDataDef" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_setDataDef" "', argument " "2"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::DataDefinition * >(argp2);
  {
    try {
      (arg1)->setDataDef(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setDataDef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_setDataDef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setDataDef" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_setDataDef" "', argument " "2"" of type '" "pythonapi::Domain &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_setDataDef" "', argument " "2"" of type '" "pythonapi::Domain &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  {
    try {
      (arg1)->setDataDef(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setDataDef(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__DataDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_setDataDef__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__Domain, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_setDataDef__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_setDataDef'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::setDataDef(pythonapi::DataDefinition *)\n"
    "    pythonapi::RasterCoverage::setDataDef(pythonapi::Domain &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_statistics__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::NumericStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterCoverage_statistics",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_statistics" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_statistics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterCoverage_statistics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (pythonapi::NumericStatistics *)(arg1)->statistics(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_statistics__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::NumericStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_statistics",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_statistics" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_statistics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::NumericStatistics *)(arg1)->statistics(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_statistics__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_statistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_statistics" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (pythonapi::NumericStatistics *)(arg1)->statistics();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContainerStatisticsT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_statistics(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RasterCoverage_statistics__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage_statistics__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RasterCoverage_statistics__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_statistics'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::statistics(int,int)\n"
    "    pythonapi::RasterCoverage::statistics(int)\n"
    "    pythonapi::RasterCoverage::statistics()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_toRasterCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_toRasterCoverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_toRasterCoverage" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::RasterCoverage *)pythonapi::RasterCoverage::toRasterCoverage(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_begin" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_end" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_band(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::PixelIterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_band",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_band" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (arg1)->band(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::PixelIterator(static_cast< const pythonapi::PixelIterator& >(result))), SWIGTYPE_p_pythonapi__PixelIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_addBand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  pythonapi::PixelIterator *arg3 = (pythonapi::PixelIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterCoverage_addBand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_addBand" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  arg2 = obj1;
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_pythonapi__PixelIterator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RasterCoverage_addBand" "', argument " "3"" of type '" "pythonapi::PixelIterator *""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::PixelIterator * >(argp3);
  {
    try {
      (arg1)->addBand(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setBandDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  pythonapi::DataDefinition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterCoverage_setBandDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setBandDefinition" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  arg2 = obj1;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RasterCoverage_setBandDefinition" "', argument " "3"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_setBandDefinition" "', argument " "3"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::DataDefinition * >(argp3);
  {
    try {
      (arg1)->setBandDefinition(arg2,(pythonapi::DataDefinition const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_setStackDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterCoverage_setStackDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_setStackDefinition" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_setStackDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_setStackDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  arg3 = obj2;
  {
    try {
      (arg1)->setStackDefinition((pythonapi::Domain const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_indexOf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_indexOf" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_indexOf" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (quint32)((pythonapi::RasterCoverage const *)arg1)->indexOf((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_indexOf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_indexOf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (quint32)((pythonapi::RasterCoverage const *)arg1)->indexOf(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_indexOf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_indexOf" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (quint32)((pythonapi::RasterCoverage const *)arg1)->indexOf(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_indexOf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RasterCoverage_indexOf__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_indexOf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_RasterCoverage_indexOf__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_indexOf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::indexOf(std::string const &) const\n"
    "    pythonapi::RasterCoverage::indexOf(double) const\n"
    "    pythonapi::RasterCoverage::indexOf(PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_atIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_atIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_atIndex" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterCoverage_atIndex" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::RasterCoverage const *)arg1)->atIndex(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_indexes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_indexes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_indexes" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (PyObject *)((pythonapi::RasterCoverage const *)arg1)->indexes();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_countStackDomainItems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_countStackDomainItems",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_countStackDomainItems" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (quint32)((pythonapi::RasterCoverage const *)arg1)->countStackDomainItems();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_stackDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Domain > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_stackDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_stackDomain" "', argument " "1"" of type '" "pythonapi::RasterCoverage const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = ((pythonapi::RasterCoverage const *)arg1)->stackDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Domain(static_cast< const pythonapi::Domain& >(result))), SWIGTYPE_p_pythonapi__Domain, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_clear" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      (arg1)->clear();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_select__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_select",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_select" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RasterCoverage_select" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->select(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::RasterCoverage(static_cast< const pythonapi::RasterCoverage& >(result))), SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_select__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  pythonapi::Geometry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::RasterCoverage result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterCoverage_select",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_select" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Geometry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterCoverage_select" "', argument " "2"" of type '" "pythonapi::Geometry &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterCoverage_select" "', argument " "2"" of type '" "pythonapi::Geometry &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Geometry * >(argp2);
  {
    try {
      result = (arg1)->select(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::RasterCoverage(static_cast< const pythonapi::RasterCoverage& >(result))), SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_select(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__Geometry, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_select__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__RasterCoverage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RasterCoverage_select__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RasterCoverage_select'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::RasterCoverage::select(std::string)\n"
    "    pythonapi::RasterCoverage::select(pythonapi::Geometry &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_reprojectRaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  std::string arg2 ;
  quint32 arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RasterCoverage_reprojectRaster",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_reprojectRaster" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RasterCoverage_reprojectRaster" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterCoverage_reprojectRaster" "', argument " "3"" of type '" "quint32""'");
  } 
  arg3 = static_cast< quint32 >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RasterCoverage_reprojectRaster" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->reprojectRaster(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::RasterCoverage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_clone" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (pythonapi::RasterCoverage *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterCoverage_envelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::RasterCoverage *arg1 = (pythonapi::RasterCoverage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterCoverage_envelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__RasterCoverage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterCoverage_envelope" "', argument " "1"" of type '" "pythonapi::RasterCoverage *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::RasterCoverage * >(argp1);
  {
    try {
      result = (arg1)->envelope();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Envelope(static_cast< const pythonapi::Envelope& >(result))), SWIGTYPE_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RasterCoverage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__RasterCoverage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Catalog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Catalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Catalog",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Catalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Catalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Catalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Catalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (pythonapi::Catalog *)new pythonapi::Catalog((std::string const &)*arg1,(std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Catalog, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Catalog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::Catalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Catalog",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Catalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Catalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::Catalog *)new pythonapi::Catalog((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Catalog, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Catalog(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Catalog__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Catalog__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Catalog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Catalog::Catalog(std::string const &,std::string const &)\n"
    "    pythonapi::Catalog::Catalog(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Catalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Catalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Catalog" "', argument " "1"" of type '" "pythonapi::Catalog *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Catalog___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog___bool__" "', argument " "1"" of type '" "pythonapi::Catalog const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Catalog const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Catalog___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog___str__" "', argument " "1"" of type '" "pythonapi::Catalog *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Catalog_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog_ilwisType" "', argument " "1"" of type '" "pythonapi::Catalog *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Catalog_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog_items" "', argument " "1"" of type '" "pythonapi::Catalog *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->items();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog__getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Catalog *arg1 = (pythonapi::Catalog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Catalog__getitem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog__getitem" "', argument " "1"" of type '" "pythonapi::Catalog *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Catalog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Catalog__getitem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Catalog__getitem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (pythonapi::Object *)(arg1)->_getitem((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Catalog_toCatalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Catalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Catalog_toCatalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Catalog_toCatalog" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::Catalog *)pythonapi::Catalog::toCatalog(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Catalog, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Catalog_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Catalog, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Domain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Domain" "', argument " "1"" of type '" "pythonapi::Domain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_isStrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Domain_isStrict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_isStrict" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Domain const *)arg1)->isStrict();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_setStrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_setStrict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_setStrict" "', argument " "1"" of type '" "pythonapi::Domain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Domain_setStrict" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setStrict(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_impliedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_impliedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_impliedValue" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)((pythonapi::Domain const *)arg1)->impliedValue(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Domain > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Domain_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_parent" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      result = ((pythonapi::Domain const *)arg1)->parent();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Domain(static_cast< const pythonapi::Domain& >(result))), SWIGTYPE_p_pythonapi__Domain, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_setParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_setParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_setParent" "', argument " "1"" of type '" "pythonapi::Domain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Domain_setParent" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Domain_setParent" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  {
    try {
      (arg1)->setParent((pythonapi::Domain const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_getRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Range *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Domain_getRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_getRange" "', argument " "1"" of type '" "pythonapi::Domain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      result = (pythonapi::Range *) &(arg1)->getRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_contains" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  arg2 = obj1;
  {
    try {
      result = ((pythonapi::Domain const *)arg1)->contains(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_isCompatibleWith(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_isCompatibleWith",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_isCompatibleWith" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Domain_isCompatibleWith" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Domain_isCompatibleWith" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  {
    try {
      result = (bool)((pythonapi::Domain const *)arg1)->isCompatibleWith((pythonapi::Domain const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_setRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  pythonapi::Range *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Domain_setRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_setRange" "', argument " "1"" of type '" "pythonapi::Domain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Range,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Domain_setRange" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Domain_setRange" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Range * >(argp2);
  {
    try {
      (arg1)->setRange((pythonapi::Range const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_valueType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = (pythonapi::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Domain_valueType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_valueType" "', argument " "1"" of type '" "pythonapi::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      result = (IlwisTypes)((pythonapi::Domain const *)arg1)->valueType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Domain_toDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Domain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Domain_toDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_toDomain" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::Domain *)pythonapi::Domain::toDomain(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Domain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Domain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NumericDomain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NumericDomain")) SWIG_fail;
  {
    try {
      result = (pythonapi::NumericDomain *)new pythonapi::NumericDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericDomain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NumericDomain",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::NumericDomain *)new pythonapi::NumericDomain((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericDomain, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericDomain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NumericDomain__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NumericDomain__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NumericDomain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::NumericDomain::NumericDomain()\n"
    "    pythonapi::NumericDomain::NumericDomain(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumericDomain_toNumericDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Object *arg1 = (pythonapi::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericDomain_toNumericDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericDomain_toNumericDomain" "', argument " "1"" of type '" "pythonapi::Object *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Object * >(argp1);
  {
    try {
      result = (pythonapi::NumericDomain *)pythonapi::NumericDomain::toNumericDomain(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericDomain, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumericDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericDomain *arg1 = (pythonapi::NumericDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NumericDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericDomain" "', argument " "1"" of type '" "pythonapi::NumericDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericDomain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericDomain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__NumericDomain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ItemDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ItemDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ItemDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Range,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ItemDomain" "', argument " "1"" of type '" "pythonapi::Range const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ItemDomain" "', argument " "1"" of type '" "pythonapi::Range const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (pythonapi::ItemDomain *)new pythonapi::ItemDomain((pythonapi::Range const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ItemDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ItemDomain_count",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_count" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  {
    try {
      result = (quint32)(arg1)->count();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_setTheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemDomain_setTheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_setTheme" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ItemDomain_setTheme" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ItemDomain_setTheme" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setTheme((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_theme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ItemDomain_theme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_theme" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  {
    try {
      result = (arg1)->theme();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_removeItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemDomain_removeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_removeItem" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ItemDomain_removeItem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ItemDomain_removeItem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeItem((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_addItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemDomain_addItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_addItem" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->addItem(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ItemDomain_item",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_item" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ItemDomain_item" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ItemDomain_item" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (PyObject *)(arg1)->item(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemDomain_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  pythonapi::Range *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemDomain_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemDomain_range" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Range,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ItemDomain_range" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ItemDomain_range" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Range * >(argp2);
  {
    try {
      (arg1)->range((pythonapi::Range const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ItemDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemDomain *arg1 = (pythonapi::ItemDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ItemDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ItemDomain" "', argument " "1"" of type '" "pythonapi::ItemDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemDomain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ItemDomain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ItemDomain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColorDomain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColorDomain")) SWIG_fail;
  {
    try {
      result = (pythonapi::ColorDomain *)new pythonapi::ColorDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColorDomain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::ColorDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ColorDomain",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColorDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColorDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::ColorDomain *)new pythonapi::ColorDomain((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorDomain, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColorDomain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ColorDomain__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColorDomain__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ColorDomain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorDomain::ColorDomain()\n"
    "    pythonapi::ColorDomain::ColorDomain(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorDomain_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorDomain *arg1 = (pythonapi::ColorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorDomain_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDomain_ilwisType" "', argument " "1"" of type '" "pythonapi::ColorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorDomain * >(argp1);
  {
    try {
      result = (IlwisTypes)((pythonapi::ColorDomain const *)arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorDomain_containsColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorDomain *arg1 = (pythonapi::ColorDomain *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorDomain_containsColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDomain_containsColor" "', argument " "1"" of type '" "pythonapi::ColorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorDomain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorDomain_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorDomain_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  {
    try {
      result = ((pythonapi::ColorDomain const *)arg1)->containsColor((pythonapi::Color const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ColorDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorDomain *arg1 = (pythonapi::ColorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorDomain" "', argument " "1"" of type '" "pythonapi::ColorDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorDomain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorDomain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ColorDomain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TextDomain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TextDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TextDomain")) SWIG_fail;
  {
    try {
      result = (pythonapi::TextDomain *)new pythonapi::TextDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TextDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TextDomain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::TextDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TextDomain",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TextDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TextDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::TextDomain *)new pythonapi::TextDomain((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TextDomain, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TextDomain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TextDomain__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TextDomain__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TextDomain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TextDomain::TextDomain()\n"
    "    pythonapi::TextDomain::TextDomain(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TextDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TextDomain *arg1 = (pythonapi::TextDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TextDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TextDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TextDomain" "', argument " "1"" of type '" "pythonapi::TextDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TextDomain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TextDomain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__TextDomain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TimeDomain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeDomain")) SWIG_fail;
  {
    try {
      result = (pythonapi::TimeDomain *)new pythonapi::TimeDomain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDomain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::TimeDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeDomain",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeDomain" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::TimeDomain *)new pythonapi::TimeDomain((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeDomain, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDomain__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::TimeDomain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Range,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeDomain" "', argument " "1"" of type '" "pythonapi::Range const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeDomain" "', argument " "1"" of type '" "pythonapi::Range const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (pythonapi::TimeDomain *)new pythonapi::TimeDomain((pythonapi::Range const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeDomain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDomain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeDomain__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TimeDomain__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TimeDomain__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TimeDomain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TimeDomain::TimeDomain()\n"
    "    pythonapi::TimeDomain::TimeDomain(std::string const &)\n"
    "    pythonapi::TimeDomain::TimeDomain(pythonapi::Range const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TimeDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeDomain *arg1 = (pythonapi::TimeDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeDomain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeDomain" "', argument " "1"" of type '" "pythonapi::TimeDomain *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeDomain * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeDomain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__TimeDomain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Range___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range___bool__" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Range const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range___str__" "', argument " "1"" of type '" "pythonapi::Range *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_ilwisType" "', argument " "1"" of type '" "pythonapi::Range *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_valueType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_valueType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_valueType" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (IlwisTypes)((pythonapi::Range const *)arg1)->valueType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_ensure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Range_ensure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_ensure" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Range_ensure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (PyObject *)((pythonapi::Range const *)arg1)->ensure((PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_ensure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Range_ensure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_ensure" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)((pythonapi::Range const *)arg1)->ensure((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_ensure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Range_ensure__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Range_ensure__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Range_ensure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Range::ensure(PyObject const *,bool) const\n"
    "    pythonapi::Range::ensure(PyObject const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Range_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Range_contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_contains" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Range_contains" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::Range const *)arg1)->contains((PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Range_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_contains" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (bool)((pythonapi::Range const *)arg1)->contains((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Range_contains__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Range_contains__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Range_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Range::contains(PyObject const *,bool) const\n"
    "    pythonapi::Range::contains(PyObject const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Range_isContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_isContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_isContinuous" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Range const *)arg1)->isContinuous();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_impliedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Range *arg1 = (pythonapi::Range *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Range_impliedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_impliedValue" "', argument " "1"" of type '" "pythonapi::Range const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Range * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)((pythonapi::Range const *)arg1)->impliedValue((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Range_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Range, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NumericRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::NumericRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_NumericRange",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NumericRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NumericRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NumericRange" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (pythonapi::NumericRange *)new pythonapi::NumericRange(arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::NumericRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NumericRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NumericRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NumericRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (pythonapi::NumericRange *)new pythonapi::NumericRange(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericRange__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NumericRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__NumericRange,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericRange" "', argument " "1"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericRange" "', argument " "1"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (pythonapi::NumericRange *)new pythonapi::NumericRange((pythonapi::NumericRange const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericRange__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::NumericRange *arg1 = (Ilwis::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NumericRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericRange" "', argument " "1"" of type '" "Ilwis::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::NumericRange * >(argp1);
  {
    try {
      result = (pythonapi::NumericRange *)new pythonapi::NumericRange(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericRange__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NumericRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::NumericRange *)new pythonapi::NumericRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NumericRange__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__NumericRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NumericRange__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__NumericRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NumericRange__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NumericRange__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NumericRange__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NumericRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::NumericRange::NumericRange(double,double,double)\n"
    "    pythonapi::NumericRange::NumericRange(double,double)\n"
    "    pythonapi::NumericRange::NumericRange(pythonapi::NumericRange const &)\n"
    "    pythonapi::NumericRange::NumericRange(Ilwis::NumericRange *)\n"
    "    pythonapi::NumericRange::NumericRange()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NumericRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NumericRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericRange" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NumericRange_contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_contains" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericRange_contains" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericRange_contains" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::NumericRange const *)arg1)->contains(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericRange_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_contains" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericRange_contains" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)((pythonapi::NumericRange const *)arg1)->contains(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__NumericRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NumericRange_contains__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__NumericRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NumericRange_contains__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NumericRange_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::NumericRange::contains(double,bool) const\n"
    "    pythonapi::NumericRange::contains(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumericRange_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_max" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (double)((pythonapi::NumericRange const *)arg1)->max();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_setMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericRange_setMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_setMax" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericRange_setMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMax(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_min" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (double)((pythonapi::NumericRange const *)arg1)->min();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_setMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericRange_setMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_setMin" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericRange_setMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMin(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_distance" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (double)((pythonapi::NumericRange const *)arg1)->distance();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_setResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericRange_setResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_setResolution" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericRange_setResolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setResolution(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_resolution" "', argument " "1"" of type '" "pythonapi::NumericRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (double)((pythonapi::NumericRange const *)arg1)->resolution();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  pythonapi::NumericRange *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericRange_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_set" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__NumericRange,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumericRange_set" "', argument " "2"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumericRange_set" "', argument " "2"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::NumericRange * >(argp2);
  {
    try {
      (arg1)->set((pythonapi::NumericRange const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::RangeIterator< double,pythonapi::NumericRange,double,Ilwis::NumericRange > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange___iter__" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::NumericRangeIterator(static_cast< const pythonapi::NumericRangeIterator& >(result))), SWIGTYPE_p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::RangeIterator< double,pythonapi::NumericRange,double,Ilwis::NumericRange > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_begin" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::NumericRangeIterator(static_cast< const pythonapi::NumericRangeIterator& >(result))), SWIGTYPE_p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::RangeIterator< double,pythonapi::NumericRange,double,Ilwis::NumericRange > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_end" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      result = (arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::NumericRangeIterator(static_cast< const pythonapi::NumericRangeIterator& >(result))), SWIGTYPE_p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericRange_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericRange *arg1 = (pythonapi::NumericRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericRange_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericRange_clear" "', argument " "1"" of type '" "pythonapi::NumericRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericRange * >(argp1);
  {
    try {
      (arg1)->clear();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__NumericRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ItemRange_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemRange *arg1 = (pythonapi::ItemRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemRange_add" "', argument " "1"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemRange * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemRange_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemRange *arg1 = (pythonapi::ItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ItemRange_count",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemRange_count" "', argument " "1"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemRange * >(argp1);
  {
    try {
      result = (quint32)(arg1)->count();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemRange_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemRange *arg1 = (pythonapi::ItemRange *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ItemRange_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemRange_remove" "', argument " "1"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ItemRange_remove" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ItemRange_remove" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->remove((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ItemRange_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemRange *arg1 = (pythonapi::ItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ItemRange_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ItemRange_clear" "', argument " "1"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemRange * >(argp1);
  {
    try {
      (arg1)->clear();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ItemRange *arg1 = (pythonapi::ItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ItemRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ItemRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ItemRange" "', argument " "1"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ItemRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ItemRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ItemRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NumericItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NumericItemRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::NumericItemRange *)new pythonapi::NumericItemRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericItemRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NumericItemRange_add",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_add" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NumericItemRange_add" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericItemRange_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NumericItemRange_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NumericItemRange_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->add(arg2,arg3,arg4,arg5);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NumericItemRange_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_add" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NumericItemRange_add" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericItemRange_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NumericItemRange_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->add(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericItemRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_add" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__NumericItemRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_NumericItemRange_add__SWIG_2(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__NumericItemRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NumericItemRange_add__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__NumericItemRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NumericItemRange_add__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NumericItemRange_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::NumericItemRange::add(std::string,double,double,double)\n"
    "    pythonapi::NumericItemRange::add(std::string,double,double)\n"
    "    pythonapi::NumericItemRange::add(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_listAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericItemRange_listAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_listAll" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->listAll();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericItemRange_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_index" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericItemRange_index" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)(arg1)->index(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_gotoIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  qint32 arg2 ;
  qint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  qint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NumericItemRange_gotoIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_gotoIndex" "', argument " "1"" of type '" "pythonapi::NumericItemRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericItemRange_gotoIndex" "', argument " "2"" of type '" "qint32""'");
  } 
  arg2 = static_cast< qint32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericItemRange_gotoIndex" "', argument " "3"" of type '" "qint32""'");
  } 
  arg3 = static_cast< qint32 >(val3);
  {
    try {
      result = (qint32)((pythonapi::NumericItemRange const *)arg1)->gotoIndex(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericItemRange_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NumericItemRange_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericItemRange_clone" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  {
    try {
      result = (pythonapi::NumericItemRange *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NumericItemRange, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumericItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NumericItemRange *arg1 = (pythonapi::NumericItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NumericItemRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NumericItemRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericItemRange" "', argument " "1"" of type '" "pythonapi::NumericItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NumericItemRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericItemRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__NumericItemRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexedItemRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::IndexedItemRange *)new pythonapi::IndexedItemRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedItemRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedItemRange_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedItemRange *arg1 = (pythonapi::IndexedItemRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedItemRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedItemRange_add" "', argument " "1"" of type '" "pythonapi::IndexedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedItemRange * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedItemRange_gotoIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedItemRange *arg1 = (pythonapi::IndexedItemRange *) 0 ;
  qint32 arg2 ;
  qint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  qint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedItemRange_gotoIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedItemRange_gotoIndex" "', argument " "1"" of type '" "pythonapi::IndexedItemRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedItemRange * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedItemRange_gotoIndex" "', argument " "2"" of type '" "qint32""'");
  } 
  arg2 = static_cast< qint32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedItemRange_gotoIndex" "', argument " "3"" of type '" "qint32""'");
  } 
  arg3 = static_cast< qint32 >(val3);
  {
    try {
      result = (qint32)((pythonapi::IndexedItemRange const *)arg1)->gotoIndex(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedItemRange_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedItemRange *arg1 = (pythonapi::IndexedItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::IndexedItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedItemRange_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedItemRange_clone" "', argument " "1"" of type '" "pythonapi::IndexedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedItemRange * >(argp1);
  {
    try {
      result = (pythonapi::IndexedItemRange *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedItemRange, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedItemRange *arg1 = (pythonapi::IndexedItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedItemRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedItemRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedItemRange" "', argument " "1"" of type '" "pythonapi::IndexedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedItemRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedItemRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__IndexedItemRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NamedItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NamedItemRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::NamedItemRange *)new pythonapi::NamedItemRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedItemRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NamedItemRange_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *arg1 = (pythonapi::NamedItemRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NamedItemRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedItemRange_add" "', argument " "1"" of type '" "pythonapi::NamedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedItemRange * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NamedItemRange_listAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *arg1 = (pythonapi::NamedItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NamedItemRange_listAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedItemRange_listAll" "', argument " "1"" of type '" "pythonapi::NamedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedItemRange * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->listAll();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NamedItemRange_gotoIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *arg1 = (pythonapi::NamedItemRange *) 0 ;
  qint32 arg2 ;
  qint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  qint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NamedItemRange_gotoIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedItemRange_gotoIndex" "', argument " "1"" of type '" "pythonapi::NamedItemRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedItemRange * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NamedItemRange_gotoIndex" "', argument " "2"" of type '" "qint32""'");
  } 
  arg2 = static_cast< qint32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NamedItemRange_gotoIndex" "', argument " "3"" of type '" "qint32""'");
  } 
  arg3 = static_cast< qint32 >(val3);
  {
    try {
      result = (qint32)((pythonapi::NamedItemRange const *)arg1)->gotoIndex(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NamedItemRange_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *arg1 = (pythonapi::NamedItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NamedItemRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NamedItemRange_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedItemRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedItemRange_clone" "', argument " "1"" of type '" "pythonapi::NamedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedItemRange * >(argp1);
  {
    try {
      result = (pythonapi::NamedItemRange *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedItemRange, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NamedItemRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedItemRange *arg1 = (pythonapi::NamedItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NamedItemRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedItemRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NamedItemRange" "', argument " "1"" of type '" "pythonapi::NamedItemRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedItemRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NamedItemRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__NamedItemRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ThematicRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThematicRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::ThematicRange *)new pythonapi::ThematicRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThematicRange_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_add" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add(arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThematicRange_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_add" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThematicRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_add" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThematicRange_add" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_add__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThematicRange_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_add" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->add(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThematicRange_add__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ThematicRange_add__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThematicRange_add__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThematicRange_add__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThematicRange_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ThematicRange::add(std::string,std::string,std::string)\n"
    "    pythonapi::ThematicRange::add(std::string,std::string)\n"
    "    pythonapi::ThematicRange::add(std::string)\n"
    "    pythonapi::ThematicRange::add(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThematicRange_listAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThematicRange_listAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_listAll" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->listAll();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicRange_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ThematicRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThematicRange_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicRange_clone" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    try {
      result = (pythonapi::ThematicRange *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicRange, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThematicRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicRange *arg1 = (pythonapi::ThematicRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThematicRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThematicRange" "', argument " "1"" of type '" "pythonapi::ThematicRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThematicRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ThematicRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColorRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColorRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::ColorRange *)new pythonapi::ColorRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColorRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IlwisTypes arg1 ;
  pythonapi::ColorModel arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColorRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ColorRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ColorRange" "', argument " "1"" of type '" "IlwisTypes""'");
  } 
  arg1 = static_cast< IlwisTypes >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ColorRange" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    try {
      result = (pythonapi::ColorRange *)new pythonapi::ColorRange(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColorRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ColorRange__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ColorRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ColorRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorRange::ColorRange()\n"
    "    pythonapi::ColorRange::ColorRange(IlwisTypes,pythonapi::ColorModel)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorRange_defaultColorModel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorRange *arg1 = (pythonapi::ColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ColorModel result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorRange_defaultColorModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorRange_defaultColorModel" "', argument " "1"" of type '" "pythonapi::ColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorRange * >(argp1);
  {
    try {
      result = (pythonapi::ColorModel)((pythonapi::ColorRange const *)arg1)->defaultColorModel();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_defaultColorModel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorRange *arg1 = (pythonapi::ColorRange *) 0 ;
  pythonapi::ColorModel arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorRange_defaultColorModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorRange_defaultColorModel" "', argument " "1"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorRange * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorRange_defaultColorModel" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    try {
      (arg1)->defaultColorModel(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_defaultColorModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ColorRange_defaultColorModel__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ColorRange_defaultColorModel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColorRange_defaultColorModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorRange::defaultColorModel() const\n"
    "    pythonapi::ColorRange::defaultColorModel(pythonapi::ColorModel)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorRange_toColor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  quint64 arg1 ;
  pythonapi::ColorModel arg2 ;
  std::string *arg3 = 0 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorRange_toColor",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ColorRange_toColor" "', argument " "1"" of type '" "quint64""'");
  } 
  arg1 = static_cast< quint64 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorRange_toColor" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ColorRange_toColor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorRange_toColor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = pythonapi::ColorRange::toColor(arg1,arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_toColor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  quint64 arg1 ;
  pythonapi::ColorModel arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorRange_toColor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ColorRange_toColor" "', argument " "1"" of type '" "quint64""'");
  } 
  arg1 = static_cast< quint64 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorRange_toColor" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    try {
      result = pythonapi::ColorRange::toColor(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_toColor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  pythonapi::ColorModel arg2 ;
  std::string *arg3 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorRange_toColor",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorRange_toColor" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ColorRange_toColor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorRange_toColor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = pythonapi::ColorRange::toColor(arg1,arg2,(std::string const &)*arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_toColor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  pythonapi::ColorModel arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorRange_toColor",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorRange_toColor" "', argument " "2"" of type '" "pythonapi::ColorModel""'");
  } 
  arg2 = static_cast< pythonapi::ColorModel >(val2);
  {
    try {
      result = pythonapi::ColorRange::toColor(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorRange_toColor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ColorRange_toColor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ColorRange_toColor__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ColorRange_toColor__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ColorRange_toColor__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColorRange_toColor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorRange::toColor(quint64,pythonapi::ColorModel,std::string const &)\n"
    "    pythonapi::ColorRange::toColor(quint64,pythonapi::ColorModel)\n"
    "    pythonapi::ColorRange::toColor(PyObject *,pythonapi::ColorModel,std::string const &)\n"
    "    pythonapi::ColorRange::toColor(PyObject *,pythonapi::ColorModel)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ColorRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorRange *arg1 = (pythonapi::ColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorRange" "', argument " "1"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ColorRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ContinuousColorRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ContinuousColorRange")) SWIG_fail;
  {
    try {
      result = (pythonapi::ContinuousColorRange *)new pythonapi::ContinuousColorRange();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContinuousColorRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousColorRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Color *arg1 = 0 ;
  pythonapi::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ContinuousColorRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ContinuousColorRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ContinuousColorRange" "', argument " "1"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ContinuousColorRange" "', argument " "1"" of type '" "pythonapi::Color const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ContinuousColorRange" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ContinuousColorRange" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  {
    try {
      result = (pythonapi::ContinuousColorRange *)new pythonapi::ContinuousColorRange((pythonapi::Color const &)*arg1,(pythonapi::Color const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContinuousColorRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousColorRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ContinuousColorRange__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ContinuousColorRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ContinuousColorRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContinuousColorRange::ContinuousColorRange()\n"
    "    pythonapi::ContinuousColorRange::ContinuousColorRange(pythonapi::Color const &,pythonapi::Color const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ContinuousColorRange *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousColorRange_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_clone" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  {
    try {
      result = (pythonapi::ContinuousColorRange *)((pythonapi::ContinuousColorRange const *)arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_ensure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ContinuousColorRange_ensure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_ensure" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ContinuousColorRange_ensure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (PyObject *)((pythonapi::ContinuousColorRange const *)arg1)->ensure((PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_ensure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousColorRange_ensure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_ensure" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)((pythonapi::ContinuousColorRange const *)arg1)->ensure((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_ensure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ContinuousColorRange_ensure__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ContinuousColorRange_ensure__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousColorRange_ensure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContinuousColorRange::ensure(PyObject const *,bool) const\n"
    "    pythonapi::ContinuousColorRange::ensure(PyObject const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ContinuousColorRange_containsVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsVar" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ContinuousColorRange_containsVar" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsVar((PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousColorRange_containsVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsVar" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsVar((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsVar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ContinuousColorRange_containsVar__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ContinuousColorRange_containsVar__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousColorRange_containsVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContinuousColorRange::containsVar(PyObject const *,bool) const\n"
    "    pythonapi::ContinuousColorRange::containsVar(PyObject const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsColor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ContinuousColorRange_containsColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsColor" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousColorRange_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousColorRange_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ContinuousColorRange_containsColor" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsColor((pythonapi::Color const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsColor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousColorRange_containsColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsColor" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousColorRange_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousColorRange_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsColor((pythonapi::Color const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsColor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousColorRange_containsColor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ContinuousColorRange_containsColor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousColorRange_containsColor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContinuousColorRange::containsColor(pythonapi::Color const &,bool) const\n"
    "    pythonapi::ContinuousColorRange::containsColor(pythonapi::Color const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  pythonapi::ColorRange *arg2 = (pythonapi::ColorRange *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ContinuousColorRange_containsRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsRange" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousColorRange_containsRange" "', argument " "2"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColorRange * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ContinuousColorRange_containsRange" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsRange(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  pythonapi::ColorRange *arg2 = (pythonapi::ColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousColorRange_containsRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_containsRange" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousColorRange_containsRange" "', argument " "2"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColorRange * >(argp2);
  {
    try {
      result = (bool)((pythonapi::ContinuousColorRange const *)arg1)->containsRange(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_containsRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousColorRange_containsRange__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ContinuousColorRange, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ContinuousColorRange_containsRange__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousColorRange_containsRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ContinuousColorRange::containsRange(pythonapi::ColorRange *,bool) const\n"
    "    pythonapi::ContinuousColorRange::containsRange(pythonapi::ColorRange *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousColorRange_impliedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousColorRange_impliedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousColorRange_impliedValue" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  arg2 = obj1;
  {
    try {
      result = ((pythonapi::ContinuousColorRange const *)arg1)->impliedValue((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ContinuousColorRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ContinuousColorRange *arg1 = (pythonapi::ContinuousColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ContinuousColorRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ContinuousColorRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ContinuousColorRange" "', argument " "1"" of type '" "pythonapi::ContinuousColorRange *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ContinuousColorRange * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ContinuousColorRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ContinuousColorRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColorPalette(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColorPalette")) SWIG_fail;
  {
    try {
      result = (pythonapi::ColorPalette *)new pythonapi::ColorPalette();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColorPalette, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_item__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_item",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_item" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorPalette_item" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::ColorPalette const *)arg1)->item(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_item__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_item",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_item" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_item" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorPalette_item" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((pythonapi::ColorPalette const *)arg1)->item((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_item(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ColorPalette_item__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ColorPalette_item__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColorPalette_item'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorPalette::item(quint32) const\n"
    "    pythonapi::ColorPalette::item(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorPalette_itemByOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_itemByOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_itemByOrder" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorPalette_itemByOrder" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = ((pythonapi::ColorPalette const *)arg1)->itemByOrder(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_color(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_color",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_color" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorPalette_color" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->color(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_add" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_add" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorPalette_add" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  {
    try {
      (arg1)->add((pythonapi::Color const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_remove" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_remove" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorPalette_remove" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->remove((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorPalette_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_clear" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  {
    try {
      (arg1)->clear();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsColor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorPalette_containsColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_containsColor" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorPalette_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ColorPalette_containsColor" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::ColorPalette const *)arg1)->containsColor((pythonapi::Color const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsColor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  pythonapi::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_containsColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_containsColor" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorPalette_containsColor" "', argument " "2"" of type '" "pythonapi::Color const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Color * >(argp2);
  {
    try {
      result = (bool)((pythonapi::ColorPalette const *)arg1)->containsColor((pythonapi::Color const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsColor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ColorPalette_containsColor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ColorPalette_containsColor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColorPalette_containsColor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorPalette::containsColor(pythonapi::Color const &,bool) const\n"
    "    pythonapi::ColorPalette::containsColor(pythonapi::Color const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  pythonapi::ColorRange *arg2 = (pythonapi::ColorRange *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorPalette_containsRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_containsRange" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_containsRange" "', argument " "2"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColorRange * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ColorPalette_containsRange" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::ColorPalette const *)arg1)->containsRange(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  pythonapi::ColorRange *arg2 = (pythonapi::ColorRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorPalette_containsRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_containsRange" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__ColorRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorPalette_containsRange" "', argument " "2"" of type '" "pythonapi::ColorRange *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::ColorRange * >(argp2);
  {
    try {
      result = (bool)((pythonapi::ColorPalette const *)arg1)->containsRange(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_containsRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ColorPalette_containsRange__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColorPalette, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__ColorRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ColorPalette_containsRange__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColorPalette_containsRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColorPalette::containsRange(pythonapi::ColorRange *,bool) const\n"
    "    pythonapi::ColorPalette::containsRange(pythonapi::ColorRange *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColorPalette_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorPalette_count",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_count" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  {
    try {
      result = (quint32)(arg1)->count();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_valueAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  quint32 arg2 ;
  pythonapi::ItemRange *arg3 = (pythonapi::ItemRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorPalette_valueAt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_valueAt" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorPalette_valueAt" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_pythonapi__ItemRange, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ColorPalette_valueAt" "', argument " "3"" of type '" "pythonapi::ItemRange *""'"); 
  }
  arg3 = reinterpret_cast< pythonapi::ItemRange * >(argp3);
  {
    try {
      result = (arg1)->valueAt(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Color(static_cast< const pythonapi::Color& >(result))), SWIGTYPE_p_pythonapi__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorPalette_gotoIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  qint32 arg2 ;
  qint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  qint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorPalette_gotoIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorPalette_gotoIndex" "', argument " "1"" of type '" "pythonapi::ColorPalette const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorPalette_gotoIndex" "', argument " "2"" of type '" "qint32""'");
  } 
  arg2 = static_cast< qint32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ColorPalette_gotoIndex" "', argument " "3"" of type '" "qint32""'");
  } 
  arg3 = static_cast< qint32 >(val3);
  {
    try {
      result = (qint32)((pythonapi::ColorPalette const *)arg1)->gotoIndex(arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ColorPalette(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColorPalette *arg1 = (pythonapi::ColorPalette *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorPalette",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColorPalette, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorPalette" "', argument " "1"" of type '" "pythonapi::ColorPalette *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColorPalette * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorPalette_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ColorPalette, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IlwisTypes arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeInterval",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeInterval" "', argument " "1"" of type '" "IlwisTypes""'");
  } 
  arg1 = static_cast< IlwisTypes >(val1);
  {
    try {
      result = (pythonapi::TimeInterval *)new pythonapi::TimeInterval(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeInterval")) SWIG_fail;
  {
    try {
      result = (pythonapi::TimeInterval *)new pythonapi::TimeInterval();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  std::string arg3 ;
  IlwisTypes arg4 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TimeInterval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  arg1 = obj0;
  arg2 = obj1;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeInterval" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TimeInterval" "', argument " "4"" of type '" "IlwisTypes""'");
  } 
  arg4 = static_cast< IlwisTypes >(val4);
  {
    try {
      result = (pythonapi::TimeInterval *)new pythonapi::TimeInterval((PyObject const *)arg1,(PyObject const *)arg2,arg3,arg4);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TimeInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  arg2 = obj1;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeInterval" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (pythonapi::TimeInterval *)new pythonapi::TimeInterval((PyObject const *)arg1,(PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TimeInterval",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  arg2 = obj1;
  {
    try {
      result = (pythonapi::TimeInterval *)new pythonapi::TimeInterval((PyObject const *)arg1,(PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeInterval__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TimeInterval__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_new_TimeInterval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TimeInterval__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TimeInterval__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TimeInterval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TimeInterval::TimeInterval(IlwisTypes)\n"
    "    pythonapi::TimeInterval::TimeInterval()\n"
    "    pythonapi::TimeInterval::TimeInterval(PyObject const *,PyObject const *,std::string,IlwisTypes)\n"
    "    pythonapi::TimeInterval::TimeInterval(PyObject const *,PyObject const *,std::string)\n"
    "    pythonapi::TimeInterval::TimeInterval(PyObject const *,PyObject const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeInterval_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeInterval_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_begin" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    try {
      result = (PyObject *)((pythonapi::TimeInterval const *)arg1)->begin();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeInterval_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_end" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    try {
      result = (PyObject *)((pythonapi::TimeInterval const *)arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_begin" "', argument " "1"" of type '" "pythonapi::TimeInterval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->begin((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimeInterval_begin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_TimeInterval_begin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeInterval_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TimeInterval::begin() const\n"
    "    pythonapi::TimeInterval::begin(PyObject const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeInterval_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_end" "', argument " "1"" of type '" "pythonapi::TimeInterval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->end((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimeInterval_end__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_TimeInterval_end__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeInterval_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TimeInterval::end() const\n"
    "    pythonapi::TimeInterval::end(PyObject const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeInterval_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeInterval_contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_contains" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeInterval_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeInterval_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeInterval_contains" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::TimeInterval const *)arg1)->contains((std::string const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_contains" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeInterval_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeInterval_contains" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((pythonapi::TimeInterval const *)arg1)->contains((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_contains__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeInterval_contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_contains" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  arg2 = obj1;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeInterval_contains" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((pythonapi::TimeInterval const *)arg1)->contains((PyObject const *)arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_contains__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_contains" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (bool)((pythonapi::TimeInterval const *)arg1)->contains((PyObject const *)arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TimeInterval_contains__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_TimeInterval_contains__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeInterval_contains__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__TimeInterval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeInterval_contains__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeInterval_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::TimeInterval::contains(std::string const &,bool) const\n"
    "    pythonapi::TimeInterval::contains(std::string const &) const\n"
    "    pythonapi::TimeInterval::contains(PyObject const *,bool) const\n"
    "    pythonapi::TimeInterval::contains(PyObject const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeInterval_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeInterval_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_clone" "', argument " "1"" of type '" "pythonapi::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    try {
      result = (pythonapi::TimeInterval *)((pythonapi::TimeInterval const *)arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__TimeInterval, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::TimeInterval *arg1 = (pythonapi::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeInterval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__TimeInterval, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeInterval" "', argument " "1"" of type '" "pythonapi::TimeInterval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::TimeInterval * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeInterval_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__TimeInterval, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DataDefinition")) SWIG_fail;
  {
    try {
      result = (pythonapi::DataDefinition *)new pythonapi::DataDefinition();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataDefinition" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = 0 ;
  pythonapi::Range *arg2 = (pythonapi::Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DataDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DataDefinition" "', argument " "2"" of type '" "pythonapi::Range *""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Range * >(argp2);
  {
    try {
      result = (pythonapi::DataDefinition *)new pythonapi::DataDefinition((pythonapi::Domain const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Domain *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Domain * >(argp1);
  {
    try {
      result = (pythonapi::DataDefinition *)new pythonapi::DataDefinition((pythonapi::Domain const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDefinition" "', argument " "1"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      result = (pythonapi::DataDefinition *)new pythonapi::DataDefinition((pythonapi::DataDefinition const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DataDefinition__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataDefinition__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__DataDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataDefinition__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__Range, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DataDefinition__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DataDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::DataDefinition::DataDefinition()\n"
    "    pythonapi::DataDefinition::DataDefinition(pythonapi::Domain const &,pythonapi::Range *)\n"
    "    pythonapi::DataDefinition::DataDefinition(pythonapi::Domain const &)\n"
    "    pythonapi::DataDefinition::DataDefinition(pythonapi::DataDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataDefinition___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDefinition___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition___str__" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDefinition___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition___bool__" "', argument " "1"" of type '" "pythonapi::DataDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      result = (bool)((pythonapi::DataDefinition const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  pythonapi::Range *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDefinition_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_range" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Range,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDefinition_range" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition_range" "', argument " "2"" of type '" "pythonapi::Range const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Range * >(argp2);
  {
    try {
      (arg1)->range((pythonapi::Range const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_domain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  pythonapi::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDefinition_domain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_domain" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDefinition_domain" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition_domain" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  {
    try {
      (arg1)->domain((pythonapi::Domain const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_isCompatibleWith(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  pythonapi::DataDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDefinition_isCompatibleWith",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_isCompatibleWith" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDefinition_isCompatibleWith" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition_isCompatibleWith" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::DataDefinition * >(argp2);
  {
    try {
      result = (bool)(arg1)->isCompatibleWith((pythonapi::DataDefinition const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = 0 ;
  pythonapi::DataDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDefinition_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_merge" "', argument " "1"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition_merge" "', argument " "1"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDefinition_merge" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition_merge" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::DataDefinition * >(argp2);
  {
    try {
      result = (pythonapi::DataDefinition *)pythonapi::DataDefinition::merge((pythonapi::DataDefinition const &)*arg1,(pythonapi::DataDefinition const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  pythonapi::DataDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDefinition___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition___set__" "', argument " "1"" of type '" "pythonapi::DataDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDefinition___set__" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDefinition___set__" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::DataDefinition * >(argp2);
  {
    try {
      result = (pythonapi::DataDefinition *)(arg1)->__set__((pythonapi::DataDefinition const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Range *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDefinition_range",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_range" "', argument " "1"" of type '" "pythonapi::DataDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      result = (pythonapi::Range *)((pythonapi::DataDefinition const *)arg1)->range();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Range, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_range(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DataDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DataDefinition_range__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DataDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Range, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataDefinition_range__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataDefinition_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::DataDefinition::range(pythonapi::Range const &)\n"
    "    pythonapi::DataDefinition::range() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataDefinition_domain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DataDefinition *arg1 = (pythonapi::DataDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::Domain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDefinition_domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDefinition_domain" "', argument " "1"" of type '" "pythonapi::DataDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DataDefinition * >(argp1);
  {
    try {
      result = (pythonapi::Domain *)((pythonapi::DataDefinition const *)arg1)->domain();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Domain, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDefinition_domain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DataDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DataDefinition_domain__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DataDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Domain, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataDefinition_domain__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataDefinition_domain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::DataDefinition::domain(pythonapi::Domain const &)\n"
    "    pythonapi::DataDefinition::domain() const\n");
  return 0;
}


SWIGINTERN PyObject *DataDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__DataDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ColumnDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColumnDefinition")) SWIG_fail;
  {
    try {
      result = (pythonapi::ColumnDefinition *)new pythonapi::ColumnDefinition();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColumnDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ColumnDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ColumnDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__ColumnDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ColumnDefinition" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (pythonapi::ColumnDefinition *)new pythonapi::ColumnDefinition((pythonapi::ColumnDefinition const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColumnDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  pythonapi::DataDefinition *arg2 = 0 ;
  quint64 arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::ColumnDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ColumnDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__DataDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ColumnDefinition" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "2"" of type '" "pythonapi::DataDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::DataDefinition * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ColumnDefinition" "', argument " "3"" of type '" "quint64""'");
  } 
  arg3 = static_cast< quint64 >(val3);
  {
    try {
      result = (pythonapi::ColumnDefinition *)new pythonapi::ColumnDefinition((std::string const &)*arg1,(pythonapi::DataDefinition const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColumnDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ColumnDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ColumnDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__ColumnDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (pythonapi::ColumnDefinition *)new pythonapi::ColumnDefinition((pythonapi::ColumnDefinition const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColumnDefinition__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  pythonapi::Domain *arg2 = 0 ;
  quint64 arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::ColumnDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ColumnDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__Domain,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ColumnDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColumnDefinition" "', argument " "2"" of type '" "pythonapi::Domain const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::Domain * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ColumnDefinition" "', argument " "3"" of type '" "quint64""'");
  } 
  arg3 = static_cast< quint64 >(val3);
  {
    try {
      result = (pythonapi::ColumnDefinition *)new pythonapi::ColumnDefinition((std::string const &)*arg1,(pythonapi::Domain const &)*arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColumnDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ColumnDefinition__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColumnDefinition__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ColumnDefinition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__DataDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ColumnDefinition__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__Domain, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ColumnDefinition__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ColumnDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColumnDefinition::ColumnDefinition()\n"
    "    pythonapi::ColumnDefinition::ColumnDefinition(pythonapi::ColumnDefinition const &,quint32)\n"
    "    pythonapi::ColumnDefinition::ColumnDefinition(std::string const &,pythonapi::DataDefinition const &,quint64)\n"
    "    pythonapi::ColumnDefinition::ColumnDefinition(pythonapi::ColumnDefinition const &)\n"
    "    pythonapi::ColumnDefinition::ColumnDefinition(std::string const &,pythonapi::Domain const &,quint64)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ColumnDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColumnDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColumnDefinition" "', argument " "1"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_datadef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DataDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColumnDefinition_datadef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition_datadef" "', argument " "1"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (pythonapi::DataDefinition *) &(arg1)->datadef();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DataDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_columnindex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  quint64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColumnDefinition_columnindex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition_columnindex" "', argument " "1"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColumnDefinition_columnindex" "', argument " "2"" of type '" "quint64""'");
  } 
  arg2 = static_cast< quint64 >(val2);
  {
    try {
      (arg1)->columnindex(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_columnindex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColumnDefinition_columnindex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition_columnindex" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (quint64)((pythonapi::ColumnDefinition const *)arg1)->columnindex();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_columnindex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ColumnDefinition_columnindex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ColumnDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ColumnDefinition_columnindex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ColumnDefinition_columnindex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ColumnDefinition::columnindex(quint64)\n"
    "    pythonapi::ColumnDefinition::columnindex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_isChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColumnDefinition_isChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition_isChanged" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (bool)((pythonapi::ColumnDefinition const *)arg1)->isChanged();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColumnDefinition_changed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition_changed" "', argument " "1"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColumnDefinition_changed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->changed(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColumnDefinition___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition___str__" "', argument " "1"" of type '" "pythonapi::ColumnDefinition *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColumnDefinition___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ColumnDefinition *arg1 = (pythonapi::ColumnDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColumnDefinition___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ColumnDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColumnDefinition___bool__" "', argument " "1"" of type '" "pythonapi::ColumnDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ColumnDefinition * >(argp1);
  {
    try {
      result = (bool)((pythonapi::ColumnDefinition const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColumnDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ColumnDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DomainItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DomainItem")) SWIG_fail;
  {
    try {
      result = (pythonapi::DomainItem *)new pythonapi::DomainItem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DomainItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DomainItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::DomainItem *arg1 = (Ilwis::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DomainItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DomainItem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DomainItem" "', argument " "1"" of type '" "Ilwis::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::DomainItem * >(argp1);
  {
    try {
      result = (pythonapi::DomainItem *)new pythonapi::DomainItem(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DomainItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DomainItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DomainItem__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DomainItem__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DomainItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::DomainItem::DomainItem()\n"
    "    pythonapi::DomainItem::DomainItem(Ilwis::DomainItem *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DomainItem___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DomainItem___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem___bool__" "', argument " "1"" of type '" "pythonapi::DomainItem const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      result = (bool)((pythonapi::DomainItem const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DomainItem___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem___str__" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      result = (arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem_ilwisType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IlwisTypes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DomainItem_ilwisType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem_ilwisType" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      result = (IlwisTypes)(arg1)->ilwisType();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::DomainItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DomainItem_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem_clone" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      result = (pythonapi::DomainItem *)(arg1)->clone();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem_raw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DomainItem_raw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem_raw" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DomainItem_raw" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      (arg1)->raw(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem_raw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DomainItem_raw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DomainItem_raw" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      result = (quint32)(arg1)->raw();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DomainItem_raw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DomainItem_raw__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DomainItem_raw__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DomainItem_raw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::DomainItem::raw(quint32)\n"
    "    pythonapi::DomainItem::raw()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DomainItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::DomainItem *arg1 = (pythonapi::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DomainItem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__DomainItem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DomainItem" "', argument " "1"" of type '" "pythonapi::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::DomainItem * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DomainItem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__DomainItem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedIdentifier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexedIdentifier")) SWIG_fail;
  {
    try {
      result = (pythonapi::IndexedIdentifier *)new pythonapi::IndexedIdentifier();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedIdentifier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  quint32 arg2 ;
  qint32 arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  pythonapi::IndexedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedIdentifier",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedIdentifier" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedIdentifier" "', argument " "3"" of type '" "qint32""'");
  } 
  arg3 = static_cast< qint32 >(val3);
  {
    try {
      result = (pythonapi::IndexedIdentifier *)new pythonapi::IndexedIdentifier((std::string const &)*arg1,arg2,arg3);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedIdentifier__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  quint32 arg2 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::IndexedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedIdentifier",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedIdentifier" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (pythonapi::IndexedIdentifier *)new pythonapi::IndexedIdentifier((std::string const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedIdentifier__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::IndexedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedIdentifier",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::IndexedIdentifier *)new pythonapi::IndexedIdentifier((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedIdentifier__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::DomainItem *arg1 = (Ilwis::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::IndexedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedIdentifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedIdentifier" "', argument " "1"" of type '" "Ilwis::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::DomainItem * >(argp1);
  {
    try {
      result = (pythonapi::IndexedIdentifier *)new pythonapi::IndexedIdentifier(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedIdentifier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexedIdentifier__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IndexedIdentifier__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IndexedIdentifier__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedIdentifier__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedIdentifier__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IndexedIdentifier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::IndexedIdentifier::IndexedIdentifier()\n"
    "    pythonapi::IndexedIdentifier::IndexedIdentifier(std::string const &,quint32,qint32)\n"
    "    pythonapi::IndexedIdentifier::IndexedIdentifier(std::string const &,quint32)\n"
    "    pythonapi::IndexedIdentifier::IndexedIdentifier(std::string const &)\n"
    "    pythonapi::IndexedIdentifier::IndexedIdentifier(Ilwis::DomainItem *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IndexedIdentifier_prefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedIdentifier *arg1 = (pythonapi::IndexedIdentifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedIdentifier_prefix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedIdentifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedIdentifier_prefix" "', argument " "1"" of type '" "pythonapi::IndexedIdentifier *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedIdentifier * >(argp1);
  {
    try {
      result = (arg1)->prefix();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedIdentifier_setPrefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedIdentifier *arg1 = (pythonapi::IndexedIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedIdentifier_setPrefix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedIdentifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedIdentifier_setPrefix" "', argument " "1"" of type '" "pythonapi::IndexedIdentifier *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedIdentifier * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedIdentifier_setPrefix" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedIdentifier_setPrefix" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setPrefix((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedIdentifier___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedIdentifier *arg1 = (pythonapi::IndexedIdentifier *) 0 ;
  pythonapi::IndexedIdentifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedIdentifier___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedIdentifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedIdentifier___eq__" "', argument " "1"" of type '" "pythonapi::IndexedIdentifier const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedIdentifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__IndexedIdentifier,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedIdentifier___eq__" "', argument " "2"" of type '" "pythonapi::IndexedIdentifier &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedIdentifier___eq__" "', argument " "2"" of type '" "pythonapi::IndexedIdentifier &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::IndexedIdentifier * >(argp2);
  {
    try {
      result = (bool)((pythonapi::IndexedIdentifier const *)arg1)->operator ==(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedIdentifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::IndexedIdentifier *arg1 = (pythonapi::IndexedIdentifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedIdentifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedIdentifier" "', argument " "1"" of type '" "pythonapi::IndexedIdentifier *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::IndexedIdentifier * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedIdentifier_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__IndexedIdentifier, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NamedIdentifier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NamedIdentifier")) SWIG_fail;
  {
    try {
      result = (pythonapi::NamedIdentifier *)new pythonapi::NamedIdentifier();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NamedIdentifier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  quint32 arg2 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::NamedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NamedIdentifier",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NamedIdentifier" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (pythonapi::NamedIdentifier *)new pythonapi::NamedIdentifier((std::string const &)*arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NamedIdentifier__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::NamedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NamedIdentifier",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedIdentifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::NamedIdentifier *)new pythonapi::NamedIdentifier((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NamedIdentifier__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::DomainItem *arg1 = (Ilwis::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NamedIdentifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NamedIdentifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedIdentifier" "', argument " "1"" of type '" "Ilwis::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::DomainItem * >(argp1);
  {
    try {
      result = (pythonapi::NamedIdentifier *)new pythonapi::NamedIdentifier(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NamedIdentifier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NamedIdentifier__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NamedIdentifier__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NamedIdentifier__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NamedIdentifier__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NamedIdentifier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::NamedIdentifier::NamedIdentifier()\n"
    "    pythonapi::NamedIdentifier::NamedIdentifier(std::string const &,quint32)\n"
    "    pythonapi::NamedIdentifier::NamedIdentifier(std::string const &)\n"
    "    pythonapi::NamedIdentifier::NamedIdentifier(Ilwis::DomainItem *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NamedIdentifier_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedIdentifier *arg1 = (pythonapi::NamedIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NamedIdentifier_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedIdentifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedIdentifier_setName" "', argument " "1"" of type '" "pythonapi::NamedIdentifier *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedIdentifier * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NamedIdentifier_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NamedIdentifier_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NamedIdentifier___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedIdentifier *arg1 = (pythonapi::NamedIdentifier *) 0 ;
  pythonapi::NamedIdentifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NamedIdentifier___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedIdentifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedIdentifier___eq__" "', argument " "1"" of type '" "pythonapi::NamedIdentifier const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedIdentifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__NamedIdentifier,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NamedIdentifier___eq__" "', argument " "2"" of type '" "pythonapi::NamedIdentifier &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NamedIdentifier___eq__" "', argument " "2"" of type '" "pythonapi::NamedIdentifier &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::NamedIdentifier * >(argp2);
  {
    try {
      result = (bool)((pythonapi::NamedIdentifier const *)arg1)->operator ==(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NamedIdentifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::NamedIdentifier *arg1 = (pythonapi::NamedIdentifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NamedIdentifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NamedIdentifier" "', argument " "1"" of type '" "pythonapi::NamedIdentifier *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::NamedIdentifier * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NamedIdentifier_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__NamedIdentifier, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ThematicItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThematicItem")) SWIG_fail;
  {
    try {
      result = (pythonapi::ThematicItem *)new pythonapi::ThematicItem();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThematicItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Ilwis::DomainItem *arg1 = (Ilwis::DomainItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ThematicItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThematicItem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Ilwis__DomainItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThematicItem" "', argument " "1"" of type '" "Ilwis::DomainItem *""'"); 
  }
  arg1 = reinterpret_cast< Ilwis::DomainItem * >(argp1);
  {
    try {
      result = (pythonapi::ThematicItem *)new pythonapi::ThematicItem(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThematicItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  quint32 arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::ThematicItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ThematicItem",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ThematicItem" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (pythonapi::ThematicItem *)new pythonapi::ThematicItem(arg1,arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThematicItem__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::ThematicItem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThematicItem",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (pythonapi::ThematicItem *)new pythonapi::ThematicItem(arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__ThematicItem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThematicItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThematicItem__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ilwis__DomainItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThematicItem__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_ThematicItem__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ThematicItem__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThematicItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ThematicItem::ThematicItem()\n"
    "    pythonapi::ThematicItem::ThematicItem(Ilwis::DomainItem *)\n"
    "    pythonapi::ThematicItem::ThematicItem(PyObject *,quint32)\n"
    "    pythonapi::ThematicItem::ThematicItem(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThematicItem_description__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *arg1 = (pythonapi::ThematicItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThematicItem_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicItem_description" "', argument " "1"" of type '" "pythonapi::ThematicItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicItem * >(argp1);
  {
    try {
      result = (arg1)->description();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicItem_description__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *arg1 = (pythonapi::ThematicItem *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThematicItem_description",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicItem_description" "', argument " "1"" of type '" "pythonapi::ThematicItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicItem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThematicItem_description" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThematicItem_description" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      (arg1)->description(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicItem_description(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ThematicItem_description__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThematicItem_description__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThematicItem_description'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ThematicItem::description()\n"
    "    pythonapi::ThematicItem::description(std::string &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThematicItem_code__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *arg1 = (pythonapi::ThematicItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThematicItem_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicItem_code" "', argument " "1"" of type '" "pythonapi::ThematicItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicItem * >(argp1);
  {
    try {
      result = (arg1)->code();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicItem_code__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *arg1 = (pythonapi::ThematicItem *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThematicItem_code",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThematicItem_code" "', argument " "1"" of type '" "pythonapi::ThematicItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicItem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThematicItem_code" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThematicItem_code" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      (arg1)->code(*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThematicItem_code(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ThematicItem_code__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__ThematicItem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThematicItem_code__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThematicItem_code'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::ThematicItem::code()\n"
    "    pythonapi::ThematicItem::code(std::string &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ThematicItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::ThematicItem *arg1 = (pythonapi::ThematicItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThematicItem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__ThematicItem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThematicItem" "', argument " "1"" of type '" "pythonapi::ThematicItem *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::ThematicItem * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThematicItem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__ThematicItem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Interval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Interval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Interval")) SWIG_fail;
  {
    try {
      result = (pythonapi::Interval *)new pythonapi::Interval();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Interval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Interval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  pythonapi::NumericRange *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::Interval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Interval",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Interval" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Interval" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__NumericRange,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Interval" "', argument " "2"" of type '" "pythonapi::NumericRange &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Interval" "', argument " "2"" of type '" "pythonapi::NumericRange &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::NumericRange * >(argp2);
  {
    try {
      result = (pythonapi::Interval *)new pythonapi::Interval((std::string const &)*arg1,*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__Interval, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Interval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Interval__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pythonapi__NumericRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Interval__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Interval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Interval::Interval()\n"
    "    pythonapi::Interval::Interval(std::string const &,pythonapi::NumericRange &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Interval_isOrdered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Interval *arg1 = (pythonapi::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Interval_isOrdered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Interval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_isOrdered" "', argument " "1"" of type '" "pythonapi::Interval const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Interval * >(argp1);
  {
    try {
      result = (bool)((pythonapi::Interval const *)arg1)->isOrdered();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Interval *arg1 = (pythonapi::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::NumericRange result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Interval_range",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Interval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_range" "', argument " "1"" of type '" "pythonapi::Interval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Interval * >(argp1);
  {
    try {
      result = (arg1)->range();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::NumericRange(static_cast< const pythonapi::NumericRange& >(result))), SWIGTYPE_p_pythonapi__NumericRange, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Interval *arg1 = (pythonapi::Interval *) 0 ;
  pythonapi::NumericRange *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Interval_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Interval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_range" "', argument " "1"" of type '" "pythonapi::Interval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Interval * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__NumericRange,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interval_range" "', argument " "2"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interval_range" "', argument " "2"" of type '" "pythonapi::NumericRange const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::NumericRange * >(argp2);
  {
    try {
      (arg1)->range((pythonapi::NumericRange const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_range(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Interval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Interval_range__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pythonapi__Interval, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pythonapi__NumericRange, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Interval_range__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Interval_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::Interval::range()\n"
    "    pythonapi::Interval::range(pythonapi::NumericRange const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Interval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Interval *arg1 = (pythonapi::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Interval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__Interval, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Interval" "', argument " "1"" of type '" "pythonapi::Interval *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Interval * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Interval_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__Interval, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VertexIterator")) SWIG_fail;
  {
    try {
      result = (pythonapi::VertexIterator *)new pythonapi::VertexIterator();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::Geometry *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pythonapi__Geometry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "pythonapi::Geometry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "pythonapi::Geometry const &""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::Geometry * >(argp1);
  {
    try {
      result = (pythonapi::VertexIterator *)new pythonapi::VertexIterator((pythonapi::Geometry const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (pythonapi::VertexIterator *)new pythonapi::VertexIterator((std::string const &)*arg1);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VertexIterator__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pythonapi__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VertexIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pythonapi::VertexIterator::VertexIterator()\n"
    "    pythonapi::VertexIterator::VertexIterator(pythonapi::Geometry const &)\n"
    "    pythonapi::VertexIterator::VertexIterator(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VertexIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VertexIterator" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      delete arg1;
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___bool__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->__bool__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___str__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = ((pythonapi::VertexIterator const *)arg1)->__str__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___iter__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (pythonapi::VertexIterator *)(arg1)->__iter__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___next__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (arg1)->__next__();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___add__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___add__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->operator +(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___radd__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___radd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->__radd__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___iadd__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___iadd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::VertexIterator *)(arg1)->operator +=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___sub__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___sub__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->operator -(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___rsub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___rsub__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___rsub__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->__rsub__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pythonapi::VertexIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___isub__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___isub__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (pythonapi::VertexIterator *)(arg1)->operator -=(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  quint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___getitem__" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___getitem__" "', argument " "2"" of type '" "quint32""'");
  } 
  arg2 = static_cast< quint32 >(val2);
  {
    try {
      result = (arg1)->__getitem__(arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< pythonapi::Coordinate > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_current" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = ((pythonapi::VertexIterator const *)arg1)->current();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::Coordinate(static_cast< const pythonapi::Coordinate& >(result))), SWIGTYPE_p_pythonapi__Coordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___eq__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator ==((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ne__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator !=((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___lt__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___lt__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___lt__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator <((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___gt__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___gt__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___gt__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator >((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___le__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___le__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___le__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator <=((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  pythonapi::VertexIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ge__" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pythonapi__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___ge__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___ge__" "', argument " "2"" of type '" "pythonapi::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast< pythonapi::VertexIterator * >(argp2);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->operator >=((pythonapi::VertexIterator const &)*arg2);
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_nextSubGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_nextSubGeometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_nextSubGeometry" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->nextSubGeometry();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_isInteriorVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_isInteriorVertex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_isInteriorVertex" "', argument " "1"" of type '" "pythonapi::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (bool)((pythonapi::VertexIterator const *)arg1)->isInteriorVertex();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_begin" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pythonapi::VertexIterator *arg1 = (pythonapi::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pythonapi::VertexIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pythonapi__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_end" "', argument " "1"" of type '" "pythonapi::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast< pythonapi::VertexIterator * >(argp1);
  {
    try {
      result = (arg1)->end();
    }catch (std::exception& e) {
      PyErr_SetString(pythonapi::translate_Exception_type(e),pythonapi::get_err_message(e));
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new pythonapi::VertexIterator(static_cast< const pythonapi::VertexIterator& >(result))), SWIGTYPE_p_pythonapi__VertexIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VertexIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pythonapi__VertexIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"_initIlwisObjects", _wrap__initIlwisObjects, METH_VARARGS, (char *)"_initIlwisObjects(char const * ilwisDir) -> bool"},
	 { (char *)"_exitIlwisObjects", _wrap__exitIlwisObjects, METH_VARARGS, (char *)"_exitIlwisObjects()"},
	 { (char *)"disconnectIssueLogger", _wrap_disconnectIssueLogger, METH_VARARGS, (char *)"disconnectIssueLogger()"},
	 { (char *)"connectIssueLogger", _wrap_connectIssueLogger, METH_VARARGS, (char *)"connectIssueLogger()"},
	 { (char *)"new_it", _wrap_new_it, METH_VARARGS, (char *)"new_it() -> it"},
	 { (char *)"delete_it", _wrap_delete_it, METH_VARARGS, (char *)"delete_it(it self)"},
	 { (char *)"it_swigregister", it_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Object", _wrap_delete_Object, METH_VARARGS, (char *)"delete_Object(Object self)"},
	 { (char *)"Object___bool__", _wrap_Object___bool__, METH_VARARGS, (char *)"Object___bool__(Object self) -> bool"},
	 { (char *)"Object___str__", _wrap_Object___str__, METH_VARARGS, (char *)"Object___str__(Object self) -> std::string"},
	 { (char *)"Object_ilwisType", _wrap_Object_ilwisType, METH_VARARGS, (char *)"Object_ilwisType(Object self) -> IlwisTypes"},
	 { (char *)"Object_swigregister", Object_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Engine", _wrap_new_Engine, METH_VARARGS, (char *)"new_Engine() -> Engine"},
	 { (char *)"Engine__do2", _wrap_Engine__do2, METH_VARARGS, (char *)"\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9, std::string c10, std::string c11) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9, std::string c10) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3, std::string c4) -> qint64\n"
		"_do2(std::string output_name, std::string operation, std::string c3) -> qint64\n"
		"Engine__do2(std::string output_name, std::string operation) -> qint64\n"
		""},
	 { (char *)"Engine__do", _wrap_Engine__do, METH_VARARGS, (char *)"\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9, std::string c10, std::string c11) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9, std::string c10) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8, std::string c9) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7, std::string c8) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6, std::string c7) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5, std::string c6) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4, std::string c5) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3, std::string c4) -> Object\n"
		"_do(std::string output_name, std::string operation, std::string c3) -> Object\n"
		"Engine__do(std::string output_name, std::string operation) -> Object\n"
		""},
	 { (char *)"Engine_setWorkingCatalog", _wrap_Engine_setWorkingCatalog, METH_VARARGS, (char *)"Engine_setWorkingCatalog(std::string const & location)"},
	 { (char *)"Engine_getLocation", _wrap_Engine_getLocation, METH_VARARGS, (char *)"Engine_getLocation() -> std::string"},
	 { (char *)"Engine_operations", _wrap_Engine_operations, METH_VARARGS, (char *)"Engine_operations() -> PyObject *"},
	 { (char *)"Engine_operationMetaData", _wrap_Engine_operationMetaData, METH_VARARGS, (char *)"\n"
		"operationMetaData(std::string const & name, std::string const & element) -> std::string\n"
		"Engine_operationMetaData(std::string const & name) -> std::string\n"
		""},
	 { (char *)"Engine__catalogItems", _wrap_Engine__catalogItems, METH_VARARGS, (char *)"Engine__catalogItems() -> PyObject *"},
	 { (char *)"delete_Engine", _wrap_delete_Engine, METH_VARARGS, (char *)"delete_Engine(Engine self)"},
	 { (char *)"Engine_swigregister", Engine_swigregister, METH_VARARGS, NULL},
	 { (char *)"Collection___bool__", _wrap_Collection___bool__, METH_VARARGS, (char *)"Collection___bool__(Collection self) -> bool"},
	 { (char *)"Collection___str__", _wrap_Collection___str__, METH_VARARGS, (char *)"Collection___str__(Collection self) -> std::string"},
	 { (char *)"Collection_ilwisType", _wrap_Collection_ilwisType, METH_VARARGS, (char *)"Collection_ilwisType(Collection self) -> IlwisTypes"},
	 { (char *)"Collection___len__", _wrap_Collection___len__, METH_VARARGS, (char *)"Collection___len__(Collection self) -> int"},
	 { (char *)"Collection__getitem", _wrap_Collection__getitem, METH_VARARGS, (char *)"Collection__getitem(Collection self, quint32 colIndex) -> Object"},
	 { (char *)"Collection_toCollection", _wrap_Collection_toCollection, METH_VARARGS, (char *)"Collection_toCollection(Object obj) -> Collection"},
	 { (char *)"delete_Collection", _wrap_delete_Collection, METH_VARARGS, (char *)"delete_Collection(Collection self)"},
	 { (char *)"Collection_swigregister", Collection_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IlwisObject", _wrap_delete_IlwisObject, METH_VARARGS, (char *)"delete_IlwisObject(IlwisObject self)"},
	 { (char *)"IlwisObject_open", _wrap_IlwisObject_open, METH_VARARGS, (char *)"\n"
		"open(std::string const & url, std::string const & format, std::string const & fnamespace, IOOptions options)\n"
		"open(std::string const & url, std::string const & format, std::string const & fnamespace)\n"
		"open(std::string const & url, std::string const & format)\n"
		"IlwisObject_open(IlwisObject self, std::string const & url)\n"
		""},
	 { (char *)"IlwisObject_store", _wrap_IlwisObject_store, METH_VARARGS, (char *)"\n"
		"store(std::string const & url, std::string const & format, std::string const & fnamespace, IOOptions options)\n"
		"store(std::string const & url, std::string const & format, std::string const & fnamespace)\n"
		"store(std::string const & url, std::string const & format)\n"
		"IlwisObject_store(IlwisObject self, std::string const & url)\n"
		""},
	 { (char *)"IlwisObject___bool__", _wrap_IlwisObject___bool__, METH_VARARGS, (char *)"IlwisObject___bool__(IlwisObject self) -> bool"},
	 { (char *)"IlwisObject___str__", _wrap_IlwisObject___str__, METH_VARARGS, (char *)"IlwisObject___str__(IlwisObject self) -> std::string"},
	 { (char *)"IlwisObject___add__", _wrap_IlwisObject___add__, METH_VARARGS, (char *)"IlwisObject___add__(IlwisObject self, std::string value) -> std::string"},
	 { (char *)"IlwisObject___radd__", _wrap_IlwisObject___radd__, METH_VARARGS, (char *)"IlwisObject___radd__(IlwisObject self, std::string value) -> std::string"},
	 { (char *)"IlwisObject_name", _wrap_IlwisObject_name, METH_VARARGS, (char *)"\n"
		"name() -> std::string\n"
		"IlwisObject_name(IlwisObject self, std::string name)\n"
		""},
	 { (char *)"IlwisObject_isInternal", _wrap_IlwisObject_isInternal, METH_VARARGS, (char *)"IlwisObject_isInternal(IlwisObject self) -> bool"},
	 { (char *)"IlwisObject_type", _wrap_IlwisObject_type, METH_VARARGS, (char *)"IlwisObject_type(IlwisObject self) -> std::string"},
	 { (char *)"IlwisObject_type2Name", _wrap_IlwisObject_type2Name, METH_VARARGS, (char *)"IlwisObject_type2Name(IlwisObject self, IlwisTypes ilwType) -> std::string"},
	 { (char *)"IlwisObject_ilwisID", _wrap_IlwisObject_ilwisID, METH_VARARGS, (char *)"IlwisObject_ilwisID(IlwisObject self) -> quint64"},
	 { (char *)"IlwisObject_ilwisType", _wrap_IlwisObject_ilwisType, METH_VARARGS, (char *)"IlwisObject_ilwisType(IlwisObject self) -> IlwisTypes"},
	 { (char *)"IlwisObject_swigregister", IlwisObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CoordinateSystem", _wrap_new_CoordinateSystem, METH_VARARGS, (char *)"new_CoordinateSystem(std::string const & resource) -> CoordinateSystem"},
	 { (char *)"CoordinateSystem_envelope", _wrap_CoordinateSystem_envelope, METH_VARARGS, (char *)"CoordinateSystem_envelope(CoordinateSystem self) -> Envelope"},
	 { (char *)"CoordinateSystem_setEnvelope", _wrap_CoordinateSystem_setEnvelope, METH_VARARGS, (char *)"CoordinateSystem_setEnvelope(CoordinateSystem self, Envelope env)"},
	 { (char *)"CoordinateSystem___eq__", _wrap_CoordinateSystem___eq__, METH_VARARGS, (char *)"CoordinateSystem___eq__(CoordinateSystem self, CoordinateSystem csy) -> bool"},
	 { (char *)"CoordinateSystem___ne__", _wrap_CoordinateSystem___ne__, METH_VARARGS, (char *)"CoordinateSystem___ne__(CoordinateSystem self, CoordinateSystem csy) -> bool"},
	 { (char *)"CoordinateSystem_toWKT", _wrap_CoordinateSystem_toWKT, METH_VARARGS, (char *)"CoordinateSystem_toWKT(CoordinateSystem self) -> std::string"},
	 { (char *)"CoordinateSystem_toProj4", _wrap_CoordinateSystem_toProj4, METH_VARARGS, (char *)"CoordinateSystem_toProj4(CoordinateSystem self) -> std::string"},
	 { (char *)"CoordinateSystem_convertEnvelope", _wrap_CoordinateSystem_convertEnvelope, METH_VARARGS, (char *)"CoordinateSystem_convertEnvelope(CoordinateSystem self, CoordinateSystem pyCsy, Envelope pyEnv) -> Envelope"},
	 { (char *)"CoordinateSystem_coord2coord", _wrap_CoordinateSystem_coord2coord, METH_VARARGS, (char *)"CoordinateSystem_coord2coord(CoordinateSystem self, CoordinateSystem pyCsy, Coordinate pyCoord) -> Coordinate"},
	 { (char *)"CoordinateSystem_toCoordinateSystem", _wrap_CoordinateSystem_toCoordinateSystem, METH_VARARGS, (char *)"CoordinateSystem_toCoordinateSystem(Object obj) -> CoordinateSystem"},
	 { (char *)"delete_CoordinateSystem", _wrap_delete_CoordinateSystem, METH_VARARGS, (char *)"delete_CoordinateSystem(CoordinateSystem self)"},
	 { (char *)"CoordinateSystem_swigregister", CoordinateSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Coordinate", _wrap_new_Coordinate, METH_VARARGS, (char *)"\n"
		"Coordinate(double x, double y)\n"
		"Coordinate(double x, double y, double z)\n"
		"new_Coordinate(Coordinate crd) -> Coordinate\n"
		""},
	 { (char *)"Coordinate_x", _wrap_Coordinate_x, METH_VARARGS, (char *)"Coordinate_x(Coordinate self) -> double"},
	 { (char *)"Coordinate_y", _wrap_Coordinate_y, METH_VARARGS, (char *)"Coordinate_y(Coordinate self) -> double"},
	 { (char *)"Coordinate_z", _wrap_Coordinate_z, METH_VARARGS, (char *)"Coordinate_z(Coordinate self) -> double"},
	 { (char *)"Coordinate_setX", _wrap_Coordinate_setX, METH_VARARGS, (char *)"Coordinate_setX(Coordinate self, double v)"},
	 { (char *)"Coordinate_setY", _wrap_Coordinate_setY, METH_VARARGS, (char *)"Coordinate_setY(Coordinate self, double v)"},
	 { (char *)"Coordinate_setZ", _wrap_Coordinate_setZ, METH_VARARGS, (char *)"Coordinate_setZ(Coordinate self, double v)"},
	 { (char *)"Coordinate_is3D", _wrap_Coordinate_is3D, METH_VARARGS, (char *)"Coordinate_is3D(Coordinate self) -> bool"},
	 { (char *)"Coordinate___imul__", _wrap_Coordinate___imul__, METH_VARARGS, (char *)"Coordinate___imul__(Coordinate self, double n) -> Coordinate"},
	 { (char *)"Coordinate___itruediv__", _wrap_Coordinate___itruediv__, METH_VARARGS, (char *)"Coordinate___itruediv__(Coordinate self, double n) -> Coordinate"},
	 { (char *)"Coordinate___eq__", _wrap_Coordinate___eq__, METH_VARARGS, (char *)"Coordinate___eq__(Coordinate self, Coordinate other) -> bool"},
	 { (char *)"Coordinate___ne__", _wrap_Coordinate___ne__, METH_VARARGS, (char *)"Coordinate___ne__(Coordinate self, Coordinate other) -> bool"},
	 { (char *)"Coordinate___str__", _wrap_Coordinate___str__, METH_VARARGS, (char *)"Coordinate___str__(Coordinate self) -> std::string"},
	 { (char *)"Coordinate___bool__", _wrap_Coordinate___bool__, METH_VARARGS, (char *)"Coordinate___bool__(Coordinate self) -> bool"},
	 { (char *)"delete_Coordinate", _wrap_delete_Coordinate, METH_VARARGS, (char *)"delete_Coordinate(Coordinate self)"},
	 { (char *)"Coordinate_swigregister", Coordinate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PropertySets", _wrap_new_PropertySets, METH_VARARGS, (char *)"new_PropertySets() -> PropertySets"},
	 { (char *)"delete_PropertySets", _wrap_delete_PropertySets, METH_VARARGS, (char *)"delete_PropertySets(PropertySets self)"},
	 { (char *)"PropertySets_swigregister", PropertySets_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IOOptions", _wrap_new_IOOptions, METH_VARARGS, (char *)"\n"
		"IOOptions()\n"
		"new_IOOptions(std::string const & key, PyObject * value) -> IOOptions\n"
		""},
	 { (char *)"IOOptions_contains", _wrap_IOOptions_contains, METH_VARARGS, (char *)"IOOptions_contains(IOOptions self, std::string const & option) -> bool"},
	 { (char *)"IOOptions_size", _wrap_IOOptions_size, METH_VARARGS, (char *)"IOOptions_size(IOOptions self) -> quint32"},
	 { (char *)"IOOptions___getitem__", _wrap_IOOptions___getitem__, METH_VARARGS, (char *)"IOOptions___getitem__(IOOptions self, std::string const & option) -> PyObject *"},
	 { (char *)"IOOptions_addOption", _wrap_IOOptions_addOption, METH_VARARGS, (char *)"IOOptions_addOption(IOOptions self, std::string const & key, PyObject * value) -> IOOptions"},
	 { (char *)"delete_IOOptions", _wrap_delete_IOOptions, METH_VARARGS, (char *)"delete_IOOptions(IOOptions self)"},
	 { (char *)"IOOptions_swigregister", IOOptions_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColorModel", _wrap_new_ColorModel, METH_VARARGS, (char *)"new_ColorModel() -> ColorModel"},
	 { (char *)"delete_ColorModel", _wrap_delete_ColorModel, METH_VARARGS, (char *)"delete_ColorModel(ColorModel self)"},
	 { (char *)"ColorModel_swigregister", ColorModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Color", _wrap_new_Color, METH_VARARGS, (char *)"\n"
		"Color()\n"
		"Color(pythonapi::ColorModel type, PyObject * obj, std::string const & name)\n"
		"Color(pythonapi::ColorModel type, PyObject * obj)\n"
		"Color(std::string const & typeStr, PyObject * obj, std::string const & name)\n"
		"new_Color(std::string const & typeStr, PyObject * obj) -> Color\n"
		""},
	 { (char *)"Color_getItem", _wrap_Color_getItem, METH_VARARGS, (char *)"Color_getItem(Color self, std::string key) -> double"},
	 { (char *)"Color_setName", _wrap_Color_setName, METH_VARARGS, (char *)"Color_setName(Color self, std::string const & name)"},
	 { (char *)"Color_getName", _wrap_Color_getName, METH_VARARGS, (char *)"Color_getName(Color self) -> std::string"},
	 { (char *)"Color_getColorModel", _wrap_Color_getColorModel, METH_VARARGS, (char *)"Color_getColorModel(Color self) -> pythonapi::ColorModel"},
	 { (char *)"Color_toString", _wrap_Color_toString, METH_VARARGS, (char *)"Color_toString(Color self) -> std::string"},
	 { (char *)"Color___str__", _wrap_Color___str__, METH_VARARGS, (char *)"Color___str__(Color self) -> std::string"},
	 { (char *)"delete_Color", _wrap_delete_Color, METH_VARARGS, (char *)"delete_Color(Color self)"},
	 { (char *)"Color_swigregister", Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Pixel", _wrap_new_Pixel, METH_VARARGS, (char *)"\n"
		"Pixel(Pixel pixel)\n"
		"Pixel(PixelD pixel)\n"
		"Pixel(int x, int y)\n"
		"new_Pixel(int x, int y, int z) -> Pixel\n"
		""},
	 { (char *)"Pixel_x", _wrap_Pixel_x, METH_VARARGS, (char *)"Pixel_x(Pixel self) -> int"},
	 { (char *)"Pixel_y", _wrap_Pixel_y, METH_VARARGS, (char *)"Pixel_y(Pixel self) -> int"},
	 { (char *)"Pixel_z", _wrap_Pixel_z, METH_VARARGS, (char *)"Pixel_z(Pixel self) -> int"},
	 { (char *)"Pixel_setX", _wrap_Pixel_setX, METH_VARARGS, (char *)"Pixel_setX(Pixel self, int v)"},
	 { (char *)"Pixel_setY", _wrap_Pixel_setY, METH_VARARGS, (char *)"Pixel_setY(Pixel self, int v)"},
	 { (char *)"Pixel_setZ", _wrap_Pixel_setZ, METH_VARARGS, (char *)"Pixel_setZ(Pixel self, int v)"},
	 { (char *)"Pixel_is3D", _wrap_Pixel_is3D, METH_VARARGS, (char *)"Pixel_is3D(Pixel self) -> bool"},
	 { (char *)"Pixel___imul__", _wrap_Pixel___imul__, METH_VARARGS, (char *)"Pixel___imul__(Pixel self, int n) -> Pixel"},
	 { (char *)"Pixel___itruediv__", _wrap_Pixel___itruediv__, METH_VARARGS, (char *)"Pixel___itruediv__(Pixel self, int n) -> Pixel"},
	 { (char *)"Pixel___eq__", _wrap_Pixel___eq__, METH_VARARGS, (char *)"Pixel___eq__(Pixel self, Pixel other) -> bool"},
	 { (char *)"Pixel___ne__", _wrap_Pixel___ne__, METH_VARARGS, (char *)"Pixel___ne__(Pixel self, Pixel other) -> bool"},
	 { (char *)"Pixel___str__", _wrap_Pixel___str__, METH_VARARGS, (char *)"Pixel___str__(Pixel self) -> std::string"},
	 { (char *)"Pixel___bool__", _wrap_Pixel___bool__, METH_VARARGS, (char *)"Pixel___bool__(Pixel self) -> bool"},
	 { (char *)"delete_Pixel", _wrap_delete_Pixel, METH_VARARGS, (char *)"delete_Pixel(Pixel self)"},
	 { (char *)"Pixel_swigregister", Pixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PixelD", _wrap_new_PixelD, METH_VARARGS, (char *)"\n"
		"PixelD(Pixel pixel)\n"
		"PixelD(PixelD pixel)\n"
		"PixelD(double x, double y)\n"
		"new_PixelD(double x, double y, double z) -> PixelD\n"
		""},
	 { (char *)"PixelD_x", _wrap_PixelD_x, METH_VARARGS, (char *)"PixelD_x(PixelD self) -> double"},
	 { (char *)"PixelD_y", _wrap_PixelD_y, METH_VARARGS, (char *)"PixelD_y(PixelD self) -> double"},
	 { (char *)"PixelD_z", _wrap_PixelD_z, METH_VARARGS, (char *)"PixelD_z(PixelD self) -> double"},
	 { (char *)"PixelD_setX", _wrap_PixelD_setX, METH_VARARGS, (char *)"PixelD_setX(PixelD self, double v)"},
	 { (char *)"PixelD_setY", _wrap_PixelD_setY, METH_VARARGS, (char *)"PixelD_setY(PixelD self, double v)"},
	 { (char *)"PixelD_setZ", _wrap_PixelD_setZ, METH_VARARGS, (char *)"PixelD_setZ(PixelD self, double v)"},
	 { (char *)"PixelD_is3D", _wrap_PixelD_is3D, METH_VARARGS, (char *)"PixelD_is3D(PixelD self) -> bool"},
	 { (char *)"PixelD___imul__", _wrap_PixelD___imul__, METH_VARARGS, (char *)"PixelD___imul__(PixelD self, double n) -> PixelD"},
	 { (char *)"PixelD___itruediv__", _wrap_PixelD___itruediv__, METH_VARARGS, (char *)"PixelD___itruediv__(PixelD self, double n) -> PixelD"},
	 { (char *)"PixelD___eq__", _wrap_PixelD___eq__, METH_VARARGS, (char *)"PixelD___eq__(PixelD self, PixelD other) -> bool"},
	 { (char *)"PixelD___ne__", _wrap_PixelD___ne__, METH_VARARGS, (char *)"PixelD___ne__(PixelD self, PixelD other) -> bool"},
	 { (char *)"PixelD___str__", _wrap_PixelD___str__, METH_VARARGS, (char *)"PixelD___str__(PixelD self) -> std::string"},
	 { (char *)"PixelD___bool__", _wrap_PixelD___bool__, METH_VARARGS, (char *)"PixelD___bool__(PixelD self) -> bool"},
	 { (char *)"delete_PixelD", _wrap_delete_PixelD, METH_VARARGS, (char *)"delete_PixelD(PixelD self)"},
	 { (char *)"PixelD_swigregister", PixelD_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Size", _wrap_new_Size, METH_VARARGS, (char *)"\n"
		"Size(unsigned int xSizeT, unsigned int ySizeT, unsigned int zSizeT=1)\n"
		"Size(unsigned int xSizeT, unsigned int ySizeT)\n"
		"Size(Size size)\n"
		"new_Size(SizeD size) -> Size\n"
		""},
	 { (char *)"Size_xsize", _wrap_Size_xsize, METH_VARARGS, (char *)"Size_xsize(Size self) -> unsigned int"},
	 { (char *)"Size_ysize", _wrap_Size_ysize, METH_VARARGS, (char *)"Size_ysize(Size self) -> unsigned int"},
	 { (char *)"Size_zsize", _wrap_Size_zsize, METH_VARARGS, (char *)"Size_zsize(Size self) -> unsigned int"},
	 { (char *)"Size_setXsize", _wrap_Size_setXsize, METH_VARARGS, (char *)"Size_setXsize(Size self, unsigned int x)"},
	 { (char *)"Size_setYsize", _wrap_Size_setYsize, METH_VARARGS, (char *)"Size_setYsize(Size self, unsigned int y)"},
	 { (char *)"Size_setZsize", _wrap_Size_setZsize, METH_VARARGS, (char *)"Size_setZsize(Size self, unsigned int z)"},
	 { (char *)"Size_linearSize", _wrap_Size_linearSize, METH_VARARGS, (char *)"Size_linearSize(Size self) -> quint64"},
	 { (char *)"Size___iadd__", _wrap_Size___iadd__, METH_VARARGS, (char *)"Size___iadd__(Size self, Size sz) -> Size"},
	 { (char *)"Size___isub__", _wrap_Size___isub__, METH_VARARGS, (char *)"Size___isub__(Size self, Size sz) -> Size"},
	 { (char *)"Size___imul__", _wrap_Size___imul__, METH_VARARGS, (char *)"Size___imul__(Size self, double f) -> Size"},
	 { (char *)"Size___eq__", _wrap_Size___eq__, METH_VARARGS, (char *)"Size___eq__(Size self, Size sz) -> bool"},
	 { (char *)"Size___ne__", _wrap_Size___ne__, METH_VARARGS, (char *)"Size___ne__(Size self, Size sz) -> bool"},
	 { (char *)"Size___contains__", _wrap_Size___contains__, METH_VARARGS, (char *)"\n"
		"__contains__(Coordinate pix) -> bool\n"
		"__contains__(Pixel pix) -> bool\n"
		"Size___contains__(Size self, PixelD pix) -> bool\n"
		""},
	 { (char *)"Size___str__", _wrap_Size___str__, METH_VARARGS, (char *)"Size___str__(Size self) -> std::string"},
	 { (char *)"Size___bool__", _wrap_Size___bool__, METH_VARARGS, (char *)"Size___bool__(Size self) -> bool"},
	 { (char *)"delete_Size", _wrap_delete_Size, METH_VARARGS, (char *)"delete_Size(Size self)"},
	 { (char *)"Size_swigregister", Size_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SizeD", _wrap_new_SizeD, METH_VARARGS, (char *)"\n"
		"SizeD(double xSizeT, double ySizeT, double zSizeT=1)\n"
		"SizeD(double xSizeT, double ySizeT)\n"
		"SizeD(Size size)\n"
		"new_SizeD(SizeD size) -> SizeD\n"
		""},
	 { (char *)"SizeD_xsize", _wrap_SizeD_xsize, METH_VARARGS, (char *)"SizeD_xsize(SizeD self) -> double"},
	 { (char *)"SizeD_ysize", _wrap_SizeD_ysize, METH_VARARGS, (char *)"SizeD_ysize(SizeD self) -> double"},
	 { (char *)"SizeD_zsize", _wrap_SizeD_zsize, METH_VARARGS, (char *)"SizeD_zsize(SizeD self) -> double"},
	 { (char *)"SizeD_setXsize", _wrap_SizeD_setXsize, METH_VARARGS, (char *)"SizeD_setXsize(SizeD self, double x)"},
	 { (char *)"SizeD_setYsize", _wrap_SizeD_setYsize, METH_VARARGS, (char *)"SizeD_setYsize(SizeD self, double y)"},
	 { (char *)"SizeD_setZsize", _wrap_SizeD_setZsize, METH_VARARGS, (char *)"SizeD_setZsize(SizeD self, double z)"},
	 { (char *)"SizeD_linearSize", _wrap_SizeD_linearSize, METH_VARARGS, (char *)"SizeD_linearSize(SizeD self) -> quint64"},
	 { (char *)"SizeD___iadd__", _wrap_SizeD___iadd__, METH_VARARGS, (char *)"SizeD___iadd__(SizeD self, SizeD sz) -> SizeD"},
	 { (char *)"SizeD___isub__", _wrap_SizeD___isub__, METH_VARARGS, (char *)"SizeD___isub__(SizeD self, SizeD sz) -> SizeD"},
	 { (char *)"SizeD___imul__", _wrap_SizeD___imul__, METH_VARARGS, (char *)"SizeD___imul__(SizeD self, double f) -> SizeD"},
	 { (char *)"SizeD___eq__", _wrap_SizeD___eq__, METH_VARARGS, (char *)"SizeD___eq__(SizeD self, SizeD sz) -> bool"},
	 { (char *)"SizeD___ne__", _wrap_SizeD___ne__, METH_VARARGS, (char *)"SizeD___ne__(SizeD self, SizeD sz) -> bool"},
	 { (char *)"SizeD___contains__", _wrap_SizeD___contains__, METH_VARARGS, (char *)"\n"
		"__contains__(Coordinate pix) -> bool\n"
		"__contains__(Pixel pix) -> bool\n"
		"SizeD___contains__(SizeD self, PixelD pix) -> bool\n"
		""},
	 { (char *)"SizeD___str__", _wrap_SizeD___str__, METH_VARARGS, (char *)"SizeD___str__(SizeD self) -> std::string"},
	 { (char *)"SizeD___bool__", _wrap_SizeD___bool__, METH_VARARGS, (char *)"SizeD___bool__(SizeD self) -> bool"},
	 { (char *)"delete_SizeD", _wrap_delete_SizeD, METH_VARARGS, (char *)"delete_SizeD(SizeD self)"},
	 { (char *)"SizeD_swigregister", SizeD_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Box", _wrap_new_Box, METH_VARARGS, (char *)"\n"
		"Box()\n"
		"Box(std::string const & envelope)\n"
		"Box(Pixel min, Pixel max)\n"
		"new_Box(Size size) -> Box\n"
		""},
	 { (char *)"Box_minCorner", _wrap_Box_minCorner, METH_VARARGS, (char *)"Box_minCorner(Box self) -> Pixel"},
	 { (char *)"Box_maxCorner", _wrap_Box_maxCorner, METH_VARARGS, (char *)"Box_maxCorner(Box self) -> Pixel"},
	 { (char *)"Box_size", _wrap_Box_size, METH_VARARGS, (char *)"Box_size(Box self) -> Size"},
	 { (char *)"Box_is3D", _wrap_Box_is3D, METH_VARARGS, (char *)"Box_is3D(Box self) -> bool"},
	 { (char *)"Box___contains__", _wrap_Box___contains__, METH_VARARGS, (char *)"\n"
		"__contains__(Pixel point) -> bool\n"
		"Box___contains__(Box self, Box box) -> bool\n"
		""},
	 { (char *)"Box___eq__", _wrap_Box___eq__, METH_VARARGS, (char *)"Box___eq__(Box self, Box other) -> bool"},
	 { (char *)"Box___ne__", _wrap_Box___ne__, METH_VARARGS, (char *)"Box___ne__(Box self, Box other) -> bool"},
	 { (char *)"Box___str__", _wrap_Box___str__, METH_VARARGS, (char *)"Box___str__(Box self) -> std::string"},
	 { (char *)"Box___bool__", _wrap_Box___bool__, METH_VARARGS, (char *)"Box___bool__(Box self) -> bool"},
	 { (char *)"delete_Box", _wrap_delete_Box, METH_VARARGS, (char *)"delete_Box(Box self)"},
	 { (char *)"Box_swigregister", Box_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Envelope", _wrap_new_Envelope, METH_VARARGS, (char *)"\n"
		"Envelope()\n"
		"Envelope(std::string const & envelope)\n"
		"Envelope(Coordinate min, Coordinate max)\n"
		"new_Envelope(SizeD size) -> Envelope\n"
		""},
	 { (char *)"Envelope_minCorner", _wrap_Envelope_minCorner, METH_VARARGS, (char *)"Envelope_minCorner(Envelope self) -> Coordinate"},
	 { (char *)"Envelope_maxCorner", _wrap_Envelope_maxCorner, METH_VARARGS, (char *)"Envelope_maxCorner(Envelope self) -> Coordinate"},
	 { (char *)"Envelope_size", _wrap_Envelope_size, METH_VARARGS, (char *)"Envelope_size(Envelope self) -> SizeD"},
	 { (char *)"Envelope_is3D", _wrap_Envelope_is3D, METH_VARARGS, (char *)"Envelope_is3D(Envelope self) -> bool"},
	 { (char *)"Envelope___contains__", _wrap_Envelope___contains__, METH_VARARGS, (char *)"\n"
		"__contains__(Coordinate point) -> bool\n"
		"Envelope___contains__(Envelope self, Envelope box) -> bool\n"
		""},
	 { (char *)"Envelope___eq__", _wrap_Envelope___eq__, METH_VARARGS, (char *)"Envelope___eq__(Envelope self, Envelope other) -> bool"},
	 { (char *)"Envelope___ne__", _wrap_Envelope___ne__, METH_VARARGS, (char *)"Envelope___ne__(Envelope self, Envelope other) -> bool"},
	 { (char *)"Envelope___str__", _wrap_Envelope___str__, METH_VARARGS, (char *)"Envelope___str__(Envelope self) -> std::string"},
	 { (char *)"Envelope___bool__", _wrap_Envelope___bool__, METH_VARARGS, (char *)"Envelope___bool__(Envelope self) -> bool"},
	 { (char *)"delete_Envelope", _wrap_delete_Envelope, METH_VARARGS, (char *)"delete_Envelope(Envelope self)"},
	 { (char *)"Envelope_swigregister", Envelope_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NumericStatistics", _wrap_new_NumericStatistics, METH_VARARGS, (char *)"\n"
		"NumericStatistics()\n"
		"new_NumericStatistics(Ilwis::ContainerStatistics< double > const & conStat) -> NumericStatistics\n"
		""},
	 { (char *)"NumericStatistics_significantDigits", _wrap_NumericStatistics_significantDigits, METH_VARARGS, (char *)"NumericStatistics_significantDigits(NumericStatistics self) -> quint16"},
	 { (char *)"NumericStatistics_findSignificantDigits", _wrap_NumericStatistics_findSignificantDigits, METH_VARARGS, (char *)"NumericStatistics_findSignificantDigits(NumericStatistics self, double distance)"},
	 { (char *)"NumericStatistics_binCount", _wrap_NumericStatistics_binCount, METH_VARARGS, (char *)"NumericStatistics_binCount(NumericStatistics self, quint32 value)"},
	 { (char *)"NumericStatistics___bool__", _wrap_NumericStatistics___bool__, METH_VARARGS, (char *)"NumericStatistics___bool__(NumericStatistics self) -> bool"},
	 { (char *)"NumericStatistics_stretchLinear", _wrap_NumericStatistics_stretchLinear, METH_VARARGS, (char *)"NumericStatistics_stretchLinear(NumericStatistics self, double input, int stretchRange) -> double"},
	 { (char *)"NumericStatistics_stretchLimits", _wrap_NumericStatistics_stretchLimits, METH_VARARGS, (char *)"NumericStatistics_stretchLimits(NumericStatistics self, double percent) -> PyObject *"},
	 { (char *)"NumericStatistics___getitem__", _wrap_NumericStatistics___getitem__, METH_VARARGS, (char *)"NumericStatistics___getitem__(NumericStatistics self, pythonapi::PropertySets pyMethod) -> double"},
	 { (char *)"NumericStatistics_prop", _wrap_NumericStatistics_prop, METH_VARARGS, (char *)"NumericStatistics_prop(NumericStatistics self, pythonapi::PropertySets pyMethod) -> double"},
	 { (char *)"NumericStatistics_histogram", _wrap_NumericStatistics_histogram, METH_VARARGS, (char *)"NumericStatistics_histogram(NumericStatistics self) -> PyObject *"},
	 { (char *)"delete_NumericStatistics", _wrap_delete_NumericStatistics, METH_VARARGS, (char *)"delete_NumericStatistics(NumericStatistics self)"},
	 { (char *)"NumericStatistics_swigregister", NumericStatistics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Table", _wrap_new_Table, METH_VARARGS, (char *)"\n"
		"Table()\n"
		"Table(std::string resource, IOOptions opt)\n"
		"new_Table(std::string resource) -> Table\n"
		""},
	 { (char *)"Table_columnCount", _wrap_Table_columnCount, METH_VARARGS, (char *)"Table_columnCount(Table self) -> quint32"},
	 { (char *)"Table_columns", _wrap_Table_columns, METH_VARARGS, (char *)"Table_columns(Table self) -> PyObject *"},
	 { (char *)"Table_addColumn", _wrap_Table_addColumn, METH_VARARGS, (char *)"\n"
		"addColumn(std::string const & name, std::string const & domain)\n"
		"Table_addColumn(Table self, ColumnDefinition coldef)\n"
		""},
	 { (char *)"Table_columnIndex", _wrap_Table_columnIndex, METH_VARARGS, (char *)"Table_columnIndex(Table self, std::string const & name) -> qint32"},
	 { (char *)"Table_column", _wrap_Table_column, METH_VARARGS, (char *)"\n"
		"column(std::string const & name) -> PyObject\n"
		"Table_column(Table self, quint32 columnIndex) -> PyObject *\n"
		""},
	 { (char *)"Table_recordCount", _wrap_Table_recordCount, METH_VARARGS, (char *)"Table_recordCount(Table self) -> quint32"},
	 { (char *)"Table_select", _wrap_Table_select, METH_VARARGS, (char *)"Table_select(Table self, std::string const & conditions) -> PyObject *"},
	 { (char *)"Table_record", _wrap_Table_record, METH_VARARGS, (char *)"Table_record(Table self, quint32 rec) -> PyObject *"},
	 { (char *)"Table_cell", _wrap_Table_cell, METH_VARARGS, (char *)"\n"
		"cell(std::string const & name, quint32 rec) -> PyObject\n"
		"Table_cell(Table self, quint32 colIndex, quint32 rec) -> PyObject *\n"
		""},
	 { (char *)"Table_setCell", _wrap_Table_setCell, METH_VARARGS, (char *)"\n"
		"setCell(std::string const & name, quint32 rec, PyObject const * value)\n"
		"setCell(quint32 colIndex, quint32 rec, PyObject const * value)\n"
		"setCell(std::string const & name, quint32 rec, qint64 value)\n"
		"setCell(quint32 colIndex, quint32 rec, qint64 value)\n"
		"setCell(std::string const & name, quint32 rec, std::string value)\n"
		"setCell(quint32 colIndex, quint32 rec, std::string value)\n"
		"setCell(std::string const & name, quint32 rec, double value)\n"
		"Table_setCell(Table self, quint32 colIndex, quint32 rec, double value)\n"
		""},
	 { (char *)"Table_toTable", _wrap_Table_toTable, METH_VARARGS, (char *)"Table_toTable(Object obj) -> Table"},
	 { (char *)"Table_columnDefinition", _wrap_Table_columnDefinition, METH_VARARGS, (char *)"\n"
		"columnDefinition(std::string const & name) -> ColumnDefinition\n"
		"Table_columnDefinition(Table self, quint32 index) -> ColumnDefinition\n"
		""},
	 { (char *)"Table_setColumnDefinition", _wrap_Table_setColumnDefinition, METH_VARARGS, (char *)"\n"
		"setColumnDefinition(ColumnDefinition coldef)\n"
		"setColumnDefinition(std::string const & name, ColumnDefinition coldef)\n"
		"Table_setColumnDefinition(Table self, quint32 index, ColumnDefinition coldef)\n"
		""},
	 { (char *)"delete_Table", _wrap_delete_Table, METH_VARARGS, (char *)"delete_Table(Table self)"},
	 { (char *)"Table_swigregister", Table_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Coverage", _wrap_delete_Coverage, METH_VARARGS, (char *)"delete_Coverage(Coverage self)"},
	 { (char *)"Coverage_coordinateSystem", _wrap_Coverage_coordinateSystem, METH_VARARGS, (char *)"Coverage_coordinateSystem(Coverage self) -> CoordinateSystem"},
	 { (char *)"Coverage_envelope", _wrap_Coverage_envelope, METH_VARARGS, (char *)"Coverage_envelope(Coverage self) -> Envelope"},
	 { (char *)"Coverage_setEnvelope", _wrap_Coverage_setEnvelope, METH_VARARGS, (char *)"Coverage_setEnvelope(Coverage self, Envelope env)"},
	 { (char *)"Coverage_swigregister", Coverage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Geometry", _wrap_new_Geometry, METH_VARARGS, (char *)"\n"
		"Geometry(std::string wkt, CoordinateSystem csy)\n"
		"new_Geometry(Feature feature) -> Geometry\n"
		""},
	 { (char *)"delete_Geometry", _wrap_delete_Geometry, METH_VARARGS, (char *)"delete_Geometry(Geometry self)"},
	 { (char *)"Geometry___bool__", _wrap_Geometry___bool__, METH_VARARGS, (char *)"Geometry___bool__(Geometry self) -> bool"},
	 { (char *)"Geometry___str__", _wrap_Geometry___str__, METH_VARARGS, (char *)"Geometry___str__(Geometry self) -> std::string"},
	 { (char *)"Geometry_ilwisType", _wrap_Geometry_ilwisType, METH_VARARGS, (char *)"Geometry_ilwisType(Geometry self) -> IlwisTypes"},
	 { (char *)"Geometry_fromWKT", _wrap_Geometry_fromWKT, METH_VARARGS, (char *)"Geometry_fromWKT(Geometry self, std::string const & wkt)"},
	 { (char *)"Geometry_fromWKTReader", _wrap_Geometry_fromWKTReader, METH_VARARGS, (char *)"Geometry_fromWKTReader(Geometry self, std::string const & wkt) -> geos::geom::Geometry *"},
	 { (char *)"Geometry_toWKT", _wrap_Geometry_toWKT, METH_VARARGS, (char *)"Geometry_toWKT(Geometry self) -> std::string"},
	 { (char *)"Geometry_coordinateSystem", _wrap_Geometry_coordinateSystem, METH_VARARGS, (char *)"Geometry_coordinateSystem(Geometry self) -> CoordinateSystem"},
	 { (char *)"Geometry_setCoordinateSystem", _wrap_Geometry_setCoordinateSystem, METH_VARARGS, (char *)"Geometry_setCoordinateSystem(Geometry self, CoordinateSystem cs)"},
	 { (char *)"Geometry_transform", _wrap_Geometry_transform, METH_VARARGS, (char *)"Geometry_transform(Geometry self, CoordinateSystem cs) -> Geometry"},
	 { (char *)"Geometry_envelope", _wrap_Geometry_envelope, METH_VARARGS, (char *)"Geometry_envelope(Geometry self) -> Envelope"},
	 { (char *)"Geometry___iter__", _wrap_Geometry___iter__, METH_VARARGS, (char *)"Geometry___iter__(Geometry self) -> VertexIterator"},
	 { (char *)"Geometry_isSimple", _wrap_Geometry_isSimple, METH_VARARGS, (char *)"Geometry_isSimple(Geometry self) -> bool"},
	 { (char *)"Geometry_within", _wrap_Geometry_within, METH_VARARGS, (char *)"Geometry_within(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_contains", _wrap_Geometry_contains, METH_VARARGS, (char *)"Geometry_contains(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_disjoint", _wrap_Geometry_disjoint, METH_VARARGS, (char *)"Geometry_disjoint(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_touches", _wrap_Geometry_touches, METH_VARARGS, (char *)"Geometry_touches(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_intersects", _wrap_Geometry_intersects, METH_VARARGS, (char *)"Geometry_intersects(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_crosses", _wrap_Geometry_crosses, METH_VARARGS, (char *)"Geometry_crosses(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_overlaps", _wrap_Geometry_overlaps, METH_VARARGS, (char *)"Geometry_overlaps(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_equals", _wrap_Geometry_equals, METH_VARARGS, (char *)"Geometry_equals(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_equalsExact", _wrap_Geometry_equalsExact, METH_VARARGS, (char *)"\n"
		"equalsExact(Geometry geometry, double tolerance=0) -> bool\n"
		"Geometry_equalsExact(Geometry self, Geometry geometry) -> bool\n"
		""},
	 { (char *)"Geometry_covers", _wrap_Geometry_covers, METH_VARARGS, (char *)"Geometry_covers(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_coveredBy", _wrap_Geometry_coveredBy, METH_VARARGS, (char *)"Geometry_coveredBy(Geometry self, Geometry geometry) -> bool"},
	 { (char *)"Geometry_relate", _wrap_Geometry_relate, METH_VARARGS, (char *)"Geometry_relate(Geometry self, Geometry geometry, std::string const & DE9IM_pattern) -> bool"},
	 { (char *)"Geometry_distance", _wrap_Geometry_distance, METH_VARARGS, (char *)"Geometry_distance(Geometry self, Geometry geometry) -> double"},
	 { (char *)"Geometry_getArea", _wrap_Geometry_getArea, METH_VARARGS, (char *)"Geometry_getArea(Geometry self) -> double"},
	 { (char *)"Geometry_getLength", _wrap_Geometry_getLength, METH_VARARGS, (char *)"Geometry_getLength(Geometry self) -> double"},
	 { (char *)"Geometry_isWithinDistance", _wrap_Geometry_isWithinDistance, METH_VARARGS, (char *)"Geometry_isWithinDistance(Geometry self, Geometry geometry, double cDistance) -> bool"},
	 { (char *)"Geometry_buffer", _wrap_Geometry_buffer, METH_VARARGS, (char *)"Geometry_buffer(Geometry self, double distance) -> Geometry"},
	 { (char *)"Geometry_convexHull", _wrap_Geometry_convexHull, METH_VARARGS, (char *)"Geometry_convexHull(Geometry self) -> Geometry"},
	 { (char *)"Geometry_intersection", _wrap_Geometry_intersection, METH_VARARGS, (char *)"Geometry_intersection(Geometry self, Geometry geometry) -> Geometry"},
	 { (char *)"Geometry_Union", _wrap_Geometry_Union, METH_VARARGS, (char *)"Geometry_Union(Geometry self, Geometry geometry) -> Geometry"},
	 { (char *)"Geometry_difference", _wrap_Geometry_difference, METH_VARARGS, (char *)"Geometry_difference(Geometry self, Geometry geometry) -> Geometry"},
	 { (char *)"Geometry_symDifference", _wrap_Geometry_symDifference, METH_VARARGS, (char *)"Geometry_symDifference(Geometry self, Geometry geometry) -> Geometry"},
	 { (char *)"Geometry_swigregister", Geometry_swigregister, METH_VARARGS, NULL},
	 { (char *)"Feature___bool__", _wrap_Feature___bool__, METH_VARARGS, (char *)"Feature___bool__(Feature self) -> bool"},
	 { (char *)"Feature___str__", _wrap_Feature___str__, METH_VARARGS, (char *)"Feature___str__(Feature self) -> std::string"},
	 { (char *)"Feature___iter__", _wrap_Feature___iter__, METH_VARARGS, (char *)"Feature___iter__(Feature self) -> VertexIterator"},
	 { (char *)"Feature_createSubFeature", _wrap_Feature_createSubFeature, METH_VARARGS, (char *)"Feature_createSubFeature(Feature self, PyObject * subFeatureIndex, Geometry geom) -> Feature"},
	 { (char *)"Feature___getitem__", _wrap_Feature___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(std::string name) -> PyObject\n"
		"Feature___getitem__(Feature self, quint32 colIndex) -> PyObject *\n"
		""},
	 { (char *)"Feature_attribute", _wrap_Feature_attribute, METH_VARARGS, (char *)"\n"
		"attribute(std::string name, qint64 defaultValue) -> PyObject\n"
		"attribute(std::string name, double defaultValue) -> PyObject\n"
		"Feature_attribute(Feature self, std::string name, std::string defaultValue) -> PyObject *\n"
		""},
	 { (char *)"Feature___setitem__", _wrap_Feature___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(std::string name, PyObject const * value)\n"
		"__setitem__(std::string name, qint64 value)\n"
		"__setitem__(std::string name, double value)\n"
		"Feature___setitem__(Feature self, std::string name, std::string value)\n"
		""},
	 { (char *)"Feature_setAttribute", _wrap_Feature_setAttribute, METH_VARARGS, (char *)"\n"
		"setAttribute(std::string name, PyObject const * value)\n"
		"setAttribute(std::string name, qint64 value)\n"
		"setAttribute(std::string name, double value)\n"
		"Feature_setAttribute(Feature self, std::string name, std::string value)\n"
		""},
	 { (char *)"Feature_ilwisType", _wrap_Feature_ilwisType, METH_VARARGS, (char *)"Feature_ilwisType(Feature self) -> IlwisTypes"},
	 { (char *)"Feature_geometry", _wrap_Feature_geometry, METH_VARARGS, (char *)"\n"
		"geometry() -> Geometry\n"
		"Feature_geometry(Feature self, Geometry geom)\n"
		""},
	 { (char *)"Feature_geometryType", _wrap_Feature_geometryType, METH_VARARGS, (char *)"Feature_geometryType(Feature self) -> IlwisTypes"},
	 { (char *)"Feature_featureId", _wrap_Feature_featureId, METH_VARARGS, (char *)"Feature_featureId(Feature self) -> quint64"},
	 { (char *)"Feature_attributeDefinition", _wrap_Feature_attributeDefinition, METH_VARARGS, (char *)"\n"
		"attributeDefinition(std::string const & name) -> ColumnDefinition\n"
		"Feature_attributeDefinition(Feature self, quint32 index) -> ColumnDefinition\n"
		""},
	 { (char *)"Feature_attributeColumnCount", _wrap_Feature_attributeColumnCount, METH_VARARGS, (char *)"Feature_attributeColumnCount(Feature self) -> quint32"},
	 { (char *)"Feature_removeSubFeature", _wrap_Feature_removeSubFeature, METH_VARARGS, (char *)"\n"
		"removeSubFeature(std::string const & subFeatureIndex)\n"
		"Feature_removeSubFeature(Feature self, double subFeatureIndex)\n"
		""},
	 { (char *)"Feature_setSubFeature", _wrap_Feature_setSubFeature, METH_VARARGS, (char *)"\n"
		"setSubFeature(std::string const & subFeatureIndex, Feature feature)\n"
		"Feature_setSubFeature(Feature self, double subFeatureIndex, Feature feature)\n"
		""},
	 { (char *)"Feature_subFeatureCount", _wrap_Feature_subFeatureCount, METH_VARARGS, (char *)"Feature_subFeatureCount(Feature self) -> quint32"},
	 { (char *)"Feature_setRecord", _wrap_Feature_setRecord, METH_VARARGS, (char *)"\n"
		"setRecord(PyObject * pyValues, quint32 offset=0)\n"
		"Feature_setRecord(Feature self, PyObject * pyValues)\n"
		""},
	 { (char *)"Feature_record", _wrap_Feature_record, METH_VARARGS, (char *)"Feature_record(Feature self) -> PyObject *"},
	 { (char *)"Feature_begin", _wrap_Feature_begin, METH_VARARGS, (char *)"Feature_begin(Feature self) -> VertexIterator"},
	 { (char *)"Feature_end", _wrap_Feature_end, METH_VARARGS, (char *)"Feature_end(Feature self) -> VertexIterator"},
	 { (char *)"delete_Feature", _wrap_delete_Feature, METH_VARARGS, (char *)"delete_Feature(Feature self)"},
	 { (char *)"Feature_swigregister", Feature_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FeatureIterator", _wrap_new_FeatureIterator, METH_VARARGS, (char *)"\n"
		"FeatureIterator(FeatureCoverage fc)\n"
		"new_FeatureIterator(FeatureIterator it) -> FeatureIterator\n"
		""},
	 { (char *)"FeatureIterator___next__", _wrap_FeatureIterator___next__, METH_VARARGS, (char *)"FeatureIterator___next__(FeatureIterator self) -> Feature"},
	 { (char *)"FeatureIterator_current", _wrap_FeatureIterator_current, METH_VARARGS, (char *)"FeatureIterator_current(FeatureIterator self) -> Feature"},
	 { (char *)"FeatureIterator___getitem__", _wrap_FeatureIterator___getitem__, METH_VARARGS, (char *)"FeatureIterator___getitem__(FeatureIterator self, quint32 pos) -> Feature"},
	 { (char *)"FeatureIterator___iter__", _wrap_FeatureIterator___iter__, METH_VARARGS, (char *)"FeatureIterator___iter__(FeatureIterator self) -> FeatureIterator"},
	 { (char *)"FeatureIterator___str__", _wrap_FeatureIterator___str__, METH_VARARGS, (char *)"FeatureIterator___str__(FeatureIterator self) -> std::string"},
	 { (char *)"FeatureIterator___bool__", _wrap_FeatureIterator___bool__, METH_VARARGS, (char *)"FeatureIterator___bool__(FeatureIterator self) -> bool"},
	 { (char *)"FeatureIterator___eq__", _wrap_FeatureIterator___eq__, METH_VARARGS, (char *)"FeatureIterator___eq__(FeatureIterator self, FeatureIterator other) -> bool"},
	 { (char *)"FeatureIterator___ne__", _wrap_FeatureIterator___ne__, METH_VARARGS, (char *)"FeatureIterator___ne__(FeatureIterator self, FeatureIterator other) -> bool"},
	 { (char *)"FeatureIterator___add__", _wrap_FeatureIterator___add__, METH_VARARGS, (char *)"FeatureIterator___add__(FeatureIterator self, int n) -> FeatureIterator"},
	 { (char *)"FeatureIterator___radd__", _wrap_FeatureIterator___radd__, METH_VARARGS, (char *)"FeatureIterator___radd__(FeatureIterator self, int n) -> FeatureIterator"},
	 { (char *)"FeatureIterator___sub__", _wrap_FeatureIterator___sub__, METH_VARARGS, (char *)"FeatureIterator___sub__(FeatureIterator self, int n) -> FeatureIterator"},
	 { (char *)"delete_FeatureIterator", _wrap_delete_FeatureIterator, METH_VARARGS, (char *)"delete_FeatureIterator(FeatureIterator self)"},
	 { (char *)"FeatureIterator_swigregister", FeatureIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FeatureCoverage", _wrap_new_FeatureCoverage, METH_VARARGS, (char *)"\n"
		"FeatureCoverage()\n"
		"new_FeatureCoverage(std::string const & resource) -> FeatureCoverage\n"
		""},
	 { (char *)"FeatureCoverage___iter__", _wrap_FeatureCoverage___iter__, METH_VARARGS, (char *)"FeatureCoverage___iter__(FeatureCoverage self) -> FeatureIterator"},
	 { (char *)"FeatureCoverage_featureTypes", _wrap_FeatureCoverage_featureTypes, METH_VARARGS, (char *)"\n"
		"featureTypes() -> IlwisTypes\n"
		"FeatureCoverage_featureTypes(FeatureCoverage self, IlwisTypes type)\n"
		""},
	 { (char *)"FeatureCoverage_featureCount", _wrap_FeatureCoverage_featureCount, METH_VARARGS, (char *)"FeatureCoverage_featureCount(FeatureCoverage self) -> unsigned int"},
	 { (char *)"FeatureCoverage_setFeatureCount", _wrap_FeatureCoverage_setFeatureCount, METH_VARARGS, (char *)"FeatureCoverage_setFeatureCount(FeatureCoverage self, IlwisTypes type, quint32 geomCnt)"},
	 { (char *)"FeatureCoverage_newFeature", _wrap_FeatureCoverage_newFeature, METH_VARARGS, (char *)"\n"
		"newFeature(std::string const & wkt, CoordinateSystem csy, bool load=True) -> Feature\n"
		"newFeature(std::string const & wkt, CoordinateSystem csy) -> Feature\n"
		"FeatureCoverage_newFeature(FeatureCoverage self, Geometry geometry) -> Feature\n"
		""},
	 { (char *)"FeatureCoverage_newFeatureFrom", _wrap_FeatureCoverage_newFeatureFrom, METH_VARARGS, (char *)"FeatureCoverage_newFeatureFrom(FeatureCoverage self, Feature feat, CoordinateSystem csy) -> Feature"},
	 { (char *)"FeatureCoverage_reprojectFeatures", _wrap_FeatureCoverage_reprojectFeatures, METH_VARARGS, (char *)"FeatureCoverage_reprojectFeatures(FeatureCoverage self, CoordinateSystem csy)"},
	 { (char *)"FeatureCoverage_attributeTable", _wrap_FeatureCoverage_attributeTable, METH_VARARGS, (char *)"FeatureCoverage_attributeTable(FeatureCoverage self) -> Table"},
	 { (char *)"FeatureCoverage_attributesFromTable", _wrap_FeatureCoverage_attributesFromTable, METH_VARARGS, (char *)"FeatureCoverage_attributesFromTable(FeatureCoverage self, Table otherTable)"},
	 { (char *)"FeatureCoverage_addColumn", _wrap_FeatureCoverage_addColumn, METH_VARARGS, (char *)"\n"
		"addColumn(ColumnDefinition coldef)\n"
		"FeatureCoverage_addColumn(FeatureCoverage self, std::string const & name, std::string const & domainname)\n"
		""},
	 { (char *)"FeatureCoverage_columndefinition", _wrap_FeatureCoverage_columndefinition, METH_VARARGS, (char *)"\n"
		"columndefinition(std::string const & nme) -> ColumnDefinition\n"
		"FeatureCoverage_columndefinition(FeatureCoverage self, quint32 index) -> ColumnDefinition\n"
		""},
	 { (char *)"FeatureCoverage_setColumndefinition", _wrap_FeatureCoverage_setColumndefinition, METH_VARARGS, (char *)"FeatureCoverage_setColumndefinition(FeatureCoverage self, ColumnDefinition coldef)"},
	 { (char *)"FeatureCoverage_columnIndex", _wrap_FeatureCoverage_columnIndex, METH_VARARGS, (char *)"FeatureCoverage_columnIndex(FeatureCoverage self, std::string const & nme) -> quint32"},
	 { (char *)"FeatureCoverage___getitem__", _wrap_FeatureCoverage___getitem__, METH_VARARGS, (char *)"FeatureCoverage___getitem__(FeatureCoverage self, quint32 index) -> ColumnDefinition"},
	 { (char *)"FeatureCoverage_checkInput", _wrap_FeatureCoverage_checkInput, METH_VARARGS, (char *)"FeatureCoverage_checkInput(FeatureCoverage self, PyObject * inputVar, quint32 columnIndex) -> PyObject *"},
	 { (char *)"FeatureCoverage_definitionCount", _wrap_FeatureCoverage_definitionCount, METH_VARARGS, (char *)"FeatureCoverage_definitionCount(FeatureCoverage self) -> quint32"},
	 { (char *)"FeatureCoverage_setStackDefinition", _wrap_FeatureCoverage_setStackDefinition, METH_VARARGS, (char *)"FeatureCoverage_setStackDefinition(FeatureCoverage self, Domain dom, PyObject * items)"},
	 { (char *)"FeatureCoverage_indexOf", _wrap_FeatureCoverage_indexOf, METH_VARARGS, (char *)"\n"
		"indexOf(std::string const & variantId) -> quint32\n"
		"indexOf(double domainItem) -> quint32\n"
		"FeatureCoverage_indexOf(FeatureCoverage self, PyObject * obj) -> quint32\n"
		""},
	 { (char *)"FeatureCoverage_atIndex", _wrap_FeatureCoverage_atIndex, METH_VARARGS, (char *)"FeatureCoverage_atIndex(FeatureCoverage self, quint32 idx) -> std::string"},
	 { (char *)"FeatureCoverage_indexes", _wrap_FeatureCoverage_indexes, METH_VARARGS, (char *)"FeatureCoverage_indexes(FeatureCoverage self) -> PyObject *"},
	 { (char *)"FeatureCoverage_countStackDomainItems", _wrap_FeatureCoverage_countStackDomainItems, METH_VARARGS, (char *)"FeatureCoverage_countStackDomainItems(FeatureCoverage self) -> quint32"},
	 { (char *)"FeatureCoverage_stackDomain", _wrap_FeatureCoverage_stackDomain, METH_VARARGS, (char *)"FeatureCoverage_stackDomain(FeatureCoverage self) -> Domain"},
	 { (char *)"FeatureCoverage_clear", _wrap_FeatureCoverage_clear, METH_VARARGS, (char *)"FeatureCoverage_clear(FeatureCoverage self)"},
	 { (char *)"FeatureCoverage_toFeatureCoverage", _wrap_FeatureCoverage_toFeatureCoverage, METH_VARARGS, (char *)"FeatureCoverage_toFeatureCoverage(Object obj) -> FeatureCoverage"},
	 { (char *)"FeatureCoverage_select", _wrap_FeatureCoverage_select, METH_VARARGS, (char *)"FeatureCoverage_select(FeatureCoverage self, std::string const & spatialQuery) -> PyObject *"},
	 { (char *)"FeatureCoverage_clone", _wrap_FeatureCoverage_clone, METH_VARARGS, (char *)"FeatureCoverage_clone(FeatureCoverage self) -> FeatureCoverage"},
	 { (char *)"FeatureCoverage_geometryType", _wrap_FeatureCoverage_geometryType, METH_VARARGS, (char *)"FeatureCoverage_geometryType(FeatureCoverage self, Geometry geom) -> IlwisTypes"},
	 { (char *)"FeatureCoverage_setCoordinateSystem", _wrap_FeatureCoverage_setCoordinateSystem, METH_VARARGS, (char *)"FeatureCoverage_setCoordinateSystem(FeatureCoverage self, CoordinateSystem cs)"},
	 { (char *)"delete_FeatureCoverage", _wrap_delete_FeatureCoverage, METH_VARARGS, (char *)"delete_FeatureCoverage(FeatureCoverage self)"},
	 { (char *)"FeatureCoverage_swigregister", FeatureCoverage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Flow", _wrap_new_Flow, METH_VARARGS, (char *)"new_Flow() -> Flow"},
	 { (char *)"delete_Flow", _wrap_delete_Flow, METH_VARARGS, (char *)"delete_Flow(Flow self)"},
	 { (char *)"Flow_swigregister", Flow_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PixelIterator", _wrap_new_PixelIterator, METH_VARARGS, (char *)"\n"
		"PixelIterator(PixelIterator pi)\n"
		"PixelIterator(RasterCoverage rc, Box b)\n"
		"PixelIterator(RasterCoverage rc)\n"
		"PixelIterator(RasterCoverage rc, Geometry geom)\n"
		"new_PixelIterator(Ilwis::PixelIterator * ilwIt) -> PixelIterator\n"
		""},
	 { (char *)"delete_PixelIterator", _wrap_delete_PixelIterator, METH_VARARGS, (char *)"delete_PixelIterator(PixelIterator self)"},
	 { (char *)"PixelIterator___iter__", _wrap_PixelIterator___iter__, METH_VARARGS, (char *)"PixelIterator___iter__(PixelIterator self) -> PixelIterator"},
	 { (char *)"PixelIterator___next__", _wrap_PixelIterator___next__, METH_VARARGS, (char *)"PixelIterator___next__(PixelIterator self) -> double"},
	 { (char *)"PixelIterator___bool__", _wrap_PixelIterator___bool__, METH_VARARGS, (char *)"PixelIterator___bool__(PixelIterator self) -> bool"},
	 { (char *)"PixelIterator___str__", _wrap_PixelIterator___str__, METH_VARARGS, (char *)"PixelIterator___str__(PixelIterator self) -> std::string"},
	 { (char *)"PixelIterator___float__", _wrap_PixelIterator___float__, METH_VARARGS, (char *)"PixelIterator___float__(PixelIterator self) -> double"},
	 { (char *)"PixelIterator___int__", _wrap_PixelIterator___int__, METH_VARARGS, (char *)"PixelIterator___int__(PixelIterator self) -> quint64"},
	 { (char *)"PixelIterator___contains__", _wrap_PixelIterator___contains__, METH_VARARGS, (char *)"PixelIterator___contains__(PixelIterator self, Pixel vox) -> bool"},
	 { (char *)"PixelIterator_box", _wrap_PixelIterator_box, METH_VARARGS, (char *)"PixelIterator_box(PixelIterator self) -> Box"},
	 { (char *)"PixelIterator_position", _wrap_PixelIterator_position, METH_VARARGS, (char *)"PixelIterator_position(PixelIterator self) -> Pixel"},
	 { (char *)"PixelIterator_setFlow", _wrap_PixelIterator_setFlow, METH_VARARGS, (char *)"PixelIterator_setFlow(PixelIterator self, pythonapi::Flow flw)"},
	 { (char *)"PixelIterator_xChanged", _wrap_PixelIterator_xChanged, METH_VARARGS, (char *)"PixelIterator_xChanged(PixelIterator self) -> bool"},
	 { (char *)"PixelIterator_yChanged", _wrap_PixelIterator_yChanged, METH_VARARGS, (char *)"PixelIterator_yChanged(PixelIterator self) -> bool"},
	 { (char *)"PixelIterator_zChanged", _wrap_PixelIterator_zChanged, METH_VARARGS, (char *)"PixelIterator_zChanged(PixelIterator self) -> bool"},
	 { (char *)"PixelIterator___set__", _wrap_PixelIterator___set__, METH_VARARGS, (char *)"PixelIterator___set__(PixelIterator self, PixelIterator ohterIt) -> PixelIterator"},
	 { (char *)"PixelIterator___getitem__", _wrap_PixelIterator___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(Pixel vox) -> PixelIterator\n"
		"PixelIterator___getitem__(PixelIterator self, quint32 linearPosition) -> double\n"
		""},
	 { (char *)"PixelIterator___setitem__", _wrap_PixelIterator___setitem__, METH_VARARGS, (char *)"PixelIterator___setitem__(PixelIterator self, quint32 linearPosition, double value)"},
	 { (char *)"PixelIterator___add__", _wrap_PixelIterator___add__, METH_VARARGS, (char *)"PixelIterator___add__(PixelIterator self, int n) -> PixelIterator"},
	 { (char *)"PixelIterator___radd__", _wrap_PixelIterator___radd__, METH_VARARGS, (char *)"PixelIterator___radd__(PixelIterator self, int n) -> PixelIterator"},
	 { (char *)"PixelIterator___iadd__", _wrap_PixelIterator___iadd__, METH_VARARGS, (char *)"PixelIterator___iadd__(PixelIterator self, int n) -> PixelIterator"},
	 { (char *)"PixelIterator___eq__", _wrap_PixelIterator___eq__, METH_VARARGS, (char *)"PixelIterator___eq__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator___ne__", _wrap_PixelIterator___ne__, METH_VARARGS, (char *)"PixelIterator___ne__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator___le__", _wrap_PixelIterator___le__, METH_VARARGS, (char *)"PixelIterator___le__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator___lt__", _wrap_PixelIterator___lt__, METH_VARARGS, (char *)"PixelIterator___lt__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator___ge__", _wrap_PixelIterator___ge__, METH_VARARGS, (char *)"PixelIterator___ge__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator___gt__", _wrap_PixelIterator___gt__, METH_VARARGS, (char *)"PixelIterator___gt__(PixelIterator self, PixelIterator other) -> bool"},
	 { (char *)"PixelIterator_end", _wrap_PixelIterator_end, METH_VARARGS, (char *)"PixelIterator_end(PixelIterator self) -> PixelIterator"},
	 { (char *)"PixelIterator_asBuffer", _wrap_PixelIterator_asBuffer, METH_VARARGS, (char *)"PixelIterator_asBuffer(PixelIterator self) -> Py_buffer *"},
	 { (char *)"PixelIterator_raster", _wrap_PixelIterator_raster, METH_VARARGS, (char *)"PixelIterator_raster(PixelIterator self) -> RasterCoverage"},
	 { (char *)"PixelIterator_swigregister", PixelIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GeoReference", _wrap_new_GeoReference, METH_VARARGS, (char *)"new_GeoReference(std::string const & resource) -> GeoReference"},
	 { (char *)"GeoReference_toGeoReference", _wrap_GeoReference_toGeoReference, METH_VARARGS, (char *)"GeoReference_toGeoReference(Object obj) -> GeoReference"},
	 { (char *)"GeoReference_coordinateSystem", _wrap_GeoReference_coordinateSystem, METH_VARARGS, (char *)"GeoReference_coordinateSystem(GeoReference self) -> CoordinateSystem"},
	 { (char *)"GeoReference_setCoordinateSystem", _wrap_GeoReference_setCoordinateSystem, METH_VARARGS, (char *)"GeoReference_setCoordinateSystem(GeoReference self, CoordinateSystem csy)"},
	 { (char *)"GeoReference_pixel2Coord", _wrap_GeoReference_pixel2Coord, METH_VARARGS, (char *)"\n"
		"pixel2Coord(PixelD pixel) -> Coordinate\n"
		"GeoReference_pixel2Coord(GeoReference self, Pixel pixel) -> Coordinate\n"
		""},
	 { (char *)"GeoReference_coord2Pixel", _wrap_GeoReference_coord2Pixel, METH_VARARGS, (char *)"GeoReference_coord2Pixel(GeoReference self, Coordinate coord) -> PixelD"},
	 { (char *)"GeoReference_box2Envelope", _wrap_GeoReference_box2Envelope, METH_VARARGS, (char *)"GeoReference_box2Envelope(GeoReference self, Box box) -> Envelope"},
	 { (char *)"GeoReference_envelope2Box", _wrap_GeoReference_envelope2Box, METH_VARARGS, (char *)"GeoReference_envelope2Box(GeoReference self, Envelope box) -> Box"},
	 { (char *)"GeoReference_pixelSize", _wrap_GeoReference_pixelSize, METH_VARARGS, (char *)"GeoReference_pixelSize(GeoReference self) -> double"},
	 { (char *)"GeoReference_size", _wrap_GeoReference_size, METH_VARARGS, (char *)"GeoReference_size(GeoReference self) -> Size"},
	 { (char *)"GeoReference_setSize", _wrap_GeoReference_setSize, METH_VARARGS, (char *)"GeoReference_setSize(GeoReference self, Size sz)"},
	 { (char *)"GeoReference_centerOfPixel", _wrap_GeoReference_centerOfPixel, METH_VARARGS, (char *)"GeoReference_centerOfPixel(GeoReference self) -> bool"},
	 { (char *)"GeoReference_setCenterOfPixel", _wrap_GeoReference_setCenterOfPixel, METH_VARARGS, (char *)"GeoReference_setCenterOfPixel(GeoReference self, bool yesno)"},
	 { (char *)"GeoReference_isCompatible", _wrap_GeoReference_isCompatible, METH_VARARGS, (char *)"GeoReference_isCompatible(GeoReference self, GeoReference other) -> bool"},
	 { (char *)"GeoReference_compute", _wrap_GeoReference_compute, METH_VARARGS, (char *)"GeoReference_compute(GeoReference self) -> bool"},
	 { (char *)"GeoReference_ilwisType", _wrap_GeoReference_ilwisType, METH_VARARGS, (char *)"GeoReference_ilwisType(GeoReference self) -> IlwisTypes"},
	 { (char *)"delete_GeoReference", _wrap_delete_GeoReference, METH_VARARGS, (char *)"delete_GeoReference(GeoReference self)"},
	 { (char *)"GeoReference_swigregister", GeoReference_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RasterCoverage", _wrap_new_RasterCoverage, METH_VARARGS, (char *)"\n"
		"RasterCoverage()\n"
		"new_RasterCoverage(std::string resource) -> RasterCoverage\n"
		""},
	 { (char *)"delete_RasterCoverage", _wrap_delete_RasterCoverage, METH_VARARGS, (char *)"delete_RasterCoverage(RasterCoverage self)"},
	 { (char *)"RasterCoverage___add__", _wrap_RasterCoverage___add__, METH_VARARGS, (char *)"\n"
		"__add__(RasterCoverage rc) -> RasterCoverage\n"
		"RasterCoverage___add__(RasterCoverage self, double value) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___radd__", _wrap_RasterCoverage___radd__, METH_VARARGS, (char *)"RasterCoverage___radd__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___sub__", _wrap_RasterCoverage___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(RasterCoverage rc) -> RasterCoverage\n"
		"RasterCoverage___sub__(RasterCoverage self, double value) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___rsub__", _wrap_RasterCoverage___rsub__, METH_VARARGS, (char *)"RasterCoverage___rsub__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___mul__", _wrap_RasterCoverage___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(RasterCoverage rc) -> RasterCoverage\n"
		"RasterCoverage___mul__(RasterCoverage self, double value) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___rmul__", _wrap_RasterCoverage___rmul__, METH_VARARGS, (char *)"RasterCoverage___rmul__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___truediv__", _wrap_RasterCoverage___truediv__, METH_VARARGS, (char *)"\n"
		"__truediv__(RasterCoverage rc) -> RasterCoverage\n"
		"RasterCoverage___truediv__(RasterCoverage self, double value) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___rtruediv__", _wrap_RasterCoverage___rtruediv__, METH_VARARGS, (char *)"RasterCoverage___rtruediv__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___gt__", _wrap_RasterCoverage___gt__, METH_VARARGS, (char *)"\n"
		"__gt__(double value) -> RasterCoverage\n"
		"RasterCoverage___gt__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___lt__", _wrap_RasterCoverage___lt__, METH_VARARGS, (char *)"\n"
		"__lt__(double value) -> RasterCoverage\n"
		"RasterCoverage___lt__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___ge__", _wrap_RasterCoverage___ge__, METH_VARARGS, (char *)"\n"
		"__ge__(double value) -> RasterCoverage\n"
		"RasterCoverage___ge__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___le__", _wrap_RasterCoverage___le__, METH_VARARGS, (char *)"\n"
		"__le__(double value) -> RasterCoverage\n"
		"RasterCoverage___le__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___rand__", _wrap_RasterCoverage___rand__, METH_VARARGS, (char *)"RasterCoverage___rand__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___ror__", _wrap_RasterCoverage___ror__, METH_VARARGS, (char *)"RasterCoverage___ror__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___rxor__", _wrap_RasterCoverage___rxor__, METH_VARARGS, (char *)"RasterCoverage___rxor__(RasterCoverage self, double value) -> RasterCoverage"},
	 { (char *)"RasterCoverage___and__", _wrap_RasterCoverage___and__, METH_VARARGS, (char *)"\n"
		"__and__(double value) -> RasterCoverage\n"
		"RasterCoverage___and__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___or__", _wrap_RasterCoverage___or__, METH_VARARGS, (char *)"\n"
		"__or__(double value) -> RasterCoverage\n"
		"RasterCoverage___or__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___xor__", _wrap_RasterCoverage___xor__, METH_VARARGS, (char *)"\n"
		"__xor__(double value) -> RasterCoverage\n"
		"RasterCoverage___xor__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___eq__", _wrap_RasterCoverage___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(double value) -> RasterCoverage\n"
		"RasterCoverage___eq__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___ne__", _wrap_RasterCoverage___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(double value) -> RasterCoverage\n"
		"RasterCoverage___ne__(RasterCoverage self, RasterCoverage rc) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage_min", _wrap_RasterCoverage_min, METH_VARARGS, (char *)"\n"
		"min(RasterCoverage rc1, RasterCoverage rc2) -> RasterCoverage\n"
		"min(RasterCoverage rc1, double value) -> RasterCoverage\n"
		"RasterCoverage_min(double value, RasterCoverage rc2) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage_max", _wrap_RasterCoverage_max, METH_VARARGS, (char *)"\n"
		"max(RasterCoverage rc1, RasterCoverage rc2) -> RasterCoverage\n"
		"max(RasterCoverage rc1, double value) -> RasterCoverage\n"
		"RasterCoverage_max(double value, RasterCoverage rc2) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage___iter__", _wrap_RasterCoverage___iter__, METH_VARARGS, (char *)"RasterCoverage___iter__(RasterCoverage self) -> PixelIterator"},
	 { (char *)"RasterCoverage_coord2value", _wrap_RasterCoverage_coord2value, METH_VARARGS, (char *)"RasterCoverage_coord2value(RasterCoverage self, Coordinate c) -> double"},
	 { (char *)"RasterCoverage_pix2value", _wrap_RasterCoverage_pix2value, METH_VARARGS, (char *)"\n"
		"pix2value(Pixel pix) -> double\n"
		"RasterCoverage_pix2value(RasterCoverage self, PixelD pix) -> double\n"
		""},
	 { (char *)"RasterCoverage_size", _wrap_RasterCoverage_size, METH_VARARGS, (char *)"RasterCoverage_size(RasterCoverage self) -> Size"},
	 { (char *)"RasterCoverage_setSize", _wrap_RasterCoverage_setSize, METH_VARARGS, (char *)"RasterCoverage_setSize(RasterCoverage self, Size sz)"},
	 { (char *)"RasterCoverage_unload", _wrap_RasterCoverage_unload, METH_VARARGS, (char *)"RasterCoverage_unload(RasterCoverage self)"},
	 { (char *)"RasterCoverage_coordinateSystem", _wrap_RasterCoverage_coordinateSystem, METH_VARARGS, (char *)"RasterCoverage_coordinateSystem(RasterCoverage self) -> CoordinateSystem"},
	 { (char *)"RasterCoverage_geoReference", _wrap_RasterCoverage_geoReference, METH_VARARGS, (char *)"RasterCoverage_geoReference(RasterCoverage self) -> GeoReference"},
	 { (char *)"RasterCoverage_setGeoReference", _wrap_RasterCoverage_setGeoReference, METH_VARARGS, (char *)"RasterCoverage_setGeoReference(RasterCoverage self, GeoReference gr)"},
	 { (char *)"RasterCoverage_datadef", _wrap_RasterCoverage_datadef, METH_VARARGS, (char *)"RasterCoverage_datadef(RasterCoverage self) -> DataDefinition"},
	 { (char *)"RasterCoverage_setDataDef", _wrap_RasterCoverage_setDataDef, METH_VARARGS, (char *)"\n"
		"setDataDef(DataDefinition datdef)\n"
		"RasterCoverage_setDataDef(RasterCoverage self, Domain dm)\n"
		""},
	 { (char *)"RasterCoverage_statistics", _wrap_RasterCoverage_statistics, METH_VARARGS, (char *)"\n"
		"statistics(int mode=0, int bins=0) -> NumericStatistics\n"
		"statistics(int mode=0) -> NumericStatistics\n"
		"RasterCoverage_statistics(RasterCoverage self) -> NumericStatistics\n"
		""},
	 { (char *)"RasterCoverage_toRasterCoverage", _wrap_RasterCoverage_toRasterCoverage, METH_VARARGS, (char *)"RasterCoverage_toRasterCoverage(Object obj) -> RasterCoverage"},
	 { (char *)"RasterCoverage_begin", _wrap_RasterCoverage_begin, METH_VARARGS, (char *)"RasterCoverage_begin(RasterCoverage self) -> PixelIterator"},
	 { (char *)"RasterCoverage_end", _wrap_RasterCoverage_end, METH_VARARGS, (char *)"RasterCoverage_end(RasterCoverage self) -> PixelIterator"},
	 { (char *)"RasterCoverage_band", _wrap_RasterCoverage_band, METH_VARARGS, (char *)"RasterCoverage_band(RasterCoverage self, PyObject * pyTrackIndex) -> PixelIterator"},
	 { (char *)"RasterCoverage_addBand", _wrap_RasterCoverage_addBand, METH_VARARGS, (char *)"RasterCoverage_addBand(RasterCoverage self, PyObject * pyTrackIndex, PixelIterator pyIter)"},
	 { (char *)"RasterCoverage_setBandDefinition", _wrap_RasterCoverage_setBandDefinition, METH_VARARGS, (char *)"RasterCoverage_setBandDefinition(RasterCoverage self, PyObject * pyTrackIndex, DataDefinition datdef)"},
	 { (char *)"RasterCoverage_setStackDefinition", _wrap_RasterCoverage_setStackDefinition, METH_VARARGS, (char *)"RasterCoverage_setStackDefinition(RasterCoverage self, Domain dom, PyObject * items)"},
	 { (char *)"RasterCoverage_indexOf", _wrap_RasterCoverage_indexOf, METH_VARARGS, (char *)"\n"
		"indexOf(std::string const & variantId) -> quint32\n"
		"indexOf(double domainItem) -> quint32\n"
		"RasterCoverage_indexOf(RasterCoverage self, PyObject * obj) -> quint32\n"
		""},
	 { (char *)"RasterCoverage_atIndex", _wrap_RasterCoverage_atIndex, METH_VARARGS, (char *)"RasterCoverage_atIndex(RasterCoverage self, quint32 idx) -> std::string"},
	 { (char *)"RasterCoverage_indexes", _wrap_RasterCoverage_indexes, METH_VARARGS, (char *)"RasterCoverage_indexes(RasterCoverage self) -> PyObject *"},
	 { (char *)"RasterCoverage_countStackDomainItems", _wrap_RasterCoverage_countStackDomainItems, METH_VARARGS, (char *)"RasterCoverage_countStackDomainItems(RasterCoverage self) -> quint32"},
	 { (char *)"RasterCoverage_stackDomain", _wrap_RasterCoverage_stackDomain, METH_VARARGS, (char *)"RasterCoverage_stackDomain(RasterCoverage self) -> Domain"},
	 { (char *)"RasterCoverage_clear", _wrap_RasterCoverage_clear, METH_VARARGS, (char *)"RasterCoverage_clear(RasterCoverage self)"},
	 { (char *)"RasterCoverage_select", _wrap_RasterCoverage_select, METH_VARARGS, (char *)"\n"
		"select(std::string geomWkt) -> RasterCoverage\n"
		"RasterCoverage_select(RasterCoverage self, Geometry geom) -> RasterCoverage\n"
		""},
	 { (char *)"RasterCoverage_reprojectRaster", _wrap_RasterCoverage_reprojectRaster, METH_VARARGS, (char *)"RasterCoverage_reprojectRaster(RasterCoverage self, std::string newName, quint32 epsg, std::string interpol) -> RasterCoverage"},
	 { (char *)"RasterCoverage_clone", _wrap_RasterCoverage_clone, METH_VARARGS, (char *)"RasterCoverage_clone(RasterCoverage self) -> RasterCoverage"},
	 { (char *)"RasterCoverage_envelope", _wrap_RasterCoverage_envelope, METH_VARARGS, (char *)"RasterCoverage_envelope(RasterCoverage self) -> Envelope"},
	 { (char *)"RasterCoverage_swigregister", RasterCoverage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Catalog", _wrap_new_Catalog, METH_VARARGS, (char *)"\n"
		"Catalog(std::string const & url, std::string const & filter)\n"
		"new_Catalog(std::string const & url) -> Catalog\n"
		""},
	 { (char *)"delete_Catalog", _wrap_delete_Catalog, METH_VARARGS, (char *)"delete_Catalog(Catalog self)"},
	 { (char *)"Catalog___bool__", _wrap_Catalog___bool__, METH_VARARGS, (char *)"Catalog___bool__(Catalog self) -> bool"},
	 { (char *)"Catalog___str__", _wrap_Catalog___str__, METH_VARARGS, (char *)"Catalog___str__(Catalog self) -> std::string"},
	 { (char *)"Catalog_ilwisType", _wrap_Catalog_ilwisType, METH_VARARGS, (char *)"Catalog_ilwisType(Catalog self) -> IlwisTypes"},
	 { (char *)"Catalog_items", _wrap_Catalog_items, METH_VARARGS, (char *)"Catalog_items(Catalog self) -> PyObject *"},
	 { (char *)"Catalog__getitem", _wrap_Catalog__getitem, METH_VARARGS, (char *)"Catalog__getitem(Catalog self, std::string const & name) -> Object"},
	 { (char *)"Catalog_toCatalog", _wrap_Catalog_toCatalog, METH_VARARGS, (char *)"Catalog_toCatalog(Object obj) -> Catalog"},
	 { (char *)"Catalog_swigregister", Catalog_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Domain", _wrap_delete_Domain, METH_VARARGS, (char *)"delete_Domain(Domain self)"},
	 { (char *)"Domain_isStrict", _wrap_Domain_isStrict, METH_VARARGS, (char *)"Domain_isStrict(Domain self) -> bool"},
	 { (char *)"Domain_setStrict", _wrap_Domain_setStrict, METH_VARARGS, (char *)"Domain_setStrict(Domain self, bool yesno)"},
	 { (char *)"Domain_impliedValue", _wrap_Domain_impliedValue, METH_VARARGS, (char *)"Domain_impliedValue(Domain self, PyObject * value) -> PyObject *"},
	 { (char *)"Domain_parent", _wrap_Domain_parent, METH_VARARGS, (char *)"Domain_parent(Domain self) -> Domain"},
	 { (char *)"Domain_setParent", _wrap_Domain_setParent, METH_VARARGS, (char *)"Domain_setParent(Domain self, Domain dom)"},
	 { (char *)"Domain_getRange", _wrap_Domain_getRange, METH_VARARGS, (char *)"Domain_getRange(Domain self) -> Range"},
	 { (char *)"Domain_contains", _wrap_Domain_contains, METH_VARARGS, (char *)"Domain_contains(Domain self, PyObject * value) -> std::string"},
	 { (char *)"Domain_isCompatibleWith", _wrap_Domain_isCompatibleWith, METH_VARARGS, (char *)"Domain_isCompatibleWith(Domain self, Domain dom) -> bool"},
	 { (char *)"Domain_setRange", _wrap_Domain_setRange, METH_VARARGS, (char *)"Domain_setRange(Domain self, Range rng)"},
	 { (char *)"Domain_valueType", _wrap_Domain_valueType, METH_VARARGS, (char *)"Domain_valueType(Domain self) -> IlwisTypes"},
	 { (char *)"Domain_toDomain", _wrap_Domain_toDomain, METH_VARARGS, (char *)"Domain_toDomain(Object obj) -> Domain"},
	 { (char *)"Domain_swigregister", Domain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NumericDomain", _wrap_new_NumericDomain, METH_VARARGS, (char *)"\n"
		"NumericDomain()\n"
		"new_NumericDomain(std::string const & resource) -> NumericDomain\n"
		""},
	 { (char *)"NumericDomain_toNumericDomain", _wrap_NumericDomain_toNumericDomain, METH_VARARGS, (char *)"NumericDomain_toNumericDomain(Object obj) -> NumericDomain"},
	 { (char *)"delete_NumericDomain", _wrap_delete_NumericDomain, METH_VARARGS, (char *)"delete_NumericDomain(NumericDomain self)"},
	 { (char *)"NumericDomain_swigregister", NumericDomain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ItemDomain", _wrap_new_ItemDomain, METH_VARARGS, (char *)"new_ItemDomain(Range rng) -> ItemDomain"},
	 { (char *)"ItemDomain_count", _wrap_ItemDomain_count, METH_VARARGS, (char *)"ItemDomain_count(ItemDomain self) -> quint32"},
	 { (char *)"ItemDomain_setTheme", _wrap_ItemDomain_setTheme, METH_VARARGS, (char *)"ItemDomain_setTheme(ItemDomain self, std::string const & theme)"},
	 { (char *)"ItemDomain_theme", _wrap_ItemDomain_theme, METH_VARARGS, (char *)"ItemDomain_theme(ItemDomain self) -> std::string"},
	 { (char *)"ItemDomain_removeItem", _wrap_ItemDomain_removeItem, METH_VARARGS, (char *)"ItemDomain_removeItem(ItemDomain self, std::string const & nme)"},
	 { (char *)"ItemDomain_addItem", _wrap_ItemDomain_addItem, METH_VARARGS, (char *)"ItemDomain_addItem(ItemDomain self, PyObject * value)"},
	 { (char *)"ItemDomain_item", _wrap_ItemDomain_item, METH_VARARGS, (char *)"ItemDomain_item(ItemDomain self, int index, bool labelOnly) -> PyObject *"},
	 { (char *)"ItemDomain_range", _wrap_ItemDomain_range, METH_VARARGS, (char *)"ItemDomain_range(ItemDomain self, Range rng)"},
	 { (char *)"delete_ItemDomain", _wrap_delete_ItemDomain, METH_VARARGS, (char *)"delete_ItemDomain(ItemDomain self)"},
	 { (char *)"ItemDomain_swigregister", ItemDomain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColorDomain", _wrap_new_ColorDomain, METH_VARARGS, (char *)"\n"
		"ColorDomain()\n"
		"new_ColorDomain(std::string const & resource) -> ColorDomain\n"
		""},
	 { (char *)"ColorDomain_ilwisType", _wrap_ColorDomain_ilwisType, METH_VARARGS, (char *)"ColorDomain_ilwisType(ColorDomain self) -> IlwisTypes"},
	 { (char *)"ColorDomain_containsColor", _wrap_ColorDomain_containsColor, METH_VARARGS, (char *)"ColorDomain_containsColor(ColorDomain self, Color value) -> std::string"},
	 { (char *)"delete_ColorDomain", _wrap_delete_ColorDomain, METH_VARARGS, (char *)"delete_ColorDomain(ColorDomain self)"},
	 { (char *)"ColorDomain_swigregister", ColorDomain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TextDomain", _wrap_new_TextDomain, METH_VARARGS, (char *)"\n"
		"TextDomain()\n"
		"new_TextDomain(std::string const & resource) -> TextDomain\n"
		""},
	 { (char *)"delete_TextDomain", _wrap_delete_TextDomain, METH_VARARGS, (char *)"delete_TextDomain(TextDomain self)"},
	 { (char *)"TextDomain_swigregister", TextDomain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeDomain", _wrap_new_TimeDomain, METH_VARARGS, (char *)"\n"
		"TimeDomain()\n"
		"TimeDomain(std::string const & resource)\n"
		"new_TimeDomain(Range rng) -> TimeDomain\n"
		""},
	 { (char *)"delete_TimeDomain", _wrap_delete_TimeDomain, METH_VARARGS, (char *)"delete_TimeDomain(TimeDomain self)"},
	 { (char *)"TimeDomain_swigregister", TimeDomain_swigregister, METH_VARARGS, NULL},
	 { (char *)"Range___bool__", _wrap_Range___bool__, METH_VARARGS, (char *)"Range___bool__(Range self) -> bool"},
	 { (char *)"Range___str__", _wrap_Range___str__, METH_VARARGS, (char *)"Range___str__(Range self) -> std::string"},
	 { (char *)"Range_ilwisType", _wrap_Range_ilwisType, METH_VARARGS, (char *)"Range_ilwisType(Range self) -> IlwisTypes"},
	 { (char *)"Range_valueType", _wrap_Range_valueType, METH_VARARGS, (char *)"Range_valueType(Range self) -> IlwisTypes"},
	 { (char *)"Range_ensure", _wrap_Range_ensure, METH_VARARGS, (char *)"\n"
		"ensure(PyObject const * v, bool inclusive=True) -> PyObject\n"
		"Range_ensure(Range self, PyObject const * v) -> PyObject *\n"
		""},
	 { (char *)"Range_contains", _wrap_Range_contains, METH_VARARGS, (char *)"\n"
		"contains(PyObject const * value, bool inclusive=True) -> bool\n"
		"Range_contains(Range self, PyObject const * value) -> bool\n"
		""},
	 { (char *)"Range_isContinuous", _wrap_Range_isContinuous, METH_VARARGS, (char *)"Range_isContinuous(Range self) -> bool"},
	 { (char *)"Range_impliedValue", _wrap_Range_impliedValue, METH_VARARGS, (char *)"Range_impliedValue(Range self, PyObject const * value) -> PyObject *"},
	 { (char *)"Range_swigregister", Range_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NumericRange", _wrap_new_NumericRange, METH_VARARGS, (char *)"\n"
		"NumericRange(double mi, double ma, double resolution=0)\n"
		"NumericRange(double mi, double ma)\n"
		"NumericRange(NumericRange vr)\n"
		"NumericRange(Ilwis::NumericRange * nr)\n"
		"new_NumericRange() -> NumericRange\n"
		""},
	 { (char *)"delete_NumericRange", _wrap_delete_NumericRange, METH_VARARGS, (char *)"delete_NumericRange(NumericRange self)"},
	 { (char *)"NumericRange_contains", _wrap_NumericRange_contains, METH_VARARGS, (char *)"\n"
		"contains(double v, bool inclusive=True) -> bool\n"
		"NumericRange_contains(NumericRange self, double v) -> bool\n"
		""},
	 { (char *)"NumericRange_max", _wrap_NumericRange_max, METH_VARARGS, (char *)"NumericRange_max(NumericRange self) -> double"},
	 { (char *)"NumericRange_setMax", _wrap_NumericRange_setMax, METH_VARARGS, (char *)"NumericRange_setMax(NumericRange self, double v)"},
	 { (char *)"NumericRange_min", _wrap_NumericRange_min, METH_VARARGS, (char *)"NumericRange_min(NumericRange self) -> double"},
	 { (char *)"NumericRange_setMin", _wrap_NumericRange_setMin, METH_VARARGS, (char *)"NumericRange_setMin(NumericRange self, double v)"},
	 { (char *)"NumericRange_distance", _wrap_NumericRange_distance, METH_VARARGS, (char *)"NumericRange_distance(NumericRange self) -> double"},
	 { (char *)"NumericRange_setResolution", _wrap_NumericRange_setResolution, METH_VARARGS, (char *)"NumericRange_setResolution(NumericRange self, double resolution)"},
	 { (char *)"NumericRange_resolution", _wrap_NumericRange_resolution, METH_VARARGS, (char *)"NumericRange_resolution(NumericRange self) -> double"},
	 { (char *)"NumericRange_set", _wrap_NumericRange_set, METH_VARARGS, (char *)"NumericRange_set(NumericRange self, NumericRange vr)"},
	 { (char *)"NumericRange___iter__", _wrap_NumericRange___iter__, METH_VARARGS, (char *)"NumericRange___iter__(NumericRange self) -> pythonapi::NumericRangeIterator"},
	 { (char *)"NumericRange_begin", _wrap_NumericRange_begin, METH_VARARGS, (char *)"NumericRange_begin(NumericRange self) -> pythonapi::NumericRangeIterator"},
	 { (char *)"NumericRange_end", _wrap_NumericRange_end, METH_VARARGS, (char *)"NumericRange_end(NumericRange self) -> pythonapi::NumericRangeIterator"},
	 { (char *)"NumericRange_clear", _wrap_NumericRange_clear, METH_VARARGS, (char *)"NumericRange_clear(NumericRange self)"},
	 { (char *)"NumericRange_swigregister", NumericRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"ItemRange_add", _wrap_ItemRange_add, METH_VARARGS, (char *)"ItemRange_add(ItemRange self, PyObject * dItem)"},
	 { (char *)"ItemRange_count", _wrap_ItemRange_count, METH_VARARGS, (char *)"ItemRange_count(ItemRange self) -> quint32"},
	 { (char *)"ItemRange_remove", _wrap_ItemRange_remove, METH_VARARGS, (char *)"ItemRange_remove(ItemRange self, std::string const & name)"},
	 { (char *)"ItemRange_clear", _wrap_ItemRange_clear, METH_VARARGS, (char *)"ItemRange_clear(ItemRange self)"},
	 { (char *)"delete_ItemRange", _wrap_delete_ItemRange, METH_VARARGS, (char *)"delete_ItemRange(ItemRange self)"},
	 { (char *)"ItemRange_swigregister", ItemRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NumericItemRange", _wrap_new_NumericItemRange, METH_VARARGS, (char *)"new_NumericItemRange() -> NumericItemRange"},
	 { (char *)"NumericItemRange_add", _wrap_NumericItemRange_add, METH_VARARGS, (char *)"\n"
		"add(std::string name, double min, double max, double resolution=0)\n"
		"add(std::string name, double min, double max)\n"
		"NumericItemRange_add(NumericItemRange self, PyObject * item)\n"
		""},
	 { (char *)"NumericItemRange_listAll", _wrap_NumericItemRange_listAll, METH_VARARGS, (char *)"NumericItemRange_listAll(NumericItemRange self) -> PyObject *"},
	 { (char *)"NumericItemRange_index", _wrap_NumericItemRange_index, METH_VARARGS, (char *)"NumericItemRange_index(NumericItemRange self, double arg3) -> double"},
	 { (char *)"NumericItemRange_gotoIndex", _wrap_NumericItemRange_gotoIndex, METH_VARARGS, (char *)"NumericItemRange_gotoIndex(NumericItemRange self, qint32 index, qint32 step) -> qint32"},
	 { (char *)"NumericItemRange_clone", _wrap_NumericItemRange_clone, METH_VARARGS, (char *)"NumericItemRange_clone(NumericItemRange self) -> NumericItemRange"},
	 { (char *)"delete_NumericItemRange", _wrap_delete_NumericItemRange, METH_VARARGS, (char *)"delete_NumericItemRange(NumericItemRange self)"},
	 { (char *)"NumericItemRange_swigregister", NumericItemRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedItemRange", _wrap_new_IndexedItemRange, METH_VARARGS, (char *)"new_IndexedItemRange() -> IndexedItemRange"},
	 { (char *)"IndexedItemRange_add", _wrap_IndexedItemRange_add, METH_VARARGS, (char *)"IndexedItemRange_add(IndexedItemRange self, PyObject * item)"},
	 { (char *)"IndexedItemRange_gotoIndex", _wrap_IndexedItemRange_gotoIndex, METH_VARARGS, (char *)"IndexedItemRange_gotoIndex(IndexedItemRange self, qint32 index, qint32 step) -> qint32"},
	 { (char *)"IndexedItemRange_clone", _wrap_IndexedItemRange_clone, METH_VARARGS, (char *)"IndexedItemRange_clone(IndexedItemRange self) -> IndexedItemRange"},
	 { (char *)"delete_IndexedItemRange", _wrap_delete_IndexedItemRange, METH_VARARGS, (char *)"delete_IndexedItemRange(IndexedItemRange self)"},
	 { (char *)"IndexedItemRange_swigregister", IndexedItemRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NamedItemRange", _wrap_new_NamedItemRange, METH_VARARGS, (char *)"new_NamedItemRange() -> NamedItemRange"},
	 { (char *)"NamedItemRange_add", _wrap_NamedItemRange_add, METH_VARARGS, (char *)"NamedItemRange_add(NamedItemRange self, PyObject * item)"},
	 { (char *)"NamedItemRange_listAll", _wrap_NamedItemRange_listAll, METH_VARARGS, (char *)"NamedItemRange_listAll(NamedItemRange self) -> PyObject *"},
	 { (char *)"NamedItemRange_gotoIndex", _wrap_NamedItemRange_gotoIndex, METH_VARARGS, (char *)"NamedItemRange_gotoIndex(NamedItemRange self, qint32 index, qint32 step) -> qint32"},
	 { (char *)"NamedItemRange_clone", _wrap_NamedItemRange_clone, METH_VARARGS, (char *)"NamedItemRange_clone(NamedItemRange self) -> NamedItemRange"},
	 { (char *)"delete_NamedItemRange", _wrap_delete_NamedItemRange, METH_VARARGS, (char *)"delete_NamedItemRange(NamedItemRange self)"},
	 { (char *)"NamedItemRange_swigregister", NamedItemRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ThematicRange", _wrap_new_ThematicRange, METH_VARARGS, (char *)"new_ThematicRange() -> ThematicRange"},
	 { (char *)"ThematicRange_add", _wrap_ThematicRange_add, METH_VARARGS, (char *)"\n"
		"add(std::string name, std::string id, std::string descr)\n"
		"add(std::string name, std::string id)\n"
		"add(std::string name)\n"
		"ThematicRange_add(ThematicRange self, PyObject * item)\n"
		""},
	 { (char *)"ThematicRange_listAll", _wrap_ThematicRange_listAll, METH_VARARGS, (char *)"ThematicRange_listAll(ThematicRange self) -> PyObject *"},
	 { (char *)"ThematicRange_clone", _wrap_ThematicRange_clone, METH_VARARGS, (char *)"ThematicRange_clone(ThematicRange self) -> ThematicRange"},
	 { (char *)"delete_ThematicRange", _wrap_delete_ThematicRange, METH_VARARGS, (char *)"delete_ThematicRange(ThematicRange self)"},
	 { (char *)"ThematicRange_swigregister", ThematicRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColorRange", _wrap_new_ColorRange, METH_VARARGS, (char *)"\n"
		"ColorRange()\n"
		"new_ColorRange(IlwisTypes tp, pythonapi::ColorModel clrmodel) -> ColorRange\n"
		""},
	 { (char *)"ColorRange_defaultColorModel", _wrap_ColorRange_defaultColorModel, METH_VARARGS, (char *)"\n"
		"defaultColorModel() -> pythonapi::ColorModel\n"
		"ColorRange_defaultColorModel(ColorRange self, pythonapi::ColorModel m)\n"
		""},
	 { (char *)"ColorRange_toColor", _wrap_ColorRange_toColor, METH_VARARGS, (char *)"\n"
		"toColor(quint64 clrint, pythonapi::ColorModel clrModel, std::string const & name) -> Color\n"
		"toColor(quint64 clrint, pythonapi::ColorModel clrModel) -> Color\n"
		"toColor(PyObject * v, pythonapi::ColorModel colortype, std::string const & name) -> Color\n"
		"ColorRange_toColor(PyObject * v, pythonapi::ColorModel colortype) -> Color\n"
		""},
	 { (char *)"delete_ColorRange", _wrap_delete_ColorRange, METH_VARARGS, (char *)"delete_ColorRange(ColorRange self)"},
	 { (char *)"ColorRange_swigregister", ColorRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ContinuousColorRange", _wrap_new_ContinuousColorRange, METH_VARARGS, (char *)"\n"
		"ContinuousColorRange()\n"
		"new_ContinuousColorRange(Color clr1, Color clr2) -> ContinuousColorRange\n"
		""},
	 { (char *)"ContinuousColorRange_clone", _wrap_ContinuousColorRange_clone, METH_VARARGS, (char *)"ContinuousColorRange_clone(ContinuousColorRange self) -> ContinuousColorRange"},
	 { (char *)"ContinuousColorRange_ensure", _wrap_ContinuousColorRange_ensure, METH_VARARGS, (char *)"\n"
		"ensure(PyObject const * v, bool inclusive=True) -> PyObject\n"
		"ContinuousColorRange_ensure(ContinuousColorRange self, PyObject const * v) -> PyObject *\n"
		""},
	 { (char *)"ContinuousColorRange_containsVar", _wrap_ContinuousColorRange_containsVar, METH_VARARGS, (char *)"\n"
		"containsVar(PyObject const * v, bool inclusive=True) -> bool\n"
		"ContinuousColorRange_containsVar(ContinuousColorRange self, PyObject const * v) -> bool\n"
		""},
	 { (char *)"ContinuousColorRange_containsColor", _wrap_ContinuousColorRange_containsColor, METH_VARARGS, (char *)"\n"
		"containsColor(Color clr, bool inclusive=True) -> bool\n"
		"ContinuousColorRange_containsColor(ContinuousColorRange self, Color clr) -> bool\n"
		""},
	 { (char *)"ContinuousColorRange_containsRange", _wrap_ContinuousColorRange_containsRange, METH_VARARGS, (char *)"\n"
		"containsRange(ColorRange v, bool inclusive=True) -> bool\n"
		"ContinuousColorRange_containsRange(ContinuousColorRange self, ColorRange v) -> bool\n"
		""},
	 { (char *)"ContinuousColorRange_impliedValue", _wrap_ContinuousColorRange_impliedValue, METH_VARARGS, (char *)"ContinuousColorRange_impliedValue(ContinuousColorRange self, PyObject const * v) -> Color"},
	 { (char *)"delete_ContinuousColorRange", _wrap_delete_ContinuousColorRange, METH_VARARGS, (char *)"delete_ContinuousColorRange(ContinuousColorRange self)"},
	 { (char *)"ContinuousColorRange_swigregister", ContinuousColorRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColorPalette", _wrap_new_ColorPalette, METH_VARARGS, (char *)"new_ColorPalette() -> ColorPalette"},
	 { (char *)"ColorPalette_item", _wrap_ColorPalette_item, METH_VARARGS, (char *)"\n"
		"item(quint32 raw) -> Color\n"
		"ColorPalette_item(ColorPalette self, std::string const & name) -> Color\n"
		""},
	 { (char *)"ColorPalette_itemByOrder", _wrap_ColorPalette_itemByOrder, METH_VARARGS, (char *)"ColorPalette_itemByOrder(ColorPalette self, quint32 index) -> Color"},
	 { (char *)"ColorPalette_color", _wrap_ColorPalette_color, METH_VARARGS, (char *)"ColorPalette_color(ColorPalette self, int index) -> Color"},
	 { (char *)"ColorPalette_add", _wrap_ColorPalette_add, METH_VARARGS, (char *)"ColorPalette_add(ColorPalette self, Color pyColor)"},
	 { (char *)"ColorPalette_remove", _wrap_ColorPalette_remove, METH_VARARGS, (char *)"ColorPalette_remove(ColorPalette self, std::string const & name)"},
	 { (char *)"ColorPalette_clear", _wrap_ColorPalette_clear, METH_VARARGS, (char *)"ColorPalette_clear(ColorPalette self)"},
	 { (char *)"ColorPalette_containsColor", _wrap_ColorPalette_containsColor, METH_VARARGS, (char *)"\n"
		"containsColor(Color clr, bool inclusive=True) -> bool\n"
		"ColorPalette_containsColor(ColorPalette self, Color clr) -> bool\n"
		""},
	 { (char *)"ColorPalette_containsRange", _wrap_ColorPalette_containsRange, METH_VARARGS, (char *)"\n"
		"containsRange(ColorRange v, bool inclusive=True) -> bool\n"
		"ColorPalette_containsRange(ColorPalette self, ColorRange v) -> bool\n"
		""},
	 { (char *)"ColorPalette_count", _wrap_ColorPalette_count, METH_VARARGS, (char *)"ColorPalette_count(ColorPalette self) -> quint32"},
	 { (char *)"ColorPalette_valueAt", _wrap_ColorPalette_valueAt, METH_VARARGS, (char *)"ColorPalette_valueAt(ColorPalette self, quint32 index, ItemRange rng) -> Color"},
	 { (char *)"ColorPalette_gotoIndex", _wrap_ColorPalette_gotoIndex, METH_VARARGS, (char *)"ColorPalette_gotoIndex(ColorPalette self, qint32 index, qint32 step) -> qint32"},
	 { (char *)"delete_ColorPalette", _wrap_delete_ColorPalette, METH_VARARGS, (char *)"delete_ColorPalette(ColorPalette self)"},
	 { (char *)"ColorPalette_swigregister", ColorPalette_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeInterval", _wrap_new_TimeInterval, METH_VARARGS, (char *)"\n"
		"TimeInterval(IlwisTypes tp)\n"
		"TimeInterval()\n"
		"TimeInterval(PyObject const * beg, PyObject const * end, std::string step, IlwisTypes tp)\n"
		"TimeInterval(PyObject const * beg, PyObject const * end, std::string step)\n"
		"new_TimeInterval(PyObject const * beg, PyObject const * end) -> TimeInterval\n"
		""},
	 { (char *)"TimeInterval_begin", _wrap_TimeInterval_begin, METH_VARARGS, (char *)"\n"
		"begin() -> PyObject\n"
		"TimeInterval_begin(TimeInterval self, PyObject const * t)\n"
		""},
	 { (char *)"TimeInterval_end", _wrap_TimeInterval_end, METH_VARARGS, (char *)"\n"
		"end() -> PyObject\n"
		"TimeInterval_end(TimeInterval self, PyObject const * t)\n"
		""},
	 { (char *)"TimeInterval_contains", _wrap_TimeInterval_contains, METH_VARARGS, (char *)"\n"
		"contains(std::string const & value, bool inclusive=True) -> bool\n"
		"contains(std::string const & value) -> bool\n"
		"contains(PyObject const * value, bool inclusive=True) -> bool\n"
		"TimeInterval_contains(TimeInterval self, PyObject const * value) -> bool\n"
		""},
	 { (char *)"TimeInterval_clone", _wrap_TimeInterval_clone, METH_VARARGS, (char *)"TimeInterval_clone(TimeInterval self) -> TimeInterval"},
	 { (char *)"delete_TimeInterval", _wrap_delete_TimeInterval, METH_VARARGS, (char *)"delete_TimeInterval(TimeInterval self)"},
	 { (char *)"TimeInterval_swigregister", TimeInterval_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DataDefinition", _wrap_delete_DataDefinition, METH_VARARGS, (char *)"delete_DataDefinition(DataDefinition self)"},
	 { (char *)"new_DataDefinition", _wrap_new_DataDefinition, METH_VARARGS, (char *)"\n"
		"DataDefinition()\n"
		"DataDefinition(Domain dm, Range rng=None)\n"
		"DataDefinition(Domain dm)\n"
		"new_DataDefinition(DataDefinition datdef) -> DataDefinition\n"
		""},
	 { (char *)"DataDefinition___str__", _wrap_DataDefinition___str__, METH_VARARGS, (char *)"DataDefinition___str__(DataDefinition self) -> std::string"},
	 { (char *)"DataDefinition___bool__", _wrap_DataDefinition___bool__, METH_VARARGS, (char *)"DataDefinition___bool__(DataDefinition self) -> bool"},
	 { (char *)"DataDefinition_isCompatibleWith", _wrap_DataDefinition_isCompatibleWith, METH_VARARGS, (char *)"DataDefinition_isCompatibleWith(DataDefinition self, DataDefinition datdef) -> bool"},
	 { (char *)"DataDefinition_merge", _wrap_DataDefinition_merge, METH_VARARGS, (char *)"DataDefinition_merge(DataDefinition datdef1, DataDefinition datdef2) -> DataDefinition"},
	 { (char *)"DataDefinition___set__", _wrap_DataDefinition___set__, METH_VARARGS, (char *)"DataDefinition___set__(DataDefinition self, DataDefinition datdef) -> DataDefinition"},
	 { (char *)"DataDefinition_range", _wrap_DataDefinition_range, METH_VARARGS, (char *)"\n"
		"range(Range rng)\n"
		"DataDefinition_range(DataDefinition self) -> Range\n"
		""},
	 { (char *)"DataDefinition_domain", _wrap_DataDefinition_domain, METH_VARARGS, (char *)"\n"
		"domain(Domain dm)\n"
		"DataDefinition_domain(DataDefinition self) -> Domain\n"
		""},
	 { (char *)"DataDefinition_swigregister", DataDefinition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ColumnDefinition", _wrap_new_ColumnDefinition, METH_VARARGS, (char *)"\n"
		"ColumnDefinition()\n"
		"ColumnDefinition(ColumnDefinition coldef, quint32 index)\n"
		"ColumnDefinition(std::string const & name, DataDefinition datdef, quint64 colindex)\n"
		"ColumnDefinition(ColumnDefinition coldef)\n"
		"new_ColumnDefinition(std::string const & nm, Domain dom, quint64 colindex) -> ColumnDefinition\n"
		""},
	 { (char *)"delete_ColumnDefinition", _wrap_delete_ColumnDefinition, METH_VARARGS, (char *)"delete_ColumnDefinition(ColumnDefinition self)"},
	 { (char *)"ColumnDefinition_datadef", _wrap_ColumnDefinition_datadef, METH_VARARGS, (char *)"ColumnDefinition_datadef(ColumnDefinition self) -> DataDefinition"},
	 { (char *)"ColumnDefinition_columnindex", _wrap_ColumnDefinition_columnindex, METH_VARARGS, (char *)"\n"
		"columnindex(quint64 idx)\n"
		"ColumnDefinition_columnindex(ColumnDefinition self) -> quint64\n"
		""},
	 { (char *)"ColumnDefinition_isChanged", _wrap_ColumnDefinition_isChanged, METH_VARARGS, (char *)"ColumnDefinition_isChanged(ColumnDefinition self) -> bool"},
	 { (char *)"ColumnDefinition_changed", _wrap_ColumnDefinition_changed, METH_VARARGS, (char *)"ColumnDefinition_changed(ColumnDefinition self, bool yesno)"},
	 { (char *)"ColumnDefinition___str__", _wrap_ColumnDefinition___str__, METH_VARARGS, (char *)"ColumnDefinition___str__(ColumnDefinition self) -> std::string"},
	 { (char *)"ColumnDefinition___bool__", _wrap_ColumnDefinition___bool__, METH_VARARGS, (char *)"ColumnDefinition___bool__(ColumnDefinition self) -> bool"},
	 { (char *)"ColumnDefinition_swigregister", ColumnDefinition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DomainItem", _wrap_new_DomainItem, METH_VARARGS, (char *)"\n"
		"DomainItem()\n"
		"new_DomainItem(Ilwis::DomainItem * ilwItem) -> DomainItem\n"
		""},
	 { (char *)"DomainItem___bool__", _wrap_DomainItem___bool__, METH_VARARGS, (char *)"DomainItem___bool__(DomainItem self) -> bool"},
	 { (char *)"DomainItem___str__", _wrap_DomainItem___str__, METH_VARARGS, (char *)"DomainItem___str__(DomainItem self) -> std::string"},
	 { (char *)"DomainItem_ilwisType", _wrap_DomainItem_ilwisType, METH_VARARGS, (char *)"DomainItem_ilwisType(DomainItem self) -> IlwisTypes"},
	 { (char *)"DomainItem_clone", _wrap_DomainItem_clone, METH_VARARGS, (char *)"DomainItem_clone(DomainItem self) -> DomainItem"},
	 { (char *)"DomainItem_raw", _wrap_DomainItem_raw, METH_VARARGS, (char *)"\n"
		"raw(quint32 rw)\n"
		"DomainItem_raw(DomainItem self) -> quint32\n"
		""},
	 { (char *)"delete_DomainItem", _wrap_delete_DomainItem, METH_VARARGS, (char *)"delete_DomainItem(DomainItem self)"},
	 { (char *)"DomainItem_swigregister", DomainItem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedIdentifier", _wrap_new_IndexedIdentifier, METH_VARARGS, (char *)"\n"
		"IndexedIdentifier()\n"
		"IndexedIdentifier(std::string const & label, quint32 ind=0, qint32 cnt)\n"
		"IndexedIdentifier(std::string const & label, quint32 ind=0)\n"
		"IndexedIdentifier(std::string const & label)\n"
		"new_IndexedIdentifier(Ilwis::DomainItem * ilwItem) -> IndexedIdentifier\n"
		""},
	 { (char *)"IndexedIdentifier_prefix", _wrap_IndexedIdentifier_prefix, METH_VARARGS, (char *)"IndexedIdentifier_prefix(IndexedIdentifier self) -> std::string"},
	 { (char *)"IndexedIdentifier_setPrefix", _wrap_IndexedIdentifier_setPrefix, METH_VARARGS, (char *)"IndexedIdentifier_setPrefix(IndexedIdentifier self, std::string const & name)"},
	 { (char *)"IndexedIdentifier___eq__", _wrap_IndexedIdentifier___eq__, METH_VARARGS, (char *)"IndexedIdentifier___eq__(IndexedIdentifier self, IndexedIdentifier item) -> bool"},
	 { (char *)"delete_IndexedIdentifier", _wrap_delete_IndexedIdentifier, METH_VARARGS, (char *)"delete_IndexedIdentifier(IndexedIdentifier self)"},
	 { (char *)"IndexedIdentifier_swigregister", IndexedIdentifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NamedIdentifier", _wrap_new_NamedIdentifier, METH_VARARGS, (char *)"\n"
		"NamedIdentifier()\n"
		"NamedIdentifier(std::string const & name, quint32 rawvalue)\n"
		"NamedIdentifier(std::string const & name)\n"
		"new_NamedIdentifier(Ilwis::DomainItem * ilwItem) -> NamedIdentifier\n"
		""},
	 { (char *)"NamedIdentifier_setName", _wrap_NamedIdentifier_setName, METH_VARARGS, (char *)"NamedIdentifier_setName(NamedIdentifier self, std::string const & name)"},
	 { (char *)"NamedIdentifier___eq__", _wrap_NamedIdentifier___eq__, METH_VARARGS, (char *)"NamedIdentifier___eq__(NamedIdentifier self, NamedIdentifier item) -> bool"},
	 { (char *)"delete_NamedIdentifier", _wrap_delete_NamedIdentifier, METH_VARARGS, (char *)"delete_NamedIdentifier(NamedIdentifier self)"},
	 { (char *)"NamedIdentifier_swigregister", NamedIdentifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ThematicItem", _wrap_new_ThematicItem, METH_VARARGS, (char *)"\n"
		"ThematicItem()\n"
		"ThematicItem(Ilwis::DomainItem * ilwItem)\n"
		"ThematicItem(PyObject * tup, quint32 rawValue)\n"
		"new_ThematicItem(PyObject * tup) -> ThematicItem\n"
		""},
	 { (char *)"ThematicItem_description", _wrap_ThematicItem_description, METH_VARARGS, (char *)"\n"
		"description() -> std::string\n"
		"ThematicItem_description(ThematicItem self, std::string & descr)\n"
		""},
	 { (char *)"ThematicItem_code", _wrap_ThematicItem_code, METH_VARARGS, (char *)"\n"
		"code() -> std::string\n"
		"ThematicItem_code(ThematicItem self, std::string & code)\n"
		""},
	 { (char *)"delete_ThematicItem", _wrap_delete_ThematicItem, METH_VARARGS, (char *)"delete_ThematicItem(ThematicItem self)"},
	 { (char *)"ThematicItem_swigregister", ThematicItem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Interval", _wrap_new_Interval, METH_VARARGS, (char *)"\n"
		"Interval()\n"
		"new_Interval(std::string const & label, NumericRange nr) -> Interval\n"
		""},
	 { (char *)"Interval_isOrdered", _wrap_Interval_isOrdered, METH_VARARGS, (char *)"Interval_isOrdered(Interval self) -> bool"},
	 { (char *)"Interval_range", _wrap_Interval_range, METH_VARARGS, (char *)"\n"
		"range() -> NumericRange\n"
		"Interval_range(Interval self, NumericRange nr)\n"
		""},
	 { (char *)"delete_Interval", _wrap_delete_Interval, METH_VARARGS, (char *)"delete_Interval(Interval self)"},
	 { (char *)"Interval_swigregister", Interval_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VertexIterator", _wrap_new_VertexIterator, METH_VARARGS, (char *)"\n"
		"VertexIterator()\n"
		"VertexIterator(Geometry geom)\n"
		"new_VertexIterator(std::string const & wkt) -> VertexIterator\n"
		""},
	 { (char *)"delete_VertexIterator", _wrap_delete_VertexIterator, METH_VARARGS, (char *)"delete_VertexIterator(VertexIterator self)"},
	 { (char *)"VertexIterator___bool__", _wrap_VertexIterator___bool__, METH_VARARGS, (char *)"VertexIterator___bool__(VertexIterator self) -> bool"},
	 { (char *)"VertexIterator___str__", _wrap_VertexIterator___str__, METH_VARARGS, (char *)"VertexIterator___str__(VertexIterator self) -> std::string"},
	 { (char *)"VertexIterator___iter__", _wrap_VertexIterator___iter__, METH_VARARGS, (char *)"VertexIterator___iter__(VertexIterator self) -> VertexIterator"},
	 { (char *)"VertexIterator___next__", _wrap_VertexIterator___next__, METH_VARARGS, (char *)"VertexIterator___next__(VertexIterator self) -> Coordinate"},
	 { (char *)"VertexIterator___add__", _wrap_VertexIterator___add__, METH_VARARGS, (char *)"VertexIterator___add__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___radd__", _wrap_VertexIterator___radd__, METH_VARARGS, (char *)"VertexIterator___radd__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___iadd__", _wrap_VertexIterator___iadd__, METH_VARARGS, (char *)"VertexIterator___iadd__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___sub__", _wrap_VertexIterator___sub__, METH_VARARGS, (char *)"VertexIterator___sub__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___rsub__", _wrap_VertexIterator___rsub__, METH_VARARGS, (char *)"VertexIterator___rsub__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___isub__", _wrap_VertexIterator___isub__, METH_VARARGS, (char *)"VertexIterator___isub__(VertexIterator self, int n) -> VertexIterator"},
	 { (char *)"VertexIterator___getitem__", _wrap_VertexIterator___getitem__, METH_VARARGS, (char *)"VertexIterator___getitem__(VertexIterator self, quint32 linearpos) -> Coordinate"},
	 { (char *)"VertexIterator_current", _wrap_VertexIterator_current, METH_VARARGS, (char *)"VertexIterator_current(VertexIterator self) -> Coordinate"},
	 { (char *)"VertexIterator___eq__", _wrap_VertexIterator___eq__, METH_VARARGS, (char *)"VertexIterator___eq__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator___ne__", _wrap_VertexIterator___ne__, METH_VARARGS, (char *)"VertexIterator___ne__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator___lt__", _wrap_VertexIterator___lt__, METH_VARARGS, (char *)"VertexIterator___lt__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator___gt__", _wrap_VertexIterator___gt__, METH_VARARGS, (char *)"VertexIterator___gt__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator___le__", _wrap_VertexIterator___le__, METH_VARARGS, (char *)"VertexIterator___le__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator___ge__", _wrap_VertexIterator___ge__, METH_VARARGS, (char *)"VertexIterator___ge__(VertexIterator self, VertexIterator other) -> bool"},
	 { (char *)"VertexIterator_nextSubGeometry", _wrap_VertexIterator_nextSubGeometry, METH_VARARGS, (char *)"VertexIterator_nextSubGeometry(VertexIterator self) -> bool"},
	 { (char *)"VertexIterator_isInteriorVertex", _wrap_VertexIterator_isInteriorVertex, METH_VARARGS, (char *)"VertexIterator_isInteriorVertex(VertexIterator self) -> bool"},
	 { (char *)"VertexIterator_begin", _wrap_VertexIterator_begin, METH_VARARGS, (char *)"VertexIterator_begin(VertexIterator self) -> VertexIterator"},
	 { (char *)"VertexIterator_end", _wrap_VertexIterator_end, METH_VARARGS, (char *)"VertexIterator_end(VertexIterator self) -> VertexIterator"},
	 { (char *)"VertexIterator_swigregister", VertexIterator_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_pythonapi__ColorDomainTo_p_pythonapi__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Domain *)  ((pythonapi::ColorDomain *) x));
}
static void *_p_pythonapi__TextDomainTo_p_pythonapi__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Domain *)  ((pythonapi::TextDomain *) x));
}
static void *_p_pythonapi__NumericDomainTo_p_pythonapi__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Domain *)  ((pythonapi::NumericDomain *) x));
}
static void *_p_pythonapi__ItemDomainTo_p_pythonapi__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Domain *)  ((pythonapi::ItemDomain *) x));
}
static void *_p_pythonapi__TimeDomainTo_p_pythonapi__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Domain *)  ((pythonapi::TimeDomain *) x));
}
static void *_p_pythonapi__TimeIntervalTo_p_pythonapi__NumericRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::NumericRange *)  ((pythonapi::TimeInterval *) x));
}
static void *_p_pythonapi__CoverageTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *)  ((pythonapi::Coverage *) x));
}
static void *_p_pythonapi__FeatureCoverageTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Coverage *) ((pythonapi::FeatureCoverage *) x));
}
static void *_p_pythonapi__RasterCoverageTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Coverage *) ((pythonapi::RasterCoverage *) x));
}
static void *_p_pythonapi__CoordinateSystemTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *)  ((pythonapi::CoordinateSystem *) x));
}
static void *_p_pythonapi__TableTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *)  ((pythonapi::Table *) x));
}
static void *_p_pythonapi__GeoReferenceTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *)  ((pythonapi::GeoReference *) x));
}
static void *_p_pythonapi__DomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *)  ((pythonapi::Domain *) x));
}
static void *_p_pythonapi__ColorDomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Domain *) ((pythonapi::ColorDomain *) x));
}
static void *_p_pythonapi__TextDomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Domain *) ((pythonapi::TextDomain *) x));
}
static void *_p_pythonapi__NumericDomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Domain *) ((pythonapi::NumericDomain *) x));
}
static void *_p_pythonapi__ItemDomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Domain *) ((pythonapi::ItemDomain *) x));
}
static void *_p_pythonapi__TimeDomainTo_p_pythonapi__IlwisObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::IlwisObject *) (pythonapi::Domain *) ((pythonapi::TimeDomain *) x));
}
static void *_p_pythonapi__FeatureCoverageTo_p_pythonapi__Coverage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Coverage *)  ((pythonapi::FeatureCoverage *) x));
}
static void *_p_pythonapi__RasterCoverageTo_p_pythonapi__Coverage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Coverage *)  ((pythonapi::RasterCoverage *) x));
}
static void *_p_pythonapi__ThematicItemTo_p_pythonapi__DomainItem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::DomainItem *) (pythonapi::NamedIdentifier *) ((pythonapi::ThematicItem *) x));
}
static void *_p_pythonapi__IndexedIdentifierTo_p_pythonapi__DomainItem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::DomainItem *)  ((pythonapi::IndexedIdentifier *) x));
}
static void *_p_pythonapi__NamedIdentifierTo_p_pythonapi__DomainItem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::DomainItem *)  ((pythonapi::NamedIdentifier *) x));
}
static void *_p_pythonapi__IntervalTo_p_pythonapi__DomainItem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::DomainItem *)  ((pythonapi::Interval *) x));
}
static void *_p_pythonapi__NumericItemRangeTo_p_pythonapi__ItemRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ItemRange *)  ((pythonapi::NumericItemRange *) x));
}
static void *_p_pythonapi__IndexedItemRangeTo_p_pythonapi__ItemRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ItemRange *)  ((pythonapi::IndexedItemRange *) x));
}
static void *_p_pythonapi__NamedItemRangeTo_p_pythonapi__ItemRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ItemRange *)  ((pythonapi::NamedItemRange *) x));
}
static void *_p_pythonapi__ThematicRangeTo_p_pythonapi__ItemRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ItemRange *)  ((pythonapi::ThematicRange *) x));
}
static void *_p_pythonapi__ColorPaletteTo_p_pythonapi__ItemRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ItemRange *)  ((pythonapi::ColorPalette *) x));
}
static void *_p_pythonapi__ItemRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *)  ((pythonapi::ItemRange *) x));
}
static void *_p_pythonapi__NumericItemRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ItemRange *) ((pythonapi::NumericItemRange *) x));
}
static void *_p_pythonapi__IndexedItemRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ItemRange *) ((pythonapi::IndexedItemRange *) x));
}
static void *_p_pythonapi__NamedItemRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ItemRange *) ((pythonapi::NamedItemRange *) x));
}
static void *_p_pythonapi__NumericRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *)  ((pythonapi::NumericRange *) x));
}
static void *_p_pythonapi__ThematicRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ItemRange *) ((pythonapi::ThematicRange *) x));
}
static void *_p_pythonapi__ColorPaletteTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ItemRange *) ((pythonapi::ColorPalette *) x));
}
static void *_p_pythonapi__TimeIntervalTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::NumericRange *) ((pythonapi::TimeInterval *) x));
}
static void *_p_pythonapi__ColorRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *)  ((pythonapi::ColorRange *) x));
}
static void *_p_pythonapi__ContinuousColorRangeTo_p_pythonapi__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Range *) (pythonapi::ColorRange *) ((pythonapi::ContinuousColorRange *) x));
}
static void *_p_pythonapi__CollectionTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::Collection *) x));
}
static void *_p_pythonapi__CatalogTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::Catalog *) x));
}
static void *_p_pythonapi__RangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::Range *) x));
}
static void *_p_pythonapi__DomainItemTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::DomainItem *) x));
}
static void *_p_pythonapi__FeatureTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::Feature *) x));
}
static void *_p_pythonapi__TimeIntervalTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::NumericRange *) ((pythonapi::TimeInterval *) x));
}
static void *_p_pythonapi__IntervalTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::DomainItem *) ((pythonapi::Interval *) x));
}
static void *_p_pythonapi__GeoReferenceTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *) ((pythonapi::GeoReference *) x));
}
static void *_p_pythonapi__ItemDomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Domain *) ((pythonapi::ItemDomain *) x));
}
static void *_p_pythonapi__NumericDomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Domain *) ((pythonapi::NumericDomain *) x));
}
static void *_p_pythonapi__TimeDomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Domain *) ((pythonapi::TimeDomain *) x));
}
static void *_p_pythonapi__ColorRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *) ((pythonapi::ColorRange *) x));
}
static void *_p_pythonapi__ContinuousColorRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ColorRange *) ((pythonapi::ContinuousColorRange *) x));
}
static void *_p_pythonapi__IndexedIdentifierTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::DomainItem *) ((pythonapi::IndexedIdentifier *) x));
}
static void *_p_pythonapi__NamedIdentifierTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::DomainItem *) ((pythonapi::NamedIdentifier *) x));
}
static void *_p_pythonapi__ThematicItemTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::DomainItem *)(pythonapi::NamedIdentifier *) ((pythonapi::ThematicItem *) x));
}
static void *_p_pythonapi__TableTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *) ((pythonapi::Table *) x));
}
static void *_p_pythonapi__DomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *) ((pythonapi::Domain *) x));
}
static void *_p_pythonapi__CoordinateSystemTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *) ((pythonapi::CoordinateSystem *) x));
}
static void *_p_pythonapi__ColorDomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Domain *) ((pythonapi::ColorDomain *) x));
}
static void *_p_pythonapi__TextDomainTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Domain *) ((pythonapi::TextDomain *) x));
}
static void *_p_pythonapi__NumericRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *) ((pythonapi::NumericRange *) x));
}
static void *_p_pythonapi__ThematicRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ItemRange *) ((pythonapi::ThematicRange *) x));
}
static void *_p_pythonapi__ColorPaletteTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ItemRange *) ((pythonapi::ColorPalette *) x));
}
static void *_p_pythonapi__RasterCoverageTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Coverage *) ((pythonapi::RasterCoverage *) x));
}
static void *_p_pythonapi__FeatureCoverageTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *)(pythonapi::Coverage *) ((pythonapi::FeatureCoverage *) x));
}
static void *_p_pythonapi__CoverageTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::IlwisObject *) ((pythonapi::Coverage *) x));
}
static void *_p_pythonapi__ItemRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *) ((pythonapi::ItemRange *) x));
}
static void *_p_pythonapi__NumericItemRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ItemRange *) ((pythonapi::NumericItemRange *) x));
}
static void *_p_pythonapi__IndexedItemRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ItemRange *) ((pythonapi::IndexedItemRange *) x));
}
static void *_p_pythonapi__NamedItemRangeTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *) (pythonapi::Range *)(pythonapi::ItemRange *) ((pythonapi::NamedItemRange *) x));
}
static void *_p_pythonapi__GeometryTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::Geometry *) x));
}
static void *_p_pythonapi__IlwisObjectTo_p_pythonapi__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::Object *)  ((pythonapi::IlwisObject *) x));
}
static void *_p_pythonapi__ColorPaletteTo_p_pythonapi__ColorRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ColorRange *)  ((pythonapi::ColorPalette *) x));
}
static void *_p_pythonapi__ContinuousColorRangeTo_p_pythonapi__ColorRange(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::ColorRange *)  ((pythonapi::ContinuousColorRange *) x));
}
static void *_p_pythonapi__ThematicItemTo_p_pythonapi__NamedIdentifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pythonapi::NamedIdentifier *)  ((pythonapi::ThematicItem *) x));
}
static swig_type_info _swigt__p_Ilwis__ContainerStatisticsT_double_t = {"_p_Ilwis__ContainerStatisticsT_double_t", "Ilwis::ContainerStatistics< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__DomainItem = {"_p_Ilwis__DomainItem", "Ilwis::DomainItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t = {"_p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t", "Ilwis::IlwisData< Ilwis::CoordinateSystem > *|Ilwis::ICoordinateSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__Coverage_t = {"_p_Ilwis__IlwisDataT_Ilwis__Coverage_t", "Ilwis::IlwisData< Ilwis::Coverage > *|Ilwis::ICoverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__Domain_t = {"_p_Ilwis__IlwisDataT_Ilwis__Domain_t", "Ilwis::IlwisData< Ilwis::Domain > *|Ilwis::IDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t = {"_p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t", "Ilwis::IlwisData< Ilwis::FeatureCoverage > *|Ilwis::IFeatureCoverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__GeoReference_t = {"_p_Ilwis__IlwisDataT_Ilwis__GeoReference_t", "Ilwis::IlwisData< Ilwis::GeoReference > *|Ilwis::IGeoReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t = {"_p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t", "Ilwis::IIlwisObject *|Ilwis::IlwisData< Ilwis::IlwisObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t = {"_p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t", "Ilwis::IlwisData< Ilwis::NumericDomain > *|Ilwis::INumericDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t = {"_p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t", "Ilwis::IlwisData< Ilwis::RasterCoverage > *|Ilwis::IRasterCoverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__IlwisDataT_Ilwis__Table_t = {"_p_Ilwis__IlwisDataT_Ilwis__Table_t", "Ilwis::ITable *|Ilwis::IlwisData< Ilwis::Table > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__NumericRange = {"_p_Ilwis__NumericRange", "Ilwis::NumericRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ilwis__PixelIterator = {"_p_Ilwis__PixelIterator", "Ilwis::PixelIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QSharedPointerT_Ilwis__DomainItem_t = {"_p_QSharedPointerT_Ilwis__DomainItem_t", "QSharedPointer< Ilwis::DomainItem > *|Ilwis::SPDomainItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__object = {"_p__object", "_object *|PyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bufferinfo = {"_p_bufferinfo", "bufferinfo *|Py_buffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geos__geom__Geometry = {"_p_geos__geom__Geometry", "geos::geom::Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|qint32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "qint64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t = {"_p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t", "pythonapi::Envelope *|pythonapi::BoxTemplate< Ilwis::Coordinate,pythonapi::Coordinate,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t = {"_p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t", "pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< int >,unsigned int > *|pythonapi::BoxTemplate< Ilwis::Location< int,false >,pythonapi::PixelTemplate< qint32 >,unsigned int > *|pythonapi::Box *|pythonapi::BoxTemplate< Ilwis::Location< qint32,false >,pythonapi::PixelTemplate< qint32 >,quint32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Catalog = {"_p_pythonapi__Catalog", "pythonapi::Catalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Collection = {"_p_pythonapi__Collection", "pythonapi::Collection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Color = {"_p_pythonapi__Color", "pythonapi::Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColorDomain = {"_p_pythonapi__ColorDomain", "pythonapi::ColorDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColorModelNS = {"_p_pythonapi__ColorModelNS", "pythonapi::ColorModelNS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColorModelNS__Value = {"_p_pythonapi__ColorModelNS__Value", "enum pythonapi::ColorModelNS::Value *|pythonapi::ColorModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColorPalette = {"_p_pythonapi__ColorPalette", "pythonapi::ColorPalette *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColorRange = {"_p_pythonapi__ColorRange", "pythonapi::ColorRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ColumnDefinition = {"_p_pythonapi__ColumnDefinition", "pythonapi::ColumnDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ContainerStatisticsT_double_t = {"_p_pythonapi__ContainerStatisticsT_double_t", "pythonapi::NumericStatistics *|pythonapi::ContainerStatistics< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ContinuousColorRange = {"_p_pythonapi__ContinuousColorRange", "pythonapi::ContinuousColorRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Coordinate = {"_p_pythonapi__Coordinate", "pythonapi::Coordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__CoordinateSystem = {"_p_pythonapi__CoordinateSystem", "pythonapi::CoordinateSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Coverage = {"_p_pythonapi__Coverage", "pythonapi::Coverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__DataDefinition = {"_p_pythonapi__DataDefinition", "pythonapi::DataDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Domain = {"_p_pythonapi__Domain", "pythonapi::Domain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__DomainItem = {"_p_pythonapi__DomainItem", "pythonapi::DomainItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Engine = {"_p_pythonapi__Engine", "pythonapi::Engine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Feature = {"_p_pythonapi__Feature", "pythonapi::Feature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__FeatureCoverage = {"_p_pythonapi__FeatureCoverage", "pythonapi::FeatureCoverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__FeatureIterator = {"_p_pythonapi__FeatureIterator", "pythonapi::FeatureIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__FlowVal = {"_p_pythonapi__FlowVal", "pythonapi::FlowVal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__FlowVal__Value = {"_p_pythonapi__FlowVal__Value", "enum pythonapi::FlowVal::Value *|pythonapi::Flow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__GeoReference = {"_p_pythonapi__GeoReference", "pythonapi::GeoReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Geometry = {"_p_pythonapi__Geometry", "pythonapi::Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__IOOptions = {"_p_pythonapi__IOOptions", "pythonapi::IOOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__IlwisObject = {"_p_pythonapi__IlwisObject", "pythonapi::IlwisObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__IndexedIdentifier = {"_p_pythonapi__IndexedIdentifier", "pythonapi::IndexedIdentifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__IndexedItemRange = {"_p_pythonapi__IndexedItemRange", "pythonapi::IndexedItemRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Interval = {"_p_pythonapi__Interval", "pythonapi::Interval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ItemDomain = {"_p_pythonapi__ItemDomain", "pythonapi::ItemDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ItemRange = {"_p_pythonapi__ItemRange", "pythonapi::ItemRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__NamedIdentifier = {"_p_pythonapi__NamedIdentifier", "pythonapi::NamedIdentifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__NamedItemRange = {"_p_pythonapi__NamedItemRange", "pythonapi::NamedItemRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__NumericDomain = {"_p_pythonapi__NumericDomain", "pythonapi::NumericDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__NumericItemRange = {"_p_pythonapi__NumericItemRange", "pythonapi::NumericItemRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__NumericRange = {"_p_pythonapi__NumericRange", "pythonapi::NumericRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Object = {"_p_pythonapi__Object", "pythonapi::Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__PixelIterator = {"_p_pythonapi__PixelIterator", "pythonapi::PixelIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__PixelTemplateT_double_t = {"_p_pythonapi__PixelTemplateT_double_t", "pythonapi::PixelD *|pythonapi::PixelTemplate< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__PixelTemplateT_int_t = {"_p_pythonapi__PixelTemplateT_int_t", "pythonapi::PixelTemplate< qint32 > *|pythonapi::PixelTemplate< int > *|pythonapi::Pixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Properties = {"_p_pythonapi__Properties", "pythonapi::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Properties__Values = {"_p_pythonapi__Properties__Values", "pythonapi::PropertySets *|enum pythonapi::Properties::Values *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Range = {"_p_pythonapi__Range", "pythonapi::Range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t = {"_p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t", "pythonapi::RangeIterator< double,pythonapi::NumericRange,double,Ilwis::NumericRange > *|pythonapi::NumericRangeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__RasterCoverage = {"_p_pythonapi__RasterCoverage", "pythonapi::RasterCoverage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__SizeTemplateT_double_t = {"_p_pythonapi__SizeTemplateT_double_t", "pythonapi::SizeD *|pythonapi::SizeTemplate< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__SizeTemplateT_unsigned_int_t = {"_p_pythonapi__SizeTemplateT_unsigned_int_t", "pythonapi::Size *|pythonapi::SizeTemplate< quint32 > *|pythonapi::SizeTemplate< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__Table = {"_p_pythonapi__Table", "pythonapi::Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__TextDomain = {"_p_pythonapi__TextDomain", "pythonapi::TextDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ThematicItem = {"_p_pythonapi__ThematicItem", "pythonapi::ThematicItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__ThematicRange = {"_p_pythonapi__ThematicRange", "pythonapi::ThematicRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__TimeDomain = {"_p_pythonapi__TimeDomain", "pythonapi::TimeDomain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__TimeInterval = {"_p_pythonapi__TimeInterval", "pythonapi::TimeInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__VertexIterator = {"_p_pythonapi__VertexIterator", "pythonapi::VertexIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pythonapi__it = {"_p_pythonapi__it", "pythonapi::it *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "qint16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|qint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|quint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "quint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "quint64 *|unsigned long long *|IlwisTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "quint16 *|unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Ilwis__ContainerStatisticsT_double_t,
  &_swigt__p_Ilwis__DomainItem,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__Coverage_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__Domain_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__GeoReference_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t,
  &_swigt__p_Ilwis__IlwisDataT_Ilwis__Table_t,
  &_swigt__p_Ilwis__NumericRange,
  &_swigt__p_Ilwis__PixelIterator,
  &_swigt__p_QSharedPointerT_Ilwis__DomainItem_t,
  &_swigt__p__object,
  &_swigt__p_bufferinfo,
  &_swigt__p_char,
  &_swigt__p_geos__geom__Geometry,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,
  &_swigt__p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,
  &_swigt__p_pythonapi__Catalog,
  &_swigt__p_pythonapi__Collection,
  &_swigt__p_pythonapi__Color,
  &_swigt__p_pythonapi__ColorDomain,
  &_swigt__p_pythonapi__ColorModelNS,
  &_swigt__p_pythonapi__ColorModelNS__Value,
  &_swigt__p_pythonapi__ColorPalette,
  &_swigt__p_pythonapi__ColorRange,
  &_swigt__p_pythonapi__ColumnDefinition,
  &_swigt__p_pythonapi__ContainerStatisticsT_double_t,
  &_swigt__p_pythonapi__ContinuousColorRange,
  &_swigt__p_pythonapi__Coordinate,
  &_swigt__p_pythonapi__CoordinateSystem,
  &_swigt__p_pythonapi__Coverage,
  &_swigt__p_pythonapi__DataDefinition,
  &_swigt__p_pythonapi__Domain,
  &_swigt__p_pythonapi__DomainItem,
  &_swigt__p_pythonapi__Engine,
  &_swigt__p_pythonapi__Feature,
  &_swigt__p_pythonapi__FeatureCoverage,
  &_swigt__p_pythonapi__FeatureIterator,
  &_swigt__p_pythonapi__FlowVal,
  &_swigt__p_pythonapi__FlowVal__Value,
  &_swigt__p_pythonapi__GeoReference,
  &_swigt__p_pythonapi__Geometry,
  &_swigt__p_pythonapi__IOOptions,
  &_swigt__p_pythonapi__IlwisObject,
  &_swigt__p_pythonapi__IndexedIdentifier,
  &_swigt__p_pythonapi__IndexedItemRange,
  &_swigt__p_pythonapi__Interval,
  &_swigt__p_pythonapi__ItemDomain,
  &_swigt__p_pythonapi__ItemRange,
  &_swigt__p_pythonapi__NamedIdentifier,
  &_swigt__p_pythonapi__NamedItemRange,
  &_swigt__p_pythonapi__NumericDomain,
  &_swigt__p_pythonapi__NumericItemRange,
  &_swigt__p_pythonapi__NumericRange,
  &_swigt__p_pythonapi__Object,
  &_swigt__p_pythonapi__PixelIterator,
  &_swigt__p_pythonapi__PixelTemplateT_double_t,
  &_swigt__p_pythonapi__PixelTemplateT_int_t,
  &_swigt__p_pythonapi__Properties,
  &_swigt__p_pythonapi__Properties__Values,
  &_swigt__p_pythonapi__Range,
  &_swigt__p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t,
  &_swigt__p_pythonapi__RasterCoverage,
  &_swigt__p_pythonapi__SizeTemplateT_double_t,
  &_swigt__p_pythonapi__SizeTemplateT_unsigned_int_t,
  &_swigt__p_pythonapi__Table,
  &_swigt__p_pythonapi__TextDomain,
  &_swigt__p_pythonapi__ThematicItem,
  &_swigt__p_pythonapi__ThematicRange,
  &_swigt__p_pythonapi__TimeDomain,
  &_swigt__p_pythonapi__TimeInterval,
  &_swigt__p_pythonapi__VertexIterator,
  &_swigt__p_pythonapi__it,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_Ilwis__ContainerStatisticsT_double_t[] = {  {&_swigt__p_Ilwis__ContainerStatisticsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__DomainItem[] = {  {&_swigt__p_Ilwis__DomainItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__Coverage_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__Coverage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__Domain_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__Domain_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__GeoReference_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__GeoReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__IlwisDataT_Ilwis__Table_t[] = {  {&_swigt__p_Ilwis__IlwisDataT_Ilwis__Table_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__NumericRange[] = {  {&_swigt__p_Ilwis__NumericRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ilwis__PixelIterator[] = {  {&_swigt__p_Ilwis__PixelIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QSharedPointerT_Ilwis__DomainItem_t[] = {  {&_swigt__p_QSharedPointerT_Ilwis__DomainItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__object[] = {  {&_swigt__p__object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bufferinfo[] = {  {&_swigt__p_bufferinfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geos__geom__Geometry[] = {  {&_swigt__p_geos__geom__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t[] = {  {&_swigt__p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t[] = {  {&_swigt__p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Catalog[] = {  {&_swigt__p_pythonapi__Catalog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Collection[] = {  {&_swigt__p_pythonapi__Collection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Color[] = {  {&_swigt__p_pythonapi__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColorDomain[] = {  {&_swigt__p_pythonapi__ColorDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColorModelNS[] = {  {&_swigt__p_pythonapi__ColorModelNS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColorModelNS__Value[] = {  {&_swigt__p_pythonapi__ColorModelNS__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColorPalette[] = {  {&_swigt__p_pythonapi__ColorPalette, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColorRange[] = {  {&_swigt__p_pythonapi__ColorPalette, _p_pythonapi__ColorPaletteTo_p_pythonapi__ColorRange, 0, 0},  {&_swigt__p_pythonapi__ColorRange, 0, 0, 0},  {&_swigt__p_pythonapi__ContinuousColorRange, _p_pythonapi__ContinuousColorRangeTo_p_pythonapi__ColorRange, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ColumnDefinition[] = {  {&_swigt__p_pythonapi__ColumnDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ContainerStatisticsT_double_t[] = {  {&_swigt__p_pythonapi__ContainerStatisticsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ContinuousColorRange[] = {  {&_swigt__p_pythonapi__ContinuousColorRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Coordinate[] = {  {&_swigt__p_pythonapi__Coordinate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__CoordinateSystem[] = {  {&_swigt__p_pythonapi__CoordinateSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Coverage[] = {  {&_swigt__p_pythonapi__Coverage, 0, 0, 0},  {&_swigt__p_pythonapi__FeatureCoverage, _p_pythonapi__FeatureCoverageTo_p_pythonapi__Coverage, 0, 0},  {&_swigt__p_pythonapi__RasterCoverage, _p_pythonapi__RasterCoverageTo_p_pythonapi__Coverage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__DataDefinition[] = {  {&_swigt__p_pythonapi__DataDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Domain[] = {  {&_swigt__p_pythonapi__ColorDomain, _p_pythonapi__ColorDomainTo_p_pythonapi__Domain, 0, 0},  {&_swigt__p_pythonapi__TextDomain, _p_pythonapi__TextDomainTo_p_pythonapi__Domain, 0, 0},  {&_swigt__p_pythonapi__Domain, 0, 0, 0},  {&_swigt__p_pythonapi__NumericDomain, _p_pythonapi__NumericDomainTo_p_pythonapi__Domain, 0, 0},  {&_swigt__p_pythonapi__ItemDomain, _p_pythonapi__ItemDomainTo_p_pythonapi__Domain, 0, 0},  {&_swigt__p_pythonapi__TimeDomain, _p_pythonapi__TimeDomainTo_p_pythonapi__Domain, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__DomainItem[] = {  {&_swigt__p_pythonapi__ThematicItem, _p_pythonapi__ThematicItemTo_p_pythonapi__DomainItem, 0, 0},  {&_swigt__p_pythonapi__DomainItem, 0, 0, 0},  {&_swigt__p_pythonapi__IndexedIdentifier, _p_pythonapi__IndexedIdentifierTo_p_pythonapi__DomainItem, 0, 0},  {&_swigt__p_pythonapi__NamedIdentifier, _p_pythonapi__NamedIdentifierTo_p_pythonapi__DomainItem, 0, 0},  {&_swigt__p_pythonapi__Interval, _p_pythonapi__IntervalTo_p_pythonapi__DomainItem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Engine[] = {  {&_swigt__p_pythonapi__Engine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Feature[] = {  {&_swigt__p_pythonapi__Feature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__FeatureCoverage[] = {  {&_swigt__p_pythonapi__FeatureCoverage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__FeatureIterator[] = {  {&_swigt__p_pythonapi__FeatureIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__FlowVal[] = {  {&_swigt__p_pythonapi__FlowVal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__FlowVal__Value[] = {  {&_swigt__p_pythonapi__FlowVal__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__GeoReference[] = {  {&_swigt__p_pythonapi__GeoReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Geometry[] = {  {&_swigt__p_pythonapi__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__IOOptions[] = {  {&_swigt__p_pythonapi__IOOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__IlwisObject[] = {  {&_swigt__p_pythonapi__Coverage, _p_pythonapi__CoverageTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__FeatureCoverage, _p_pythonapi__FeatureCoverageTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__RasterCoverage, _p_pythonapi__RasterCoverageTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__IlwisObject, 0, 0, 0},  {&_swigt__p_pythonapi__CoordinateSystem, _p_pythonapi__CoordinateSystemTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__GeoReference, _p_pythonapi__GeoReferenceTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__ColorDomain, _p_pythonapi__ColorDomainTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__TextDomain, _p_pythonapi__TextDomainTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__Table, _p_pythonapi__TableTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__Domain, _p_pythonapi__DomainTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__NumericDomain, _p_pythonapi__NumericDomainTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__ItemDomain, _p_pythonapi__ItemDomainTo_p_pythonapi__IlwisObject, 0, 0},  {&_swigt__p_pythonapi__TimeDomain, _p_pythonapi__TimeDomainTo_p_pythonapi__IlwisObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__IndexedIdentifier[] = {  {&_swigt__p_pythonapi__IndexedIdentifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__IndexedItemRange[] = {  {&_swigt__p_pythonapi__IndexedItemRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Interval[] = {  {&_swigt__p_pythonapi__Interval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ItemDomain[] = {  {&_swigt__p_pythonapi__ItemDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ItemRange[] = {  {&_swigt__p_pythonapi__ItemRange, 0, 0, 0},  {&_swigt__p_pythonapi__NumericItemRange, _p_pythonapi__NumericItemRangeTo_p_pythonapi__ItemRange, 0, 0},  {&_swigt__p_pythonapi__IndexedItemRange, _p_pythonapi__IndexedItemRangeTo_p_pythonapi__ItemRange, 0, 0},  {&_swigt__p_pythonapi__NamedItemRange, _p_pythonapi__NamedItemRangeTo_p_pythonapi__ItemRange, 0, 0},  {&_swigt__p_pythonapi__ThematicRange, _p_pythonapi__ThematicRangeTo_p_pythonapi__ItemRange, 0, 0},  {&_swigt__p_pythonapi__ColorPalette, _p_pythonapi__ColorPaletteTo_p_pythonapi__ItemRange, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__NamedIdentifier[] = {  {&_swigt__p_pythonapi__ThematicItem, _p_pythonapi__ThematicItemTo_p_pythonapi__NamedIdentifier, 0, 0},  {&_swigt__p_pythonapi__NamedIdentifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__NamedItemRange[] = {  {&_swigt__p_pythonapi__NamedItemRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__NumericDomain[] = {  {&_swigt__p_pythonapi__NumericDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__NumericItemRange[] = {  {&_swigt__p_pythonapi__NumericItemRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__NumericRange[] = {  {&_swigt__p_pythonapi__NumericRange, 0, 0, 0},  {&_swigt__p_pythonapi__TimeInterval, _p_pythonapi__TimeIntervalTo_p_pythonapi__NumericRange, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Object[] = {  {&_swigt__p_pythonapi__Feature, _p_pythonapi__FeatureTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Table, _p_pythonapi__TableTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Range, _p_pythonapi__RangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__DomainItem, _p_pythonapi__DomainItemTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Catalog, _p_pythonapi__CatalogTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__GeoReference, _p_pythonapi__GeoReferenceTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__RasterCoverage, _p_pythonapi__RasterCoverageTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__FeatureCoverage, _p_pythonapi__FeatureCoverageTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Coverage, _p_pythonapi__CoverageTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ThematicRange, _p_pythonapi__ThematicRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__NumericRange, _p_pythonapi__NumericRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ColorDomain, _p_pythonapi__ColorDomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__TextDomain, _p_pythonapi__TextDomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ColorRange, _p_pythonapi__ColorRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ContinuousColorRange, _p_pythonapi__ContinuousColorRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Collection, _p_pythonapi__CollectionTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Geometry, _p_pythonapi__GeometryTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ColorPalette, _p_pythonapi__ColorPaletteTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ThematicItem, _p_pythonapi__ThematicItemTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__NamedIdentifier, _p_pythonapi__NamedIdentifierTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__IndexedIdentifier, _p_pythonapi__IndexedIdentifierTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__TimeDomain, _p_pythonapi__TimeDomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ItemDomain, _p_pythonapi__ItemDomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__NumericDomain, _p_pythonapi__NumericDomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Domain, _p_pythonapi__DomainTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__ItemRange, _p_pythonapi__ItemRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__NumericItemRange, _p_pythonapi__NumericItemRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__IndexedItemRange, _p_pythonapi__IndexedItemRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__NamedItemRange, _p_pythonapi__NamedItemRangeTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Interval, _p_pythonapi__IntervalTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__TimeInterval, _p_pythonapi__TimeIntervalTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__CoordinateSystem, _p_pythonapi__CoordinateSystemTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__IlwisObject, _p_pythonapi__IlwisObjectTo_p_pythonapi__Object, 0, 0},  {&_swigt__p_pythonapi__Object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__PixelIterator[] = {  {&_swigt__p_pythonapi__PixelIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__PixelTemplateT_double_t[] = {  {&_swigt__p_pythonapi__PixelTemplateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__PixelTemplateT_int_t[] = {  {&_swigt__p_pythonapi__PixelTemplateT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Properties[] = {  {&_swigt__p_pythonapi__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Properties__Values[] = {  {&_swigt__p_pythonapi__Properties__Values, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Range[] = {  {&_swigt__p_pythonapi__Range, 0, 0, 0},  {&_swigt__p_pythonapi__ItemRange, _p_pythonapi__ItemRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__NumericItemRange, _p_pythonapi__NumericItemRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__IndexedItemRange, _p_pythonapi__IndexedItemRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__NamedItemRange, _p_pythonapi__NamedItemRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__ThematicRange, _p_pythonapi__ThematicRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__NumericRange, _p_pythonapi__NumericRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__ColorPalette, _p_pythonapi__ColorPaletteTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__TimeInterval, _p_pythonapi__TimeIntervalTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__ColorRange, _p_pythonapi__ColorRangeTo_p_pythonapi__Range, 0, 0},  {&_swigt__p_pythonapi__ContinuousColorRange, _p_pythonapi__ContinuousColorRangeTo_p_pythonapi__Range, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t[] = {  {&_swigt__p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__RasterCoverage[] = {  {&_swigt__p_pythonapi__RasterCoverage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__SizeTemplateT_double_t[] = {  {&_swigt__p_pythonapi__SizeTemplateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__SizeTemplateT_unsigned_int_t[] = {  {&_swigt__p_pythonapi__SizeTemplateT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__Table[] = {  {&_swigt__p_pythonapi__Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__TextDomain[] = {  {&_swigt__p_pythonapi__TextDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ThematicItem[] = {  {&_swigt__p_pythonapi__ThematicItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__ThematicRange[] = {  {&_swigt__p_pythonapi__ThematicRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__TimeDomain[] = {  {&_swigt__p_pythonapi__TimeDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__TimeInterval[] = {  {&_swigt__p_pythonapi__TimeInterval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__VertexIterator[] = {  {&_swigt__p_pythonapi__VertexIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pythonapi__it[] = {  {&_swigt__p_pythonapi__it, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Ilwis__ContainerStatisticsT_double_t,
  _swigc__p_Ilwis__DomainItem,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__CoordinateSystem_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__Coverage_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__Domain_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__FeatureCoverage_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__GeoReference_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__IlwisObject_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__NumericDomain_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__RasterCoverage_t,
  _swigc__p_Ilwis__IlwisDataT_Ilwis__Table_t,
  _swigc__p_Ilwis__NumericRange,
  _swigc__p_Ilwis__PixelIterator,
  _swigc__p_QSharedPointerT_Ilwis__DomainItem_t,
  _swigc__p__object,
  _swigc__p_bufferinfo,
  _swigc__p_char,
  _swigc__p_geos__geom__Geometry,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_pythonapi__BoxTemplateT_Ilwis__Coordinate_pythonapi__Coordinate_double_t,
  _swigc__p_pythonapi__BoxTemplateT_Ilwis__LocationT_int_false_t_pythonapi__PixelTemplateT_qint32_t_unsigned_int_t,
  _swigc__p_pythonapi__Catalog,
  _swigc__p_pythonapi__Collection,
  _swigc__p_pythonapi__Color,
  _swigc__p_pythonapi__ColorDomain,
  _swigc__p_pythonapi__ColorModelNS,
  _swigc__p_pythonapi__ColorModelNS__Value,
  _swigc__p_pythonapi__ColorPalette,
  _swigc__p_pythonapi__ColorRange,
  _swigc__p_pythonapi__ColumnDefinition,
  _swigc__p_pythonapi__ContainerStatisticsT_double_t,
  _swigc__p_pythonapi__ContinuousColorRange,
  _swigc__p_pythonapi__Coordinate,
  _swigc__p_pythonapi__CoordinateSystem,
  _swigc__p_pythonapi__Coverage,
  _swigc__p_pythonapi__DataDefinition,
  _swigc__p_pythonapi__Domain,
  _swigc__p_pythonapi__DomainItem,
  _swigc__p_pythonapi__Engine,
  _swigc__p_pythonapi__Feature,
  _swigc__p_pythonapi__FeatureCoverage,
  _swigc__p_pythonapi__FeatureIterator,
  _swigc__p_pythonapi__FlowVal,
  _swigc__p_pythonapi__FlowVal__Value,
  _swigc__p_pythonapi__GeoReference,
  _swigc__p_pythonapi__Geometry,
  _swigc__p_pythonapi__IOOptions,
  _swigc__p_pythonapi__IlwisObject,
  _swigc__p_pythonapi__IndexedIdentifier,
  _swigc__p_pythonapi__IndexedItemRange,
  _swigc__p_pythonapi__Interval,
  _swigc__p_pythonapi__ItemDomain,
  _swigc__p_pythonapi__ItemRange,
  _swigc__p_pythonapi__NamedIdentifier,
  _swigc__p_pythonapi__NamedItemRange,
  _swigc__p_pythonapi__NumericDomain,
  _swigc__p_pythonapi__NumericItemRange,
  _swigc__p_pythonapi__NumericRange,
  _swigc__p_pythonapi__Object,
  _swigc__p_pythonapi__PixelIterator,
  _swigc__p_pythonapi__PixelTemplateT_double_t,
  _swigc__p_pythonapi__PixelTemplateT_int_t,
  _swigc__p_pythonapi__Properties,
  _swigc__p_pythonapi__Properties__Values,
  _swigc__p_pythonapi__Range,
  _swigc__p_pythonapi__RangeIteratorT_double_pythonapi__NumericRange_double_Ilwis__NumericRange_t,
  _swigc__p_pythonapi__RasterCoverage,
  _swigc__p_pythonapi__SizeTemplateT_double_t,
  _swigc__p_pythonapi__SizeTemplateT_unsigned_int_t,
  _swigc__p_pythonapi__Table,
  _swigc__p_pythonapi__TextDomain,
  _swigc__p_pythonapi__ThematicItem,
  _swigc__p_pythonapi__ThematicRange,
  _swigc__p_pythonapi__TimeDomain,
  _swigc__p_pythonapi__TimeInterval,
  _swigc__p_pythonapi__VertexIterator,
  _swigc__p_pythonapi__it,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  //init FeatureCreationError for Python
  pythonapi::featureCreationError = PyErr_NewException("_ilwisobjects.FeatureCreationError",NULL,NULL);
  Py_INCREF(pythonapi::featureCreationError);
  PyModule_AddObject(m, "FeatureCreationError", pythonapi::featureCreationError);//m is SWIG declaration for Python C API modul creation
  //init IlwisException for Python
  pythonapi::ilwisException = PyErr_NewException("_ilwisobjects.IlwisException",NULL,NULL);
  Py_INCREF(pythonapi::ilwisException);
  PyModule_AddObject(m, "IlwisException", pythonapi::ilwisException);//m is SWIG declaration for Python C API modul creation
  //init InvalidObjectException for Python
  pythonapi::invalidObjectException = PyErr_NewException("_ilwisobjects.InvalidObjectException",NULL,NULL);
  Py_INCREF(pythonapi::invalidObjectException);
  PyModule_AddObject(m, "InvalidObjectException", pythonapi::invalidObjectException);//m is SWIG declaration for Python C API modul creation
  atexit(exitPython);
  
  SWIG_Python_SetConstant(d, "it_FEATURE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::FEATURE)));
  SWIG_Python_SetConstant(d, "it_RASTER",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::RASTER)));
  SWIG_Python_SetConstant(d, "it_COVERAGE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::COVERAGE)));
  SWIG_Python_SetConstant(d, "it_TABLE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::TABLE)));
  SWIG_Python_SetConstant(d, "it_GEOREF",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::GEOREF)));
  SWIG_Python_SetConstant(d, "it_COORDSYSTEM",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::COORDSYSTEM)));
  SWIG_Python_SetConstant(d, "it_ILWDOMAIN",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::ILWDOMAIN)));
  SWIG_Python_SetConstant(d, "it_NUMERICDOMAIN",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::NUMERICDOMAIN)));
  SWIG_Python_SetConstant(d, "it_ITEMDOMAIN",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::ITEMDOMAIN)));
  SWIG_Python_SetConstant(d, "it_SINGLEOPERATION",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::SINGLEOPERATION)));
  SWIG_Python_SetConstant(d, "it_WORKFLOW",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::WORKFLOW)));
  SWIG_Python_SetConstant(d, "it_PROJECTION",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::PROJECTION)));
  SWIG_Python_SetConstant(d, "it_ELLIPSOID",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::ELLIPSOID)));
  SWIG_Python_SetConstant(d, "it_CATALOG",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::CATALOG)));
  SWIG_Python_SetConstant(d, "it_CONTINUOUSCOLOR",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::CONTINUOUSCOLOR)));
  SWIG_Python_SetConstant(d, "it_PALETTECOLOR",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::PALETTECOLOR)));
  SWIG_Python_SetConstant(d, "it_VALUERANGE",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::VALUERANGE)));
  SWIG_Python_SetConstant(d, "it_COLLECTION",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(pythonapi::it::COLLECTION)));
  SWIG_Python_SetConstant(d, "IlwisObject_cmINPUT",SWIG_From_int(static_cast< int >(pythonapi::IlwisObject::cmINPUT)));
  SWIG_Python_SetConstant(d, "IlwisObject_cmOUTPUT",SWIG_From_int(static_cast< int >(pythonapi::IlwisObject::cmOUTPUT)));
  SWIG_Python_SetConstant(d, "IlwisObject_cmEXTENDED",SWIG_From_int(static_cast< int >(pythonapi::IlwisObject::cmEXTENDED)));
  SWIG_Python_SetConstant(d, "IlwisObject_smMETADATA",SWIG_From_int(static_cast< int >(pythonapi::IlwisObject::smMETADATA)));
  SWIG_Python_SetConstant(d, "IlwisObject_smBINARYDATA",SWIG_From_int(static_cast< int >(pythonapi::IlwisObject::smBINARYDATA)));
  SWIG_Python_SetConstant(d, "PropertySets_pNONE",SWIG_From_int(static_cast< int >(pythonapi::Properties::pNONE)));
  SWIG_Python_SetConstant(d, "PropertySets_pBASIC",SWIG_From_int(static_cast< int >(pythonapi::Properties::pBASIC)));
  SWIG_Python_SetConstant(d, "PropertySets_pMIN",SWIG_From_int(static_cast< int >(pythonapi::Properties::pMIN)));
  SWIG_Python_SetConstant(d, "PropertySets_pMAX",SWIG_From_int(static_cast< int >(pythonapi::Properties::pMAX)));
  SWIG_Python_SetConstant(d, "PropertySets_pDISTANCE",SWIG_From_int(static_cast< int >(pythonapi::Properties::pDISTANCE)));
  SWIG_Python_SetConstant(d, "PropertySets_pDELTA",SWIG_From_int(static_cast< int >(pythonapi::Properties::pDELTA)));
  SWIG_Python_SetConstant(d, "PropertySets_pNETTOCOUNT",SWIG_From_int(static_cast< int >(pythonapi::Properties::pNETTOCOUNT)));
  SWIG_Python_SetConstant(d, "PropertySets_pCOUNT",SWIG_From_int(static_cast< int >(pythonapi::Properties::pCOUNT)));
  SWIG_Python_SetConstant(d, "PropertySets_pSUM",SWIG_From_int(static_cast< int >(pythonapi::Properties::pSUM)));
  SWIG_Python_SetConstant(d, "PropertySets_pMEAN",SWIG_From_int(static_cast< int >(pythonapi::Properties::pMEAN)));
  SWIG_Python_SetConstant(d, "PropertySets_pMEDIAN",SWIG_From_int(static_cast< int >(pythonapi::Properties::pMEDIAN)));
  SWIG_Python_SetConstant(d, "PropertySets_pPREDOMINANT",SWIG_From_int(static_cast< int >(pythonapi::Properties::pPREDOMINANT)));
  SWIG_Python_SetConstant(d, "PropertySets_pSTDEV",SWIG_From_int(static_cast< int >(pythonapi::Properties::pSTDEV)));
  SWIG_Python_SetConstant(d, "PropertySets_pHISTOGRAM",SWIG_From_int(static_cast< int >(pythonapi::Properties::pHISTOGRAM)));
  SWIG_Python_SetConstant(d, "PropertySets_pLAST",SWIG_From_int(static_cast< int >(pythonapi::Properties::pLAST)));
  SWIG_Python_SetConstant(d, "PropertySets_pALL",SWIG_From_int(static_cast< int >(pythonapi::Properties::pALL)));
  SWIG_Python_SetConstant(d, "ColorModel_cmNONE",SWIG_From_int(static_cast< int >(pythonapi::ColorModelNS::cmNONE)));
  SWIG_Python_SetConstant(d, "ColorModel_cmRGBA",SWIG_From_int(static_cast< int >(pythonapi::ColorModelNS::cmRGBA)));
  SWIG_Python_SetConstant(d, "ColorModel_cmHSLA",SWIG_From_int(static_cast< int >(pythonapi::ColorModelNS::cmHSLA)));
  SWIG_Python_SetConstant(d, "ColorModel_cmCYMKA",SWIG_From_int(static_cast< int >(pythonapi::ColorModelNS::cmCYMKA)));
  SWIG_Python_SetConstant(d, "ColorModel_cmGREYSCALE",SWIG_From_int(static_cast< int >(pythonapi::ColorModelNS::cmGREYSCALE)));
  SWIG_Python_SetConstant(d, "Coverage_atCOVERAGE",SWIG_From_int(static_cast< int >(pythonapi::Coverage::atCOVERAGE)));
  SWIG_Python_SetConstant(d, "Coverage_atINDEX",SWIG_From_int(static_cast< int >(pythonapi::Coverage::atINDEX)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"COVERAGEATRIB",Swig_var_COVERAGEATRIB_get, Swig_var_COVERAGEATRIB_set);
  SWIG_Python_SetConstant(d, "Flow_XYZ",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::XYZ)));
  SWIG_Python_SetConstant(d, "Flow_YXZ",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::YXZ)));
  SWIG_Python_SetConstant(d, "Flow_XZY",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::XZY)));
  SWIG_Python_SetConstant(d, "Flow_YZX",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::YZX)));
  SWIG_Python_SetConstant(d, "Flow_ZXY",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::ZXY)));
  SWIG_Python_SetConstant(d, "Flow_ZYX",SWIG_From_int(static_cast< int >(pythonapi::FlowVal::ZYX)));
  SWIG_Python_SetConstant(d, "Domain_cSELF",SWIG_From_int(static_cast< int >(pythonapi::Domain::cSELF)));
  SWIG_Python_SetConstant(d, "Domain_cPARENT",SWIG_From_int(static_cast< int >(pythonapi::Domain::cPARENT)));
  SWIG_Python_SetConstant(d, "Domain_cDECLARED",SWIG_From_int(static_cast< int >(pythonapi::Domain::cDECLARED)));
  SWIG_Python_SetConstant(d, "Domain_cNONE",SWIG_From_int(static_cast< int >(pythonapi::Domain::cNONE)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

